
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000049c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006e  0080006e  0000053e  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001fc  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074c  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040b  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000640  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000229  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	60 c0       	rjmp	.+192    	; 0xce <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ec e9       	ldi	r30, 0x9C	; 156
  3e:	f4 e0       	ldi	r31, 0x04	; 4
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	ae 36       	cpi	r26, 0x6E	; 110
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	ae e6       	ldi	r26, 0x6E	; 110
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a8 37       	cpi	r26, 0x78	; 120
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	0e d0       	rcall	.+28     	; 0x7a <main>
  5e:	1c c2       	rjmp	.+1080   	; 0x498 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <test>:
#define F_CPU 1000000UL

char hh = 0;

int test(void){
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  62:	17 ba       	out	0x17, r1	; 23
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
  64:	85 e9       	ldi	r24, 0x95	; 149
  66:	88 bb       	out	0x18, r24	; 24
}
  68:	08 95       	ret

0000006a <init_main>:
  TCNT1=0; //обнуляем таймер
}

void init_main(void){
	
	DDRA=0xF0;
  6a:	80 ef       	ldi	r24, 0xF0	; 240
  6c:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  6e:	8f e0       	ldi	r24, 0x0F	; 15
  70:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  76:	87 bb       	out	0x17, r24	; 23
	//PORTB=0xF3;

}
  78:	08 95       	ret

0000007a <main>:

int main(void){
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  TCNT1=0; //обнуляем таймер
}

void init_main(void){
	
	DDRA=0xF0;
  7e:	80 ef       	ldi	r24, 0xF0	; 240
  80:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  8a:	87 bb       	out	0x17, r24	; 23

}

int main(void){
	init_main();
	PORTB=0x67;
  8c:	87 e6       	ldi	r24, 0x67	; 103
  8e:	88 bb       	out	0x18, r24	; 24
	//test1_func();
	//PORTC=0b10011001;
	//uart_init();
	//uart_send_byte('h');
	//uart_send_byte('3');
	display_set_bytes(1,2,3,4);
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	43 e0       	ldi	r20, 0x03	; 3
  96:	24 e0       	ldi	r18, 0x04	; 4
  98:	82 d0       	rcall	.+260    	; 0x19e <display_set_bytes>
	leds_random_line();
  9a:	e4 d0       	rcall	.+456    	; 0x264 <leds_random_line>
	display_init_timer();
  9c:	b1 d0       	rcall	.+354    	; 0x200 <display_init_timer>
	sei();
  9e:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	c4 e6       	ldi	r28, 0x64	; 100
  a2:	d0 e0       	ldi	r29, 0x00	; 0

	while(1) {
		leds_move_column();
  a4:	b9 d0       	rcall	.+370    	; 0x218 <leds_move_column>
		leds_update();
  a6:	d1 d0       	rcall	.+418    	; 0x24a <leds_update>
  a8:	88 ee       	ldi	r24, 0xE8	; 232
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	fe 01       	movw	r30, r28
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b4:	d9 f7       	brne	.-10     	; 0xac <main+0x32>
		_delay_ms(100);

		hh++;
  b6:	80 91 6e 00 	lds	r24, 0x006E
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 6e 00 	sts	0x006E, r24
		if(hh % 4 == 0){
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	83 70       	andi	r24, 0x03	; 3
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	89 2b       	or	r24, r25
  c8:	69 f7       	brne	.-38     	; 0xa4 <main+0x2a>
			leds_random_line();
  ca:	cc d0       	rcall	.+408    	; 0x264 <leds_random_line>
  cc:	eb cf       	rjmp	.-42     	; 0xa4 <main+0x2a>

000000ce <__vector_6>:
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
}

ISR (TIMER1_COMPA_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
  display_flash_once();
  f0:	67 d0       	rcall	.+206    	; 0x1c0 <display_flash_once>
  //display_set_bytes(1,2,3,1);
  TCNT1=0; //обнуляем таймер
  f2:	1d bc       	out	0x2d, r1	; 45
  f4:	1c bc       	out	0x2c, r1	; 44
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <test1_func>:
#include <avr/io.h>

int test1_func(void){
	DDRA=0xFF; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b10010100; // ????????? LED7, PB0-????????????? ???????? ??????
 11c:	84 e9       	ldi	r24, 0x94	; 148
 11e:	8b bb       	out	0x1b, r24	; 27
}
 120:	08 95       	ret

00000122 <keyboard_get_state>:
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
 122:	10 92 6f 00 	sts	0x006F, r1
 126:	40 91 70 00 	lds	r20, 0x0070
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	23 c0       	rjmp	.+70     	; 0x174 <keyboard_get_state+0x52>
    { 
       PORTA=portState[i];
 12e:	e5 2f       	mov	r30, r21
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e0 5a       	subi	r30, 0xA0	; 160
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	18 c0       	rjmp	.+48     	; 0x16e <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[j])==0))
 13e:	89 b3       	in	r24, 0x19	; 25
 140:	24 2f       	mov	r18, r20
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	64 2f       	mov	r22, r20
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	f9 01       	movw	r30, r18
 14a:	ec 59       	subi	r30, 0x9C	; 156
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	90 81       	ld	r25, Z
 150:	89 23       	and	r24, r25
 152:	61 f4       	brne	.+24     	; 0x16c <keyboard_get_state+0x4a>
 154:	40 93 70 00 	sts	0x0070, r20
 158:	50 93 6f 00 	sts	0x006F, r21
          {
		  	return (j<<4) | i;
 15c:	84 e0       	ldi	r24, 0x04	; 4
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	8a 95       	dec	r24
 164:	e1 f7       	brne	.-8      	; 0x15e <keyboard_get_state+0x3c>
 166:	85 2f       	mov	r24, r21
 168:	82 2b       	or	r24, r18
 16a:	08 95       	ret
 16c:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[i];
       for(j=0; j<4; j++)
 16e:	44 30       	cpi	r20, 0x04	; 4
 170:	31 f7       	brne	.-52     	; 0x13e <keyboard_get_state+0x1c>
 172:	5f 5f       	subi	r21, 0xFF	; 255
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
 174:	54 30       	cpi	r21, 0x04	; 4
 176:	d8 f2       	brcs	.-74     	; 0x12e <keyboard_get_state+0xc>
 178:	40 93 70 00 	sts	0x0070, r20
 17c:	50 93 6f 00 	sts	0x006F, r21
 180:	8f ef       	ldi	r24, 0xFF	; 255
		  	return (j<<4) | i;
          }
       }                          
    }
	return 0xFF;  
}
 182:	08 95       	ret

00000184 <uart_init>:
#include <avr/io.h>
#define BAUD 9600
#include <util/setbaud.h>

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
 184:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
 186:	89 e1       	ldi	r24, 0x19	; 25
 188:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
#else
    UCSRA &= ~(_BV(U2X));
 18a:	59 98       	cbi	0x0b, 1	; 11
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	8a b9       	out	0x0a, r24	; 10
}
 194:	08 95       	ret

00000196 <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); /* Wait until data register empty. */
 196:	5d 9b       	sbis	0x0b, 5	; 11
 198:	fe cf       	rjmp	.-4      	; 0x196 <uart_send_byte>
   UDR = c;
 19a:	8c b9       	out	0x0c, r24	; 12
}
 19c:	08 95       	ret

0000019e <display_set_bytes>:
char c1, c2, c3, c4;
char display_temp;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c1 = 0x10 | (0x0F & t1);
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	80 93 76 00 	sts	0x0076, r24
	c2 = 0x20 | (0x0F & t2);
 1a6:	6f 70       	andi	r22, 0x0F	; 15
 1a8:	60 62       	ori	r22, 0x20	; 32
 1aa:	60 93 74 00 	sts	0x0074, r22
	c3 = 0x40 | (0x0F & t3);
 1ae:	4f 70       	andi	r20, 0x0F	; 15
 1b0:	40 64       	ori	r20, 0x40	; 64
 1b2:	40 93 77 00 	sts	0x0077, r20
	c4 = 0x80 | (0x0F & t4);
 1b6:	2f 70       	andi	r18, 0x0F	; 15
 1b8:	20 68       	ori	r18, 0x80	; 128
 1ba:	20 93 73 00 	sts	0x0073, r18
}
 1be:	08 95       	ret

000001c0 <display_flash_once>:

void display_flash_once(){
	PORTB = c1;
 1c0:	80 91 76 00 	lds	r24, 0x0076
 1c4:	88 bb       	out	0x18, r24	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c6:	95 e8       	ldi	r25, 0x85	; 133
 1c8:	89 2f       	mov	r24, r25
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <display_flash_once+0xa>
	_delay_us(100);
	PORTB = c2;
 1ce:	80 91 74 00 	lds	r24, 0x0074
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	89 2f       	mov	r24, r25
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <display_flash_once+0x16>
	_delay_us(100);
	PORTB = c3;
 1da:	80 91 77 00 	lds	r24, 0x0077
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	89 2f       	mov	r24, r25
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <display_flash_once+0x22>
	_delay_us(100);
	PORTB = c4;
 1e6:	80 91 73 00 	lds	r24, 0x0073
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <display_flash_once+0x2c>
	_delay_us(100);
	display_off();
}

void display_off(){
	PORTB &= 0x0F;
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	88 bb       	out	0x18, r24	; 24
	PORTB = c3;
	_delay_us(100);
	PORTB = c4;
	_delay_us(100);
	display_off();
}
 1f6:	08 95       	ret

000001f8 <display_off>:

void display_off(){
	PORTB &= 0x0F;
 1f8:	88 b3       	in	r24, 0x18	; 24
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	88 bb       	out	0x18, r24	; 24
}
 1fe:	08 95       	ret

00000200 <display_init_timer>:

void display_init_timer(){
	TCCR1A=0x00; //настройка таймера
 200:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00; //здесь увеличиваются тики
 206:	1d bc       	out	0x2d, r1	; 45
 208:	1c bc       	out	0x2c, r1	; 44
	//OCR1A=0x1E85; //записываем число в регистр сравнения
 	OCR1A=0x0001;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9b bd       	out	0x2b, r25	; 43
 210:	8a bd       	out	0x2a, r24	; 42
	TIMSK=0x10; //запускаем таймер
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	89 bf       	out	0x39, r24	; 57
	//TCCR1B |= (1<<WGM12);
	//TIMSK |= (1<<OCIE1A);
	//OCR1AH = 0b01111010;
	//OCR1AL = 0b00010010;
	//TCCR1B |= (1<<CS12);
}
 216:	08 95       	ret

00000218 <leds_move_column>:
	line = rand() % 4;
	return line;
}

void leds_move_column(){
	if(direction == 1){
 218:	80 91 68 00 	lds	r24, 0x0068
 21c:	90 91 72 00 	lds	r25, 0x0072
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	39 f4       	brne	.+14     	; 0x232 <leds_move_column+0x1a>
		if(column < 3){
 224:	93 30       	cpi	r25, 0x03	; 3
 226:	10 f4       	brcc	.+4      	; 0x22c <leds_move_column+0x14>
			column++;
 228:	9f 5f       	subi	r25, 0xFF	; 255
 22a:	06 c0       	rjmp	.+12     	; 0x238 <leds_move_column+0x20>
		} else {
			direction = 0;
 22c:	10 92 68 00 	sts	0x0068, r1
 230:	02 c0       	rjmp	.+4      	; 0x236 <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
 232:	99 23       	and	r25, r25
 234:	21 f0       	breq	.+8      	; 0x23e <leds_move_column+0x26>
			column--;
 236:	91 50       	subi	r25, 0x01	; 1
 238:	90 93 72 00 	sts	0x0072, r25
 23c:	08 95       	ret
		} else {
			direction = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 68 00 	sts	0x0068, r24
			column++;
 244:	80 93 72 00 	sts	0x0072, r24
 248:	08 95       	ret

0000024a <leds_update>:
		}
	}
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
 24a:	90 91 71 00 	lds	r25, 0x0071
 24e:	90 68       	ori	r25, 0x80	; 128
 250:	80 91 72 00 	lds	r24, 0x0072
 254:	88 0f       	add	r24, r24
 256:	88 0f       	add	r24, r24
 258:	88 0f       	add	r24, r24
 25a:	89 2b       	or	r24, r25
 25c:	85 bb       	out	0x15, r24	; 21
}
 25e:	08 95       	ret

00000260 <leds_off>:

void leds_off(){
	PORTC &= 0x7F;
 260:	af 98       	cbi	0x15, 7	; 21
}
 262:	08 95       	ret

00000264 <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 4;
 264:	77 d0       	rcall	.+238    	; 0x354 <rand>
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	03 d0       	rcall	.+6      	; 0x272 <__divmodhi4>
 26c:	80 93 71 00 	sts	0x0071, r24
	return line;
}
 270:	08 95       	ret

00000272 <__divmodhi4>:
 272:	97 fb       	bst	r25, 7
 274:	09 2e       	mov	r0, r25
 276:	07 26       	eor	r0, r23
 278:	0a d0       	rcall	.+20     	; 0x28e <__divmodhi4_neg1>
 27a:	77 fd       	sbrc	r23, 7
 27c:	04 d0       	rcall	.+8      	; 0x286 <__divmodhi4_neg2>
 27e:	0c d0       	rcall	.+24     	; 0x298 <__udivmodhi4>
 280:	06 d0       	rcall	.+12     	; 0x28e <__divmodhi4_neg1>
 282:	00 20       	and	r0, r0
 284:	1a f4       	brpl	.+6      	; 0x28c <__divmodhi4_exit>

00000286 <__divmodhi4_neg2>:
 286:	70 95       	com	r23
 288:	61 95       	neg	r22
 28a:	7f 4f       	sbci	r23, 0xFF	; 255

0000028c <__divmodhi4_exit>:
 28c:	08 95       	ret

0000028e <__divmodhi4_neg1>:
 28e:	f6 f7       	brtc	.-4      	; 0x28c <__divmodhi4_exit>
 290:	90 95       	com	r25
 292:	81 95       	neg	r24
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	08 95       	ret

00000298 <__udivmodhi4>:
 298:	aa 1b       	sub	r26, r26
 29a:	bb 1b       	sub	r27, r27
 29c:	51 e1       	ldi	r21, 0x11	; 17
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <__udivmodhi4_ep>

000002a0 <__udivmodhi4_loop>:
 2a0:	aa 1f       	adc	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	a6 17       	cp	r26, r22
 2a6:	b7 07       	cpc	r27, r23
 2a8:	10 f0       	brcs	.+4      	; 0x2ae <__udivmodhi4_ep>
 2aa:	a6 1b       	sub	r26, r22
 2ac:	b7 0b       	sbc	r27, r23

000002ae <__udivmodhi4_ep>:
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	5a 95       	dec	r21
 2b4:	a9 f7       	brne	.-22     	; 0x2a0 <__udivmodhi4_loop>
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	bc 01       	movw	r22, r24
 2bc:	cd 01       	movw	r24, r26
 2be:	08 95       	ret

000002c0 <do_rand>:
 2c0:	a0 e0       	ldi	r26, 0x00	; 0
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	e5 e6       	ldi	r30, 0x65	; 101
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	96 c0       	rjmp	.+300    	; 0x3f6 <__prologue_saves__+0x10>
 2ca:	ec 01       	movw	r28, r24
 2cc:	a8 80       	ld	r10, Y
 2ce:	b9 80       	ldd	r11, Y+1	; 0x01
 2d0:	ca 80       	ldd	r12, Y+2	; 0x02
 2d2:	db 80       	ldd	r13, Y+3	; 0x03
 2d4:	a1 14       	cp	r10, r1
 2d6:	b1 04       	cpc	r11, r1
 2d8:	c1 04       	cpc	r12, r1
 2da:	d1 04       	cpc	r13, r1
 2dc:	41 f4       	brne	.+16     	; 0x2ee <do_rand+0x2e>
 2de:	84 e2       	ldi	r24, 0x24	; 36
 2e0:	a8 2e       	mov	r10, r24
 2e2:	89 ed       	ldi	r24, 0xD9	; 217
 2e4:	b8 2e       	mov	r11, r24
 2e6:	8b e5       	ldi	r24, 0x5B	; 91
 2e8:	c8 2e       	mov	r12, r24
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	d8 2e       	mov	r13, r24
 2ee:	c6 01       	movw	r24, r12
 2f0:	b5 01       	movw	r22, r10
 2f2:	2d e1       	ldi	r18, 0x1D	; 29
 2f4:	33 ef       	ldi	r19, 0xF3	; 243
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	5a d0       	rcall	.+180    	; 0x3b0 <__divmodsi4>
 2fc:	27 ea       	ldi	r18, 0xA7	; 167
 2fe:	31 e4       	ldi	r19, 0x41	; 65
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	36 d0       	rcall	.+108    	; 0x372 <__mulsi3>
 306:	7b 01       	movw	r14, r22
 308:	8c 01       	movw	r16, r24
 30a:	c6 01       	movw	r24, r12
 30c:	b5 01       	movw	r22, r10
 30e:	2d e1       	ldi	r18, 0x1D	; 29
 310:	33 ef       	ldi	r19, 0xF3	; 243
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	4c d0       	rcall	.+152    	; 0x3b0 <__divmodsi4>
 318:	ca 01       	movw	r24, r20
 31a:	b9 01       	movw	r22, r18
 31c:	2c ee       	ldi	r18, 0xEC	; 236
 31e:	34 ef       	ldi	r19, 0xF4	; 244
 320:	4f ef       	ldi	r20, 0xFF	; 255
 322:	5f ef       	ldi	r21, 0xFF	; 255
 324:	26 d0       	rcall	.+76     	; 0x372 <__mulsi3>
 326:	6e 0d       	add	r22, r14
 328:	7f 1d       	adc	r23, r15
 32a:	80 1f       	adc	r24, r16
 32c:	91 1f       	adc	r25, r17
 32e:	97 ff       	sbrs	r25, 7
 330:	04 c0       	rjmp	.+8      	; 0x33a <do_rand+0x7a>
 332:	61 50       	subi	r22, 0x01	; 1
 334:	70 40       	sbci	r23, 0x00	; 0
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 48       	sbci	r25, 0x80	; 128
 33a:	68 83       	st	Y, r22
 33c:	79 83       	std	Y+1, r23	; 0x01
 33e:	8a 83       	std	Y+2, r24	; 0x02
 340:	9b 83       	std	Y+3, r25	; 0x03
 342:	9b 01       	movw	r18, r22
 344:	3f 77       	andi	r19, 0x7F	; 127
 346:	c9 01       	movw	r24, r18
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	ea e0       	ldi	r30, 0x0A	; 10
 34e:	6f c0       	rjmp	.+222    	; 0x42e <__epilogue_restores__+0x10>

00000350 <rand_r>:
 350:	b7 df       	rcall	.-146    	; 0x2c0 <do_rand>
 352:	08 95       	ret

00000354 <rand>:
 354:	89 e6       	ldi	r24, 0x69	; 105
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	b3 df       	rcall	.-154    	; 0x2c0 <do_rand>
 35a:	08 95       	ret

0000035c <srand>:
 35c:	a0 e0       	ldi	r26, 0x00	; 0
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	80 93 69 00 	sts	0x0069, r24
 364:	90 93 6a 00 	sts	0x006A, r25
 368:	a0 93 6b 00 	sts	0x006B, r26
 36c:	b0 93 6c 00 	sts	0x006C, r27
 370:	08 95       	ret

00000372 <__mulsi3>:
 372:	62 9f       	mul	r22, r18
 374:	d0 01       	movw	r26, r0
 376:	73 9f       	mul	r23, r19
 378:	f0 01       	movw	r30, r0
 37a:	82 9f       	mul	r24, r18
 37c:	e0 0d       	add	r30, r0
 37e:	f1 1d       	adc	r31, r1
 380:	64 9f       	mul	r22, r20
 382:	e0 0d       	add	r30, r0
 384:	f1 1d       	adc	r31, r1
 386:	92 9f       	mul	r25, r18
 388:	f0 0d       	add	r31, r0
 38a:	83 9f       	mul	r24, r19
 38c:	f0 0d       	add	r31, r0
 38e:	74 9f       	mul	r23, r20
 390:	f0 0d       	add	r31, r0
 392:	65 9f       	mul	r22, r21
 394:	f0 0d       	add	r31, r0
 396:	99 27       	eor	r25, r25
 398:	72 9f       	mul	r23, r18
 39a:	b0 0d       	add	r27, r0
 39c:	e1 1d       	adc	r30, r1
 39e:	f9 1f       	adc	r31, r25
 3a0:	63 9f       	mul	r22, r19
 3a2:	b0 0d       	add	r27, r0
 3a4:	e1 1d       	adc	r30, r1
 3a6:	f9 1f       	adc	r31, r25
 3a8:	bd 01       	movw	r22, r26
 3aa:	cf 01       	movw	r24, r30
 3ac:	11 24       	eor	r1, r1
 3ae:	08 95       	ret

000003b0 <__divmodsi4>:
 3b0:	97 fb       	bst	r25, 7
 3b2:	09 2e       	mov	r0, r25
 3b4:	05 26       	eor	r0, r21
 3b6:	0e d0       	rcall	.+28     	; 0x3d4 <__divmodsi4_neg1>
 3b8:	57 fd       	sbrc	r21, 7
 3ba:	04 d0       	rcall	.+8      	; 0x3c4 <__divmodsi4_neg2>
 3bc:	4b d0       	rcall	.+150    	; 0x454 <__udivmodsi4>
 3be:	0a d0       	rcall	.+20     	; 0x3d4 <__divmodsi4_neg1>
 3c0:	00 1c       	adc	r0, r0
 3c2:	38 f4       	brcc	.+14     	; 0x3d2 <__divmodsi4_exit>

000003c4 <__divmodsi4_neg2>:
 3c4:	50 95       	com	r21
 3c6:	40 95       	com	r20
 3c8:	30 95       	com	r19
 3ca:	21 95       	neg	r18
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	4f 4f       	sbci	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255

000003d2 <__divmodsi4_exit>:
 3d2:	08 95       	ret

000003d4 <__divmodsi4_neg1>:
 3d4:	f6 f7       	brtc	.-4      	; 0x3d2 <__divmodsi4_exit>
 3d6:	90 95       	com	r25
 3d8:	80 95       	com	r24
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	8f 4f       	sbci	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	08 95       	ret

000003e6 <__prologue_saves__>:
 3e6:	2f 92       	push	r2
 3e8:	3f 92       	push	r3
 3ea:	4f 92       	push	r4
 3ec:	5f 92       	push	r5
 3ee:	6f 92       	push	r6
 3f0:	7f 92       	push	r7
 3f2:	8f 92       	push	r8
 3f4:	9f 92       	push	r9
 3f6:	af 92       	push	r10
 3f8:	bf 92       	push	r11
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	ca 1b       	sub	r28, r26
 410:	db 0b       	sbc	r29, r27
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	09 94       	ijmp

0000041e <__epilogue_restores__>:
 41e:	2a 88       	ldd	r2, Y+18	; 0x12
 420:	39 88       	ldd	r3, Y+17	; 0x11
 422:	48 88       	ldd	r4, Y+16	; 0x10
 424:	5f 84       	ldd	r5, Y+15	; 0x0f
 426:	6e 84       	ldd	r6, Y+14	; 0x0e
 428:	7d 84       	ldd	r7, Y+13	; 0x0d
 42a:	8c 84       	ldd	r8, Y+12	; 0x0c
 42c:	9b 84       	ldd	r9, Y+11	; 0x0b
 42e:	aa 84       	ldd	r10, Y+10	; 0x0a
 430:	b9 84       	ldd	r11, Y+9	; 0x09
 432:	c8 84       	ldd	r12, Y+8	; 0x08
 434:	df 80       	ldd	r13, Y+7	; 0x07
 436:	ee 80       	ldd	r14, Y+6	; 0x06
 438:	fd 80       	ldd	r15, Y+5	; 0x05
 43a:	0c 81       	ldd	r16, Y+4	; 0x04
 43c:	1b 81       	ldd	r17, Y+3	; 0x03
 43e:	aa 81       	ldd	r26, Y+2	; 0x02
 440:	b9 81       	ldd	r27, Y+1	; 0x01
 442:	ce 0f       	add	r28, r30
 444:	d1 1d       	adc	r29, r1
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	ed 01       	movw	r28, r26
 452:	08 95       	ret

00000454 <__udivmodsi4>:
 454:	a1 e2       	ldi	r26, 0x21	; 33
 456:	1a 2e       	mov	r1, r26
 458:	aa 1b       	sub	r26, r26
 45a:	bb 1b       	sub	r27, r27
 45c:	fd 01       	movw	r30, r26
 45e:	0d c0       	rjmp	.+26     	; 0x47a <__udivmodsi4_ep>

00000460 <__udivmodsi4_loop>:
 460:	aa 1f       	adc	r26, r26
 462:	bb 1f       	adc	r27, r27
 464:	ee 1f       	adc	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	a2 17       	cp	r26, r18
 46a:	b3 07       	cpc	r27, r19
 46c:	e4 07       	cpc	r30, r20
 46e:	f5 07       	cpc	r31, r21
 470:	20 f0       	brcs	.+8      	; 0x47a <__udivmodsi4_ep>
 472:	a2 1b       	sub	r26, r18
 474:	b3 0b       	sbc	r27, r19
 476:	e4 0b       	sbc	r30, r20
 478:	f5 0b       	sbc	r31, r21

0000047a <__udivmodsi4_ep>:
 47a:	66 1f       	adc	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	1a 94       	dec	r1
 484:	69 f7       	brne	.-38     	; 0x460 <__udivmodsi4_loop>
 486:	60 95       	com	r22
 488:	70 95       	com	r23
 48a:	80 95       	com	r24
 48c:	90 95       	com	r25
 48e:	9b 01       	movw	r18, r22
 490:	ac 01       	movw	r20, r24
 492:	bd 01       	movw	r22, r26
 494:	cf 01       	movw	r24, r30
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
