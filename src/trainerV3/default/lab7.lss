
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000147a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000147a  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800178  00800178  00001626  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000525  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a67  00000000  00000000  00001dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001643  00000000  00000000  00004812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019dd  00000000  00000000  00005e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00007834  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000597  00000000  00000000  00007b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b7f  00000000  00000000  0000811b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00008c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
       c:	2a c0       	rjmp	.+84     	; 0x62 <__vector_6>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
      12:	67 c1       	rjmp	.+718    	; 0x2e2 <__vector_9>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	11 e0       	ldi	r17, 0x01	; 1
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	ea e7       	ldi	r30, 0x7A	; 122
      3e:	f4 e1       	ldi	r31, 0x14	; 20
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a8 37       	cpi	r26, 0x78	; 120
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a8 e7       	ldi	r26, 0x78	; 120
      50:	b1 e0       	ldi	r27, 0x01	; 1
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a0 3a       	cpi	r26, 0xA0	; 160
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	31 d0       	rcall	.+98     	; 0xc0 <main>
      5e:	0b ca       	rjmp	.-3050   	; 0xfffff476 <__eeprom_end+0xff7ef476>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <__vector_6>:
int sum_timer_ms = 0;

int results[K];

ISR (TIMER1_COMPA_vect)
{
      62:	1f 92       	push	r1
      64:	0f 92       	push	r0
      66:	0f b6       	in	r0, 0x3f	; 63
      68:	0f 92       	push	r0
      6a:	11 24       	eor	r1, r1
      6c:	8f 93       	push	r24
      6e:	9f 93       	push	r25
  timer_ms++;
      70:	80 91 7e 01 	lds	r24, 0x017E
      74:	90 91 7f 01 	lds	r25, 0x017F
      78:	01 96       	adiw	r24, 0x01	; 1
      7a:	90 93 7f 01 	sts	0x017F, r25
      7e:	80 93 7e 01 	sts	0x017E, r24
  timer_control++; // for debug
      82:	80 91 8e 01 	lds	r24, 0x018E
      86:	90 91 8f 01 	lds	r25, 0x018F
      8a:	01 96       	adiw	r24, 0x01	; 1
      8c:	90 93 8f 01 	sts	0x018F, r25
      90:	80 93 8e 01 	sts	0x018E, r24
  TCNT1=0; //clear ticks
      94:	1d bc       	out	0x2d, r1	; 45
      96:	1c bc       	out	0x2c, r1	; 44
}
      98:	9f 91       	pop	r25
      9a:	8f 91       	pop	r24
      9c:	0f 90       	pop	r0
      9e:	0f be       	out	0x3f, r0	; 63
      a0:	0f 90       	pop	r0
      a2:	1f 90       	pop	r1
      a4:	18 95       	reti

000000a6 <init_main>:
		display_flash_once();
	}
}

void init_main(void){
	timer1_init();
      a6:	ed d2       	rcall	.+1498   	; 0x682 <timer1_init>
	DDRA=0xF0;
      a8:	80 ef       	ldi	r24, 0xF0	; 240
      aa:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F; // resistors on buttons
      ac:	8f e0       	ldi	r24, 0x0F	; 15
      ae:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF; // PORTC - OUTPUT
      b0:	8f ef       	ldi	r24, 0xFF	; 255
      b2:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF; // PORTB - OUTPUT
      b4:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; // PORTD - OUTPUT
      b6:	81 bb       	out	0x11, r24	; 17
	display_init_timer0();
      b8:	60 d2       	rcall	.+1216   	; 0x57a <display_init_timer0>
	uart_init();
      ba:	6b d1       	rcall	.+726    	; 0x392 <uart_init>
	sei();
      bc:	78 94       	sei
}
      be:	08 95       	ret

000000c0 <main>:

int main(){
      c0:	9f 92       	push	r9
      c2:	af 92       	push	r10
      c4:	bf 92       	push	r11
      c6:	cf 92       	push	r12
      c8:	df 92       	push	r13
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
	init_main();
      d6:	e7 df       	rcall	.-50     	; 0xa6 <init_main>
	display_off();
      d8:	3a d2       	rcall	.+1140   	; 0x54e <display_off>
	led_line = leds_random_line();
      da:	7b d2       	rcall	.+1270   	; 0x5d2 <leds_random_line>
      dc:	80 93 7c 01 	sts	0x017C, r24
	display_set_bytes(0, 0, 0, 0);
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	ed d1       	rcall	.+986    	; 0x4c4 <display_set_bytes>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ea:	c4 e6       	ldi	r28, 0x64	; 100
      ec:	d0 e0       	ldi	r29, 0x00	; 0
			}			

			_delay_ms(delay_amount);	
		} else {
			if((key == 9) && (lock_reset == 0)){
				display_on = 1;
      ee:	99 24       	eor	r9, r9
      f0:	93 94       	inc	r9
	display_off();
	led_line = leds_random_line();
	display_set_bytes(0, 0, 0, 0);

	while(1){
		key = keyboard_get_state();
      f2:	1e d1       	rcall	.+572    	; 0x330 <keyboard_get_state>
      f4:	98 2f       	mov	r25, r24
      f6:	80 93 7b 01 	sts	0x017B, r24

		if(active == 1){
      fa:	80 91 7d 01 	lds	r24, 0x017D
      fe:	81 30       	cpi	r24, 0x01	; 1
     100:	09 f0       	breq	.+2      	; 0x104 <main+0x44>
     102:	bc c0       	rjmp	.+376    	; 0x27c <__stack+0x1d>
			leds_move_column();
     104:	40 d2       	rcall	.+1152   	; 0x586 <leds_move_column>
			leds_update();
     106:	58 d2       	rcall	.+1200   	; 0x5b8 <leds_update>

			if((key != 0) && (key <= 8)){
     108:	90 91 7b 01 	lds	r25, 0x017B
     10c:	89 2f       	mov	r24, r25
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	88 30       	cpi	r24, 0x08	; 8
     112:	a0 f5       	brcc	.+104    	; 0x17c <main+0xbc>
				if(key == led_line){
     114:	80 91 7c 01 	lds	r24, 0x017C
     118:	98 17       	cp	r25, r24
     11a:	69 f5       	brne	.+90     	; 0x176 <main+0xb6>
					timer_ms_buff = timer_ms; // not really necessary
     11c:	80 91 7e 01 	lds	r24, 0x017E
     120:	90 91 7f 01 	lds	r25, 0x017F
     124:	90 93 91 01 	sts	0x0191, r25
     128:	80 93 90 01 	sts	0x0190, r24
					display_set_int(timer_ms_buff);
     12c:	dc d1       	rcall	.+952    	; 0x4e6 <display_set_int>
					results[(int) tries_counter] = timer_ms_buff;
     12e:	20 91 80 01 	lds	r18, 0x0180
     132:	40 91 90 01 	lds	r20, 0x0190
     136:	50 91 91 01 	lds	r21, 0x0191
     13a:	e2 2f       	mov	r30, r18
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	ee 0f       	add	r30, r30
     140:	ff 1f       	adc	r31, r31
     142:	e8 57       	subi	r30, 0x78	; 120
     144:	fe 4f       	sbci	r31, 0xFE	; 254
     146:	51 83       	std	Z+1, r21	; 0x01
     148:	40 83       	st	Z, r20
					sum_timer_ms += timer_ms_buff;
     14a:	80 91 81 01 	lds	r24, 0x0181
     14e:	90 91 82 01 	lds	r25, 0x0182
     152:	84 0f       	add	r24, r20
     154:	95 1f       	adc	r25, r21
     156:	90 93 82 01 	sts	0x0182, r25
     15a:	80 93 81 01 	sts	0x0181, r24
					tries_counter++;
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	20 93 80 01 	sts	0x0180, r18
					timer_ms = 0;
     164:	10 92 7f 01 	sts	0x017F, r1
     168:	10 92 7e 01 	sts	0x017E, r1
					led_line = leds_random_line();
     16c:	32 d2       	rcall	.+1124   	; 0x5d2 <leds_random_line>
     16e:	80 93 7c 01 	sts	0x017C, r24
					leds_update(); // why necessary here?
     172:	22 d2       	rcall	.+1092   	; 0x5b8 <leds_update>
     174:	03 c0       	rjmp	.+6      	; 0x17c <main+0xbc>
				} else {
					buzzer_beep(BUZZER_DELAY);
     176:	82 e3       	ldi	r24, 0x32	; 50
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	33 d2       	rcall	.+1126   	; 0x5e2 <buzzer_beep>
				}
			} 

			if(key == 9){
     17c:	80 91 7b 01 	lds	r24, 0x017B
     180:	89 30       	cpi	r24, 0x09	; 9
     182:	91 f4       	brne	.+36     	; 0x1a8 <main+0xe8>
				display_on = 0;
     184:	10 92 7a 01 	sts	0x017A, r1
				display_off();
     188:	e2 d1       	rcall	.+964    	; 0x54e <display_off>
				active = 0;
     18a:	10 92 7d 01 	sts	0x017D, r1

				display_set_bytes(0, 0, 0, 0); // discard display buffer
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	96 d1       	rcall	.+812    	; 0x4c4 <display_set_bytes>
				leds_off();
     198:	1a d2       	rcall	.+1076   	; 0x5ce <leds_off>
     19a:	88 eb       	ldi	r24, 0xB8	; 184
     19c:	9b e0       	ldi	r25, 0x0B	; 11
     19e:	fe 01       	movw	r30, r28
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0xe0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a6:	d9 f7       	brne	.-10     	; 0x19e <main+0xde>
				_delay_ms(OTHER_KEYS_DELAY);
			} 

			if((key == 10) && (delay_amount > MIN_DELAY)){
     1a8:	80 91 7b 01 	lds	r24, 0x017B
     1ac:	8a 30       	cpi	r24, 0x0A	; 10
     1ae:	49 f4       	brne	.+18     	; 0x1c2 <main+0x102>
     1b0:	80 91 60 00 	lds	r24, 0x0060
     1b4:	90 91 61 00 	lds	r25, 0x0061
     1b8:	85 36       	cpi	r24, 0x65	; 101
     1ba:	91 05       	cpc	r25, r1
     1bc:	8c f0       	brlt	.+34     	; 0x1e0 <main+0x120>
				delay_amount -= DELAY_STEP;
     1be:	0a 97       	sbiw	r24, 0x0a	; 10
     1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <main+0x118>
			}

			if((key == 11) && (delay_amount < MAX_DELAY)){
     1c2:	8b 30       	cpi	r24, 0x0B	; 11
     1c4:	69 f4       	brne	.+26     	; 0x1e0 <main+0x120>
     1c6:	80 91 60 00 	lds	r24, 0x0060
     1ca:	90 91 61 00 	lds	r25, 0x0061
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	84 3f       	cpi	r24, 0xF4	; 244
     1d2:	92 07       	cpc	r25, r18
     1d4:	2c f4       	brge	.+10     	; 0x1e0 <main+0x120>
				delay_amount += DELAY_STEP;
     1d6:	0a 96       	adiw	r24, 0x0a	; 10
     1d8:	90 93 61 00 	sts	0x0061, r25
     1dc:	80 93 60 00 	sts	0x0060, r24
			}
			
			if(tries_counter == K){
     1e0:	80 91 80 01 	lds	r24, 0x0180
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	61 f4       	brne	.+24     	; 0x200 <main+0x140>
				display_set_int(sum_timer_ms / K);
     1e8:	80 91 81 01 	lds	r24, 0x0181
     1ec:	90 91 82 01 	lds	r25, 0x0182
     1f0:	63 e0       	ldi	r22, 0x03	; 3
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	2d d8       	rcall	.-4006   	; 0xfffff250 <__eeprom_end+0xff7ef250>
     1f6:	cb 01       	movw	r24, r22
     1f8:	76 d1       	rcall	.+748    	; 0x4e6 <display_set_int>
				leds_off();
     1fa:	e9 d1       	rcall	.+978    	; 0x5ce <leds_off>
				active = 0;
     1fc:	10 92 7d 01 	sts	0x017D, r1
			}			

			_delay_ms(delay_amount);	
     200:	60 91 60 00 	lds	r22, 0x0060
     204:	70 91 61 00 	lds	r23, 0x0061
     208:	88 27       	eor	r24, r24
     20a:	77 fd       	sbrc	r23, 7
     20c:	80 95       	com	r24
     20e:	98 2f       	mov	r25, r24
     210:	7f d5       	rcall	.+2814   	; 0xd10 <__floatsisf>
     212:	5b 01       	movw	r10, r22
     214:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4a e7       	ldi	r20, 0x7A	; 122
     21c:	54 e4       	ldi	r21, 0x44	; 68
     21e:	02 d4       	rcall	.+2052   	; 0xa24 <__mulsf3>
     220:	7b 01       	movw	r14, r22
     222:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e8       	ldi	r20, 0x80	; 128
     22a:	5f e3       	ldi	r21, 0x3F	; 63
     22c:	46 d5       	rcall	.+2700   	; 0xcba <__ltsf2>
     22e:	88 23       	and	r24, r24
     230:	1c f4       	brge	.+6      	; 0x238 <main+0x178>
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	1e c0       	rjmp	.+60     	; 0x274 <__stack+0x15>
		__ticks = 1;
	else if (__tmp > 65535)
     238:	c8 01       	movw	r24, r16
     23a:	b7 01       	movw	r22, r14
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	3f ef       	ldi	r19, 0xFF	; 255
     240:	4f e7       	ldi	r20, 0x7F	; 127
     242:	57 e4       	ldi	r21, 0x47	; 71
     244:	e4 d4       	rcall	.+2504   	; 0xc0e <__gtsf2>
     246:	18 16       	cp	r1, r24
     248:	94 f4       	brge	.+36     	; 0x26e <__stack+0xf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     24a:	c6 01       	movw	r24, r12
     24c:	b5 01       	movw	r22, r10
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	40 e2       	ldi	r20, 0x20	; 32
     254:	51 e4       	ldi	r21, 0x41	; 65
     256:	e6 d3       	rcall	.+1996   	; 0xa24 <__mulsf3>
     258:	21 d2       	rcall	.+1090   	; 0x69c <__fixunssfsi>
     25a:	05 c0       	rjmp	.+10     	; 0x266 <__stack+0x7>
     25c:	ce 01       	movw	r24, r28
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <main+0x19e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     262:	61 50       	subi	r22, 0x01	; 1
     264:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	c1 f7       	brne	.-16     	; 0x25c <main+0x19c>
     26c:	42 cf       	rjmp	.-380    	; 0xf2 <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     26e:	c8 01       	movw	r24, r16
     270:	b7 01       	movw	r22, r14
     272:	14 d2       	rcall	.+1064   	; 0x69c <__fixunssfsi>
     274:	cb 01       	movw	r24, r22
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <__stack+0x17>
     27a:	3b cf       	rjmp	.-394    	; 0xf2 <main+0x32>
		} else {
			if((key == 9) && (lock_reset == 0)){
     27c:	99 30       	cpi	r25, 0x09	; 9
     27e:	a9 f4       	brne	.+42     	; 0x2aa <__stack+0x4b>
     280:	80 91 79 01 	lds	r24, 0x0179
     284:	88 23       	and	r24, r24
     286:	89 f4       	brne	.+34     	; 0x2aa <__stack+0x4b>
				display_on = 1;
     288:	90 92 7a 01 	sts	0x017A, r9
				active = 1;
     28c:	90 92 7d 01 	sts	0x017D, r9

				tries_counter = 0;
     290:	10 92 80 01 	sts	0x0180, r1
				sum_timer_ms = 0;
     294:	10 92 82 01 	sts	0x0182, r1
     298:	10 92 81 01 	sts	0x0181, r1
				timer_ms = 0;
     29c:	10 92 7f 01 	sts	0x017F, r1
     2a0:	10 92 7e 01 	sts	0x017E, r1
				led_line = leds_random_line(); // refresh line after reset
     2a4:	96 d1       	rcall	.+812    	; 0x5d2 <leds_random_line>
     2a6:	80 93 7c 01 	sts	0x017C, r24
			} 

			if(key == 12){
     2aa:	80 91 7b 01 	lds	r24, 0x017B
     2ae:	8c 30       	cpi	r24, 0x0C	; 12
     2b0:	81 f4       	brne	.+32     	; 0x2d2 <__stack+0x73>
				if(tries_counter == K){
     2b2:	80 91 80 01 	lds	r24, 0x0180
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	61 f4       	brne	.+24     	; 0x2d2 <__stack+0x73>
					uart_send_data(results, K, sum_timer_ms / K);
     2ba:	80 91 81 01 	lds	r24, 0x0181
     2be:	90 91 82 01 	lds	r25, 0x0182
     2c2:	63 e0       	ldi	r22, 0x03	; 3
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	c4 d7       	rcall	.+3976   	; 0x1250 <__divmodhi4>
     2c8:	ab 01       	movw	r20, r22
     2ca:	88 e8       	ldi	r24, 0x88	; 136
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	63 e0       	ldi	r22, 0x03	; 3
     2d0:	ae d0       	rcall	.+348    	; 0x42e <uart_send_data>
     2d2:	88 eb       	ldi	r24, 0xB8	; 184
     2d4:	9b e0       	ldi	r25, 0x0B	; 11
     2d6:	fe 01       	movw	r30, r28
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <__stack+0x79>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2de:	d9 f7       	brne	.-10     	; 0x2d6 <__stack+0x77>
     2e0:	08 cf       	rjmp	.-496    	; 0xf2 <main+0x32>

000002e2 <__vector_9>:
  timer_ms++;
  timer_control++; // for debug
  TCNT1=0; //clear ticks
}

ISR (TIMER0_OVF_vect){
     2e2:	1f 92       	push	r1
     2e4:	0f 92       	push	r0
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	2f 93       	push	r18
     2ee:	3f 93       	push	r19
     2f0:	4f 93       	push	r20
     2f2:	5f 93       	push	r21
     2f4:	6f 93       	push	r22
     2f6:	7f 93       	push	r23
     2f8:	8f 93       	push	r24
     2fa:	9f 93       	push	r25
     2fc:	af 93       	push	r26
     2fe:	bf 93       	push	r27
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
	if(display_on == 1){
     304:	80 91 7a 01 	lds	r24, 0x017A
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	09 f4       	brne	.+2      	; 0x30e <__vector_9+0x2c>
		display_flash_once();
     30c:	24 d1       	rcall	.+584    	; 0x556 <display_flash_once>
	}
}
     30e:	ff 91       	pop	r31
     310:	ef 91       	pop	r30
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	7f 91       	pop	r23
     31c:	6f 91       	pop	r22
     31e:	5f 91       	pop	r21
     320:	4f 91       	pop	r20
     322:	3f 91       	pop	r19
     324:	2f 91       	pop	r18
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <keyboard_get_state>:
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     330:	10 92 83 01 	sts	0x0183, r1
     334:	40 91 84 01 	lds	r20, 0x0184
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	23 c0       	rjmp	.+70     	; 0x382 <keyboard_get_state+0x52>
    { 
       PORTA=portState[(int) i];
     33c:	e5 2f       	mov	r30, r21
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	ee 59       	subi	r30, 0x9E	; 158
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	80 81       	ld	r24, Z
     346:	8b bb       	out	0x1b, r24	; 27
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	18 c0       	rjmp	.+48     	; 0x37c <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[(int) j])==0))
     34c:	89 b3       	in	r24, 0x19	; 25
     34e:	24 2f       	mov	r18, r20
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	64 2f       	mov	r22, r20
     354:	6f 5f       	subi	r22, 0xFF	; 255
     356:	f9 01       	movw	r30, r18
     358:	ea 59       	subi	r30, 0x9A	; 154
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	90 81       	ld	r25, Z
     35e:	89 23       	and	r24, r25
     360:	61 f4       	brne	.+24     	; 0x37a <keyboard_get_state+0x4a>
     362:	40 93 84 01 	sts	0x0184, r20
     366:	50 93 83 01 	sts	0x0183, r21
          {
		  	return (j*4 + i + 1);
     36a:	85 2f       	mov	r24, r21
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	82 0f       	add	r24, r18
     378:	08 95       	ret
     37a:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[(int) i];
       for(j=0; j<4; j++)
     37c:	44 30       	cpi	r20, 0x04	; 4
     37e:	31 f7       	brne	.-52     	; 0x34c <keyboard_get_state+0x1c>
     380:	5f 5f       	subi	r21, 0xFF	; 255
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     382:	54 30       	cpi	r21, 0x04	; 4
     384:	d8 f2       	brcs	.-74     	; 0x33c <keyboard_get_state+0xc>
     386:	40 93 84 01 	sts	0x0184, r20
     38a:	50 93 83 01 	sts	0x0183, r21
     38e:	80 e0       	ldi	r24, 0x00	; 0
		  	return (j*4 + i + 1);
          }
       }                          
    }
	return 0;  
}
     390:	08 95       	ret

00000392 <uart_init>:
int divider;
char cnt;
char i;

void uart_init() {
    UBRRH = UBRRH_VALUE;
     392:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
     394:	89 e1       	ldi	r24, 0x19	; 25
     396:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= (1 << U2X);
#else
    UCSRA &= ~(1 << U2X);
     398:	59 98       	cbi	0x0b, 1	; 11
#endif

    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
     39a:	86 e0       	ldi	r24, 0x06	; 6
     39c:	80 bd       	out	0x20, r24	; 32
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
     39e:	88 e1       	ldi	r24, 0x18	; 24
     3a0:	8a b9       	out	0x0a, r24	; 10
}
     3a2:	08 95       	ret

000003a4 <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     3a4:	5d 9b       	sbis	0x0b, 5	; 11
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <uart_send_byte>
   UDR = c;
     3a8:	8c b9       	out	0x0c, r24	; 12
}
     3aa:	08 95       	ret

000003ac <uart_send_int>:

void uart_send_int(int data) {
     3ac:	fc 01       	movw	r30, r24
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	50 e0       	ldi	r21, 0x00	; 0
	divider = 1;
	while((divider * 10) < data){
     3b2:	9a 01       	movw	r18, r20
     3b4:	22 0f       	add	r18, r18
     3b6:	33 1f       	adc	r19, r19
     3b8:	ca 01       	movw	r24, r20
     3ba:	63 e0       	ldi	r22, 0x03	; 3
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	6a 95       	dec	r22
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <uart_send_int+0x10>
     3c4:	28 0f       	add	r18, r24
     3c6:	39 1f       	adc	r19, r25
     3c8:	2e 17       	cp	r18, r30
     3ca:	3f 07       	cpc	r19, r31
     3cc:	14 f4       	brge	.+4      	; 0x3d2 <uart_send_int+0x26>
     3ce:	a9 01       	movw	r20, r18
     3d0:	f0 cf       	rjmp	.-32     	; 0x3b2 <uart_send_int+0x6>
     3d2:	40 93 95 01 	sts	0x0195, r20
     3d6:	50 93 96 01 	sts	0x0196, r21
		divider *= 10;
	}
	if(divider < 1000){
     3da:	48 5e       	subi	r20, 0xE8	; 232
     3dc:	53 40       	sbci	r21, 0x03	; 3
     3de:	34 f4       	brge	.+12     	; 0x3ec <uart_send_int+0x40>
		divider = 1000;
     3e0:	88 ee       	ldi	r24, 0xE8	; 232
     3e2:	93 e0       	ldi	r25, 0x03	; 3
     3e4:	90 93 96 01 	sts	0x0196, r25
     3e8:	80 93 95 01 	sts	0x0195, r24
     3ec:	20 91 95 01 	lds	r18, 0x0195
     3f0:	30 91 96 01 	lds	r19, 0x0196
     3f4:	10 c0       	rjmp	.+32     	; 0x416 <uart_send_int+0x6a>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     3f6:	5d 9b       	sbis	0x0b, 5	; 11
     3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <uart_send_int+0x4a>
	}
	if(divider < 1000){
		divider = 1000;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
     3fa:	cf 01       	movw	r24, r30
     3fc:	b9 01       	movw	r22, r18
     3fe:	28 d7       	rcall	.+3664   	; 0x1250 <__divmodhi4>
     400:	cb 01       	movw	r24, r22
     402:	6a e0       	ldi	r22, 0x0A	; 10
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	24 d7       	rcall	.+3656   	; 0x1250 <__divmodhi4>
     408:	80 5d       	subi	r24, 0xD0	; 208
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     40a:	8c b9       	out	0x0c, r24	; 12
	if(divider < 1000){
		divider = 1000;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;
     40c:	c9 01       	movw	r24, r18
     40e:	6a e0       	ldi	r22, 0x0A	; 10
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	1e d7       	rcall	.+3644   	; 0x1250 <__divmodhi4>
     414:	9b 01       	movw	r18, r22
		divider *= 10;
	}
	if(divider < 1000){
		divider = 1000;
	}
	while(divider > 0){
     416:	12 16       	cp	r1, r18
     418:	13 06       	cpc	r1, r19
     41a:	6c f3       	brlt	.-38     	; 0x3f6 <uart_send_int+0x4a>
     41c:	30 93 96 01 	sts	0x0196, r19
     420:	20 93 95 01 	sts	0x0195, r18
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     424:	5d 9b       	sbis	0x0b, 5	; 11
     426:	fe cf       	rjmp	.-4      	; 0x424 <uart_send_int+0x78>
   UDR = c;
     428:	80 e2       	ldi	r24, 0x20	; 32
     42a:	8c b9       	out	0x0c, r24	; 12
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;
	}
	uart_send_byte(' ');
}
     42c:	08 95       	ret

0000042e <uart_send_data>:

void uart_send_data(int* res_array, char range, int average) {
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	ec 01       	movw	r28, r24
     43e:	f6 2e       	mov	r15, r22
     440:	8a 01       	movw	r16, r20
	for(i=0; i<range; i++){
     442:	10 92 83 01 	sts	0x0183, r1
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     446:	8a e3       	ldi	r24, 0x3A	; 58
     448:	d8 2e       	mov	r13, r24
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     44a:	ba e0       	ldi	r27, 0x0A	; 10
     44c:	eb 2e       	mov	r14, r27
     44e:	18 c0       	rjmp	.+48     	; 0x480 <uart_send_data+0x52>
     450:	5d 9b       	sbis	0x0b, 5	; 11
     452:	fe cf       	rjmp	.-4      	; 0x450 <uart_send_data+0x22>
	uart_send_byte(' ');
}

void uart_send_data(int* res_array, char range, int average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
     454:	ef 5c       	subi	r30, 0xCF	; 207
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     456:	ec b9       	out	0x0c, r30	; 12
     458:	e1 53       	subi	r30, 0x31	; 49
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     45a:	5d 9b       	sbis	0x0b, 5	; 11
     45c:	fe cf       	rjmp	.-4      	; 0x45a <uart_send_data+0x2c>
   UDR = c;
     45e:	dc b8       	out	0x0c, r13	; 12

void uart_send_data(int* res_array, char range, int average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
		uart_send_byte(':');
		uart_send_int(res_array[(int) i]);
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	ec 0f       	add	r30, r28
     468:	fd 1f       	adc	r31, r29
     46a:	80 81       	ld	r24, Z
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	9e df       	rcall	.-196    	; 0x3ac <uart_send_int>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     470:	5d 9b       	sbis	0x0b, 5	; 11
     472:	fe cf       	rjmp	.-4      	; 0x470 <uart_send_data+0x42>
   UDR = c;
     474:	ec b8       	out	0x0c, r14	; 12
	}
	uart_send_byte(' ');
}

void uart_send_data(int* res_array, char range, int average) {
	for(i=0; i<range; i++){
     476:	80 91 83 01 	lds	r24, 0x0183
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 83 01 	sts	0x0183, r24
     480:	e0 91 83 01 	lds	r30, 0x0183
     484:	ef 15       	cp	r30, r15
     486:	20 f3       	brcs	.-56     	; 0x450 <uart_send_data+0x22>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     488:	5d 9b       	sbis	0x0b, 5	; 11
     48a:	fe cf       	rjmp	.-4      	; 0x488 <uart_send_data+0x5a>
   UDR = c;
     48c:	81 e4       	ldi	r24, 0x41	; 65
     48e:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     490:	5d 9b       	sbis	0x0b, 5	; 11
     492:	fe cf       	rjmp	.-4      	; 0x490 <uart_send_data+0x62>
   UDR = c;
     494:	86 e5       	ldi	r24, 0x56	; 86
     496:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     498:	5d 9b       	sbis	0x0b, 5	; 11
     49a:	fe cf       	rjmp	.-4      	; 0x498 <uart_send_data+0x6a>
   UDR = c;
     49c:	87 e4       	ldi	r24, 0x47	; 71
     49e:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     4a0:	5d 9b       	sbis	0x0b, 5	; 11
     4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <uart_send_data+0x72>
   UDR = c;
     4a4:	8a e3       	ldi	r24, 0x3A	; 58
     4a6:	8c b9       	out	0x0c, r24	; 12
	}
	uart_send_byte('A');
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_int(average);
     4a8:	c8 01       	movw	r24, r16
     4aa:	80 df       	rcall	.-256    	; 0x3ac <uart_send_int>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     4ac:	5d 9b       	sbis	0x0b, 5	; 11
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <uart_send_data+0x7e>
   UDR = c;
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	8c b9       	out	0x0c, r24	; 12
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_int(average);
	uart_send_byte('\n');
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	08 95       	ret

000004c4 <display_set_bytes>:
char display_temp;
char display_pos = 0;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c[0] = ~0x1F | (0x0F & t1);
     4c4:	8f 70       	andi	r24, 0x0F	; 15
     4c6:	80 6e       	ori	r24, 0xE0	; 224
     4c8:	80 93 99 01 	sts	0x0199, r24
	c[1] = ~0x2F | (0x0F & t2);
     4cc:	6f 70       	andi	r22, 0x0F	; 15
     4ce:	60 6d       	ori	r22, 0xD0	; 208
     4d0:	60 93 9a 01 	sts	0x019A, r22
	c[2] = ~0x4F | (0x0F & t3);
     4d4:	4f 70       	andi	r20, 0x0F	; 15
     4d6:	40 6b       	ori	r20, 0xB0	; 176
     4d8:	40 93 9b 01 	sts	0x019B, r20
	c[3] = ~0x8F | (0x0F & t4);
     4dc:	2f 70       	andi	r18, 0x0F	; 15
     4de:	20 67       	ori	r18, 0x70	; 112
     4e0:	20 93 9c 01 	sts	0x019C, r18
}
     4e4:	08 95       	ret

000004e6 <display_set_int>:

void display_set_int(int target){
     4e6:	fc 01       	movw	r30, r24
	if(target < 10000){
     4e8:	87 e2       	ldi	r24, 0x27	; 39
     4ea:	e0 31       	cpi	r30, 0x10	; 16
     4ec:	f8 07       	cpc	r31, r24
     4ee:	4c f5       	brge	.+82     	; 0x542 <display_set_int+0x5c>
		d4 = target % 10;
     4f0:	cf 01       	movw	r24, r30
     4f2:	6a e0       	ldi	r22, 0x0A	; 10
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	ac d6       	rcall	.+3416   	; 0x1250 <__divmodhi4>
     4f8:	28 2f       	mov	r18, r24
     4fa:	80 93 9e 01 	sts	0x019E, r24
		d3 = (target / 10) % 10;
     4fe:	cf 01       	movw	r24, r30
     500:	6a e0       	ldi	r22, 0x0A	; 10
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	a5 d6       	rcall	.+3402   	; 0x1250 <__divmodhi4>
     506:	cb 01       	movw	r24, r22
     508:	6a e0       	ldi	r22, 0x0A	; 10
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	a1 d6       	rcall	.+3394   	; 0x1250 <__divmodhi4>
     50e:	48 2f       	mov	r20, r24
     510:	80 93 9f 01 	sts	0x019F, r24
		d2 = (target / 100) % 10;
     514:	cf 01       	movw	r24, r30
     516:	64 e6       	ldi	r22, 0x64	; 100
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	9a d6       	rcall	.+3380   	; 0x1250 <__divmodhi4>
     51c:	cb 01       	movw	r24, r22
     51e:	6a e0       	ldi	r22, 0x0A	; 10
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	96 d6       	rcall	.+3372   	; 0x1250 <__divmodhi4>
     524:	38 2f       	mov	r19, r24
     526:	80 93 9d 01 	sts	0x019D, r24
		d1 = (target / 1000) % 10;
     52a:	cf 01       	movw	r24, r30
     52c:	68 ee       	ldi	r22, 0xE8	; 232
     52e:	73 e0       	ldi	r23, 0x03	; 3
     530:	8f d6       	rcall	.+3358   	; 0x1250 <__divmodhi4>
     532:	cb 01       	movw	r24, r22
     534:	6a e0       	ldi	r22, 0x0A	; 10
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	8b d6       	rcall	.+3350   	; 0x1250 <__divmodhi4>
     53a:	80 93 97 01 	sts	0x0197, r24
		display_set_bytes(d1, d2, d3, d4);
     53e:	63 2f       	mov	r22, r19
     540:	04 c0       	rjmp	.+8      	; 0x54a <display_set_int+0x64>
	} else {
		display_set_bytes(0x0E, 0x0E, 0x0E, 0x0E);
     542:	8e e0       	ldi	r24, 0x0E	; 14
     544:	6e e0       	ldi	r22, 0x0E	; 14
     546:	4e e0       	ldi	r20, 0x0E	; 14
     548:	2e e0       	ldi	r18, 0x0E	; 14
     54a:	bc df       	rcall	.-136    	; 0x4c4 <display_set_bytes>
     54c:	08 95       	ret

0000054e <display_off>:
	}
}

void display_off(){
	PORTB |= 0xFF;
     54e:	88 b3       	in	r24, 0x18	; 24
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	88 bb       	out	0x18, r24	; 24
}
     554:	08 95       	ret

00000556 <display_flash_once>:

void display_flash_once(){
	display_pos++;
     556:	80 91 85 01 	lds	r24, 0x0185
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	80 93 85 01 	sts	0x0185, r24
	if(display_pos > 3){
     560:	84 30       	cpi	r24, 0x04	; 4
     562:	18 f0       	brcs	.+6      	; 0x56a <display_flash_once+0x14>
		display_pos = display_pos % 4;
     564:	83 70       	andi	r24, 0x03	; 3
     566:	80 93 85 01 	sts	0x0185, r24
	}
	PORTB = c[(int) display_pos];
     56a:	e0 91 85 01 	lds	r30, 0x0185
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e7 56       	subi	r30, 0x67	; 103
     572:	fe 4f       	sbci	r31, 0xFE	; 254
     574:	80 81       	ld	r24, Z
     576:	88 bb       	out	0x18, r24	; 24
}
     578:	08 95       	ret

0000057a <display_init_timer0>:

void display_init_timer0(){
	//TCCR0 = (1<<CS01) | (1 << CS00); // K = 64
	TCCR0 = (1<<CS01); // K = 8
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // allow interrupt
     57e:	89 b7       	in	r24, 0x39	; 57
     580:	81 60       	ori	r24, 0x01	; 1
     582:	89 bf       	out	0x39, r24	; 57
}
     584:	08 95       	ret

00000586 <leds_move_column>:
	line = rand() % 8;
	return (line + 1);
}

void leds_move_column(){
	if(direction == 1){
     586:	80 91 6a 00 	lds	r24, 0x006A
     58a:	90 91 87 01 	lds	r25, 0x0187
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	39 f4       	brne	.+14     	; 0x5a0 <leds_move_column+0x1a>
		if(column < 3){
     592:	93 30       	cpi	r25, 0x03	; 3
     594:	10 f4       	brcc	.+4      	; 0x59a <leds_move_column+0x14>
			column++;
     596:	9f 5f       	subi	r25, 0xFF	; 255
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <leds_move_column+0x20>
		} else {
			direction = 0;
     59a:	10 92 6a 00 	sts	0x006A, r1
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
     5a0:	99 23       	and	r25, r25
     5a2:	21 f0       	breq	.+8      	; 0x5ac <leds_move_column+0x26>
			column--;
     5a4:	91 50       	subi	r25, 0x01	; 1
     5a6:	90 93 87 01 	sts	0x0187, r25
     5aa:	08 95       	ret
		} else {
			direction = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 6a 00 	sts	0x006A, r24
			column++;
     5b2:	80 93 87 01 	sts	0x0187, r24
     5b6:	08 95       	ret

000005b8 <leds_update>:
		}
	}
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
     5b8:	90 91 86 01 	lds	r25, 0x0186
     5bc:	90 68       	ori	r25, 0x80	; 128
     5be:	80 91 87 01 	lds	r24, 0x0187
     5c2:	88 0f       	add	r24, r24
     5c4:	88 0f       	add	r24, r24
     5c6:	88 0f       	add	r24, r24
     5c8:	89 2b       	or	r24, r25
     5ca:	85 bb       	out	0x15, r24	; 21
}
     5cc:	08 95       	ret

000005ce <leds_off>:

void leds_off(){
	PORTC &= 0x7F;
     5ce:	af 98       	cbi	0x15, 7	; 21
}
     5d0:	08 95       	ret

000005d2 <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 8;
     5d2:	e6 d6       	rcall	.+3532   	; 0x13a0 <rand>
     5d4:	68 e0       	ldi	r22, 0x08	; 8
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	3b d6       	rcall	.+3190   	; 0x1250 <__divmodhi4>
     5da:	80 93 86 01 	sts	0x0186, r24
	return (line + 1);
}
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	08 95       	ret

000005e2 <buzzer_beep>:
#include <avr/io.h>
#include <util/delay.h>

void buzzer_beep(int time_amount_ms){
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
	PORTD |= 0x80;
     5f2:	97 9a       	sbi	0x12, 7	; 18
	_delay_ms(time_amount_ms);
     5f4:	aa 27       	eor	r26, r26
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	a0 95       	com	r26
     5fa:	ba 2f       	mov	r27, r26
     5fc:	bc 01       	movw	r22, r24
     5fe:	cd 01       	movw	r24, r26
     600:	87 d3       	rcall	.+1806   	; 0xd10 <__floatsisf>
     602:	5b 01       	movw	r10, r22
     604:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	4a e7       	ldi	r20, 0x7A	; 122
     60c:	54 e4       	ldi	r21, 0x44	; 68
     60e:	0a d2       	rcall	.+1044   	; 0xa24 <__mulsf3>
     610:	7b 01       	movw	r14, r22
     612:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e8       	ldi	r20, 0x80	; 128
     61a:	5f e3       	ldi	r21, 0x3F	; 63
     61c:	4e d3       	rcall	.+1692   	; 0xcba <__ltsf2>
     61e:	88 23       	and	r24, r24
     620:	1c f4       	brge	.+6      	; 0x628 <buzzer_beep+0x46>
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	20 c0       	rjmp	.+64     	; 0x668 <buzzer_beep+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     628:	c8 01       	movw	r24, r16
     62a:	b7 01       	movw	r22, r14
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	3f ef       	ldi	r19, 0xFF	; 255
     630:	4f e7       	ldi	r20, 0x7F	; 127
     632:	57 e4       	ldi	r21, 0x47	; 71
     634:	ec d2       	rcall	.+1496   	; 0xc0e <__gtsf2>
     636:	18 16       	cp	r1, r24
     638:	a4 f4       	brge	.+40     	; 0x662 <buzzer_beep+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63a:	c6 01       	movw	r24, r12
     63c:	b5 01       	movw	r22, r10
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e2       	ldi	r20, 0x20	; 32
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	ee d1       	rcall	.+988    	; 0xa24 <__mulsf3>
     648:	29 d0       	rcall	.+82     	; 0x69c <__fixunssfsi>
     64a:	84 e6       	ldi	r24, 0x64	; 100
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	05 c0       	rjmp	.+10     	; 0x65a <buzzer_beep+0x78>
     650:	fc 01       	movw	r30, r24
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <buzzer_beep+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     656:	61 50       	subi	r22, 0x01	; 1
     658:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65a:	61 15       	cp	r22, r1
     65c:	71 05       	cpc	r23, r1
     65e:	c1 f7       	brne	.-16     	; 0x650 <buzzer_beep+0x6e>
     660:	06 c0       	rjmp	.+12     	; 0x66e <buzzer_beep+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     662:	c8 01       	movw	r24, r16
     664:	b7 01       	movw	r22, r14
     666:	1a d0       	rcall	.+52     	; 0x69c <__fixunssfsi>
     668:	cb 01       	movw	r24, r22
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <buzzer_beep+0x88>
	PORTD &= 0x7F;
     66e:	97 98       	cbi	0x12, 7	; 18
}
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	bf 90       	pop	r11
     67e:	af 90       	pop	r10
     680:	08 95       	ret

00000682 <timer1_init>:
#include <avr/io.h>

void timer1_init(){
	TCNT1=0x00; // ticks
     682:	1d bc       	out	0x2d, r1	; 45
     684:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS10); // K = 0
     686:	8e b5       	in	r24, 0x2e	; 46
     688:	81 60       	ori	r24, 0x01	; 1
     68a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (unsigned int) (F_CPU / 1000); // compare num
     68c:	80 ea       	ldi	r24, 0xA0	; 160
     68e:	9f e0       	ldi	r25, 0x0F	; 15
     690:	9b bd       	out	0x2b, r25	; 43
     692:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A); // launch timer	
     694:	89 b7       	in	r24, 0x39	; 57
     696:	80 61       	ori	r24, 0x10	; 16
     698:	89 bf       	out	0x39, r24	; 57
}
     69a:	08 95       	ret

0000069c <__fixunssfsi>:
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	7b 01       	movw	r14, r22
     6a6:	8c 01       	movw	r16, r24
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	5f e4       	ldi	r21, 0x4F	; 79
     6b0:	d9 d2       	rcall	.+1458   	; 0xc64 <__gesf2>
     6b2:	88 23       	and	r24, r24
     6b4:	7c f0       	brlt	.+30     	; 0x6d4 <__fixunssfsi+0x38>
     6b6:	c8 01       	movw	r24, r16
     6b8:	b7 01       	movw	r22, r14
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	5f e4       	ldi	r21, 0x4F	; 79
     6c2:	5e d1       	rcall	.+700    	; 0x980 <__subsf3>
     6c4:	7f d3       	rcall	.+1790   	; 0xdc4 <__fixsfsi>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	20 50       	subi	r18, 0x00	; 0
     6cc:	30 40       	sbci	r19, 0x00	; 0
     6ce:	40 40       	sbci	r20, 0x00	; 0
     6d0:	50 48       	sbci	r21, 0x80	; 128
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <__fixunssfsi+0x42>
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	75 d3       	rcall	.+1770   	; 0xdc4 <__fixsfsi>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	b9 01       	movw	r22, r18
     6e0:	ca 01       	movw	r24, r20
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	08 95       	ret

000006ec <_fpadd_parts>:
     6ec:	a0 e0       	ldi	r26, 0x00	; 0
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	eb e7       	ldi	r30, 0x7B	; 123
     6f2:	f3 e0       	ldi	r31, 0x03	; 3
     6f4:	d4 c5       	rjmp	.+2984   	; 0x129e <__prologue_saves__>
     6f6:	dc 01       	movw	r26, r24
     6f8:	2b 01       	movw	r4, r22
     6fa:	fa 01       	movw	r30, r20
     6fc:	9c 91       	ld	r25, X
     6fe:	92 30       	cpi	r25, 0x02	; 2
     700:	08 f4       	brcc	.+2      	; 0x704 <_fpadd_parts+0x18>
     702:	39 c1       	rjmp	.+626    	; 0x976 <_fpadd_parts+0x28a>
     704:	eb 01       	movw	r28, r22
     706:	88 81       	ld	r24, Y
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	08 f4       	brcc	.+2      	; 0x70e <_fpadd_parts+0x22>
     70c:	33 c1       	rjmp	.+614    	; 0x974 <_fpadd_parts+0x288>
     70e:	94 30       	cpi	r25, 0x04	; 4
     710:	69 f4       	brne	.+26     	; 0x72c <_fpadd_parts+0x40>
     712:	84 30       	cpi	r24, 0x04	; 4
     714:	09 f0       	breq	.+2      	; 0x718 <_fpadd_parts+0x2c>
     716:	2f c1       	rjmp	.+606    	; 0x976 <_fpadd_parts+0x28a>
     718:	11 96       	adiw	r26, 0x01	; 1
     71a:	9c 91       	ld	r25, X
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	98 17       	cp	r25, r24
     722:	09 f4       	brne	.+2      	; 0x726 <_fpadd_parts+0x3a>
     724:	28 c1       	rjmp	.+592    	; 0x976 <_fpadd_parts+0x28a>
     726:	ab e6       	ldi	r26, 0x6B	; 107
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	25 c1       	rjmp	.+586    	; 0x976 <_fpadd_parts+0x28a>
     72c:	84 30       	cpi	r24, 0x04	; 4
     72e:	09 f4       	brne	.+2      	; 0x732 <_fpadd_parts+0x46>
     730:	21 c1       	rjmp	.+578    	; 0x974 <_fpadd_parts+0x288>
     732:	82 30       	cpi	r24, 0x02	; 2
     734:	a9 f4       	brne	.+42     	; 0x760 <_fpadd_parts+0x74>
     736:	92 30       	cpi	r25, 0x02	; 2
     738:	09 f0       	breq	.+2      	; 0x73c <_fpadd_parts+0x50>
     73a:	1d c1       	rjmp	.+570    	; 0x976 <_fpadd_parts+0x28a>
     73c:	9a 01       	movw	r18, r20
     73e:	ad 01       	movw	r20, r26
     740:	88 e0       	ldi	r24, 0x08	; 8
     742:	ea 01       	movw	r28, r20
     744:	09 90       	ld	r0, Y+
     746:	ae 01       	movw	r20, r28
     748:	e9 01       	movw	r28, r18
     74a:	09 92       	st	Y+, r0
     74c:	9e 01       	movw	r18, r28
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	c1 f7       	brne	.-16     	; 0x742 <_fpadd_parts+0x56>
     752:	e2 01       	movw	r28, r4
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	11 96       	adiw	r26, 0x01	; 1
     758:	9c 91       	ld	r25, X
     75a:	89 23       	and	r24, r25
     75c:	81 83       	std	Z+1, r24	; 0x01
     75e:	08 c1       	rjmp	.+528    	; 0x970 <_fpadd_parts+0x284>
     760:	92 30       	cpi	r25, 0x02	; 2
     762:	09 f4       	brne	.+2      	; 0x766 <_fpadd_parts+0x7a>
     764:	07 c1       	rjmp	.+526    	; 0x974 <_fpadd_parts+0x288>
     766:	12 96       	adiw	r26, 0x02	; 2
     768:	2d 90       	ld	r2, X+
     76a:	3c 90       	ld	r3, X
     76c:	13 97       	sbiw	r26, 0x03	; 3
     76e:	eb 01       	movw	r28, r22
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	9b 81       	ldd	r25, Y+3	; 0x03
     774:	14 96       	adiw	r26, 0x04	; 4
     776:	ad 90       	ld	r10, X+
     778:	bd 90       	ld	r11, X+
     77a:	cd 90       	ld	r12, X+
     77c:	dc 90       	ld	r13, X
     77e:	17 97       	sbiw	r26, 0x07	; 7
     780:	ec 80       	ldd	r14, Y+4	; 0x04
     782:	fd 80       	ldd	r15, Y+5	; 0x05
     784:	0e 81       	ldd	r16, Y+6	; 0x06
     786:	1f 81       	ldd	r17, Y+7	; 0x07
     788:	91 01       	movw	r18, r2
     78a:	28 1b       	sub	r18, r24
     78c:	39 0b       	sbc	r19, r25
     78e:	b9 01       	movw	r22, r18
     790:	37 ff       	sbrs	r19, 7
     792:	04 c0       	rjmp	.+8      	; 0x79c <_fpadd_parts+0xb0>
     794:	66 27       	eor	r22, r22
     796:	77 27       	eor	r23, r23
     798:	62 1b       	sub	r22, r18
     79a:	73 0b       	sbc	r23, r19
     79c:	60 32       	cpi	r22, 0x20	; 32
     79e:	71 05       	cpc	r23, r1
     7a0:	0c f0       	brlt	.+2      	; 0x7a4 <_fpadd_parts+0xb8>
     7a2:	61 c0       	rjmp	.+194    	; 0x866 <_fpadd_parts+0x17a>
     7a4:	12 16       	cp	r1, r18
     7a6:	13 06       	cpc	r1, r19
     7a8:	6c f5       	brge	.+90     	; 0x804 <_fpadd_parts+0x118>
     7aa:	37 01       	movw	r6, r14
     7ac:	48 01       	movw	r8, r16
     7ae:	06 2e       	mov	r0, r22
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <_fpadd_parts+0xce>
     7b2:	96 94       	lsr	r9
     7b4:	87 94       	ror	r8
     7b6:	77 94       	ror	r7
     7b8:	67 94       	ror	r6
     7ba:	0a 94       	dec	r0
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <_fpadd_parts+0xc6>
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <_fpadd_parts+0xe4>
     7c8:	22 0f       	add	r18, r18
     7ca:	33 1f       	adc	r19, r19
     7cc:	44 1f       	adc	r20, r20
     7ce:	55 1f       	adc	r21, r21
     7d0:	6a 95       	dec	r22
     7d2:	d2 f7       	brpl	.-12     	; 0x7c8 <_fpadd_parts+0xdc>
     7d4:	21 50       	subi	r18, 0x01	; 1
     7d6:	30 40       	sbci	r19, 0x00	; 0
     7d8:	40 40       	sbci	r20, 0x00	; 0
     7da:	50 40       	sbci	r21, 0x00	; 0
     7dc:	2e 21       	and	r18, r14
     7de:	3f 21       	and	r19, r15
     7e0:	40 23       	and	r20, r16
     7e2:	51 23       	and	r21, r17
     7e4:	21 15       	cp	r18, r1
     7e6:	31 05       	cpc	r19, r1
     7e8:	41 05       	cpc	r20, r1
     7ea:	51 05       	cpc	r21, r1
     7ec:	21 f0       	breq	.+8      	; 0x7f6 <_fpadd_parts+0x10a>
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	79 01       	movw	r14, r18
     7f8:	8a 01       	movw	r16, r20
     7fa:	e6 28       	or	r14, r6
     7fc:	f7 28       	or	r15, r7
     7fe:	08 29       	or	r16, r8
     800:	19 29       	or	r17, r9
     802:	3c c0       	rjmp	.+120    	; 0x87c <_fpadd_parts+0x190>
     804:	23 2b       	or	r18, r19
     806:	d1 f1       	breq	.+116    	; 0x87c <_fpadd_parts+0x190>
     808:	26 0e       	add	r2, r22
     80a:	37 1e       	adc	r3, r23
     80c:	35 01       	movw	r6, r10
     80e:	46 01       	movw	r8, r12
     810:	06 2e       	mov	r0, r22
     812:	04 c0       	rjmp	.+8      	; 0x81c <_fpadd_parts+0x130>
     814:	96 94       	lsr	r9
     816:	87 94       	ror	r8
     818:	77 94       	ror	r7
     81a:	67 94       	ror	r6
     81c:	0a 94       	dec	r0
     81e:	d2 f7       	brpl	.-12     	; 0x814 <_fpadd_parts+0x128>
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	04 c0       	rjmp	.+8      	; 0x832 <_fpadd_parts+0x146>
     82a:	22 0f       	add	r18, r18
     82c:	33 1f       	adc	r19, r19
     82e:	44 1f       	adc	r20, r20
     830:	55 1f       	adc	r21, r21
     832:	6a 95       	dec	r22
     834:	d2 f7       	brpl	.-12     	; 0x82a <_fpadd_parts+0x13e>
     836:	21 50       	subi	r18, 0x01	; 1
     838:	30 40       	sbci	r19, 0x00	; 0
     83a:	40 40       	sbci	r20, 0x00	; 0
     83c:	50 40       	sbci	r21, 0x00	; 0
     83e:	2a 21       	and	r18, r10
     840:	3b 21       	and	r19, r11
     842:	4c 21       	and	r20, r12
     844:	5d 21       	and	r21, r13
     846:	21 15       	cp	r18, r1
     848:	31 05       	cpc	r19, r1
     84a:	41 05       	cpc	r20, r1
     84c:	51 05       	cpc	r21, r1
     84e:	21 f0       	breq	.+8      	; 0x858 <_fpadd_parts+0x16c>
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	59 01       	movw	r10, r18
     85a:	6a 01       	movw	r12, r20
     85c:	a6 28       	or	r10, r6
     85e:	b7 28       	or	r11, r7
     860:	c8 28       	or	r12, r8
     862:	d9 28       	or	r13, r9
     864:	0b c0       	rjmp	.+22     	; 0x87c <_fpadd_parts+0x190>
     866:	82 15       	cp	r24, r2
     868:	93 05       	cpc	r25, r3
     86a:	2c f0       	brlt	.+10     	; 0x876 <_fpadd_parts+0x18a>
     86c:	1c 01       	movw	r2, r24
     86e:	aa 24       	eor	r10, r10
     870:	bb 24       	eor	r11, r11
     872:	65 01       	movw	r12, r10
     874:	03 c0       	rjmp	.+6      	; 0x87c <_fpadd_parts+0x190>
     876:	ee 24       	eor	r14, r14
     878:	ff 24       	eor	r15, r15
     87a:	87 01       	movw	r16, r14
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	9c 91       	ld	r25, X
     880:	d2 01       	movw	r26, r4
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	8c 91       	ld	r24, X
     886:	98 17       	cp	r25, r24
     888:	09 f4       	brne	.+2      	; 0x88c <_fpadd_parts+0x1a0>
     88a:	45 c0       	rjmp	.+138    	; 0x916 <_fpadd_parts+0x22a>
     88c:	99 23       	and	r25, r25
     88e:	39 f0       	breq	.+14     	; 0x89e <_fpadd_parts+0x1b2>
     890:	a8 01       	movw	r20, r16
     892:	97 01       	movw	r18, r14
     894:	2a 19       	sub	r18, r10
     896:	3b 09       	sbc	r19, r11
     898:	4c 09       	sbc	r20, r12
     89a:	5d 09       	sbc	r21, r13
     89c:	06 c0       	rjmp	.+12     	; 0x8aa <_fpadd_parts+0x1be>
     89e:	a6 01       	movw	r20, r12
     8a0:	95 01       	movw	r18, r10
     8a2:	2e 19       	sub	r18, r14
     8a4:	3f 09       	sbc	r19, r15
     8a6:	40 0b       	sbc	r20, r16
     8a8:	51 0b       	sbc	r21, r17
     8aa:	57 fd       	sbrc	r21, 7
     8ac:	08 c0       	rjmp	.+16     	; 0x8be <_fpadd_parts+0x1d2>
     8ae:	11 82       	std	Z+1, r1	; 0x01
     8b0:	33 82       	std	Z+3, r3	; 0x03
     8b2:	22 82       	std	Z+2, r2	; 0x02
     8b4:	24 83       	std	Z+4, r18	; 0x04
     8b6:	35 83       	std	Z+5, r19	; 0x05
     8b8:	46 83       	std	Z+6, r20	; 0x06
     8ba:	57 83       	std	Z+7, r21	; 0x07
     8bc:	1d c0       	rjmp	.+58     	; 0x8f8 <_fpadd_parts+0x20c>
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	81 83       	std	Z+1, r24	; 0x01
     8c2:	33 82       	std	Z+3, r3	; 0x03
     8c4:	22 82       	std	Z+2, r2	; 0x02
     8c6:	88 27       	eor	r24, r24
     8c8:	99 27       	eor	r25, r25
     8ca:	dc 01       	movw	r26, r24
     8cc:	82 1b       	sub	r24, r18
     8ce:	93 0b       	sbc	r25, r19
     8d0:	a4 0b       	sbc	r26, r20
     8d2:	b5 0b       	sbc	r27, r21
     8d4:	84 83       	std	Z+4, r24	; 0x04
     8d6:	95 83       	std	Z+5, r25	; 0x05
     8d8:	a6 83       	std	Z+6, r26	; 0x06
     8da:	b7 83       	std	Z+7, r27	; 0x07
     8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <_fpadd_parts+0x20c>
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	44 1f       	adc	r20, r20
     8e4:	55 1f       	adc	r21, r21
     8e6:	24 83       	std	Z+4, r18	; 0x04
     8e8:	35 83       	std	Z+5, r19	; 0x05
     8ea:	46 83       	std	Z+6, r20	; 0x06
     8ec:	57 83       	std	Z+7, r21	; 0x07
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	93 81       	ldd	r25, Z+3	; 0x03
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	93 83       	std	Z+3, r25	; 0x03
     8f6:	82 83       	std	Z+2, r24	; 0x02
     8f8:	24 81       	ldd	r18, Z+4	; 0x04
     8fa:	35 81       	ldd	r19, Z+5	; 0x05
     8fc:	46 81       	ldd	r20, Z+6	; 0x06
     8fe:	57 81       	ldd	r21, Z+7	; 0x07
     900:	da 01       	movw	r26, r20
     902:	c9 01       	movw	r24, r18
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	a1 09       	sbc	r26, r1
     908:	b1 09       	sbc	r27, r1
     90a:	8f 5f       	subi	r24, 0xFF	; 255
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	af 4f       	sbci	r26, 0xFF	; 255
     910:	bf 43       	sbci	r27, 0x3F	; 63
     912:	28 f3       	brcs	.-54     	; 0x8de <_fpadd_parts+0x1f2>
     914:	0b c0       	rjmp	.+22     	; 0x92c <_fpadd_parts+0x240>
     916:	91 83       	std	Z+1, r25	; 0x01
     918:	33 82       	std	Z+3, r3	; 0x03
     91a:	22 82       	std	Z+2, r2	; 0x02
     91c:	ea 0c       	add	r14, r10
     91e:	fb 1c       	adc	r15, r11
     920:	0c 1d       	adc	r16, r12
     922:	1d 1d       	adc	r17, r13
     924:	e4 82       	std	Z+4, r14	; 0x04
     926:	f5 82       	std	Z+5, r15	; 0x05
     928:	06 83       	std	Z+6, r16	; 0x06
     92a:	17 83       	std	Z+7, r17	; 0x07
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	80 83       	st	Z, r24
     930:	24 81       	ldd	r18, Z+4	; 0x04
     932:	35 81       	ldd	r19, Z+5	; 0x05
     934:	46 81       	ldd	r20, Z+6	; 0x06
     936:	57 81       	ldd	r21, Z+7	; 0x07
     938:	57 ff       	sbrs	r21, 7
     93a:	1a c0       	rjmp	.+52     	; 0x970 <_fpadd_parts+0x284>
     93c:	c9 01       	movw	r24, r18
     93e:	aa 27       	eor	r26, r26
     940:	97 fd       	sbrc	r25, 7
     942:	a0 95       	com	r26
     944:	ba 2f       	mov	r27, r26
     946:	81 70       	andi	r24, 0x01	; 1
     948:	90 70       	andi	r25, 0x00	; 0
     94a:	a0 70       	andi	r26, 0x00	; 0
     94c:	b0 70       	andi	r27, 0x00	; 0
     94e:	56 95       	lsr	r21
     950:	47 95       	ror	r20
     952:	37 95       	ror	r19
     954:	27 95       	ror	r18
     956:	82 2b       	or	r24, r18
     958:	93 2b       	or	r25, r19
     95a:	a4 2b       	or	r26, r20
     95c:	b5 2b       	or	r27, r21
     95e:	84 83       	std	Z+4, r24	; 0x04
     960:	95 83       	std	Z+5, r25	; 0x05
     962:	a6 83       	std	Z+6, r26	; 0x06
     964:	b7 83       	std	Z+7, r27	; 0x07
     966:	82 81       	ldd	r24, Z+2	; 0x02
     968:	93 81       	ldd	r25, Z+3	; 0x03
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	93 83       	std	Z+3, r25	; 0x03
     96e:	82 83       	std	Z+2, r24	; 0x02
     970:	df 01       	movw	r26, r30
     972:	01 c0       	rjmp	.+2      	; 0x976 <_fpadd_parts+0x28a>
     974:	d2 01       	movw	r26, r4
     976:	cd 01       	movw	r24, r26
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	e2 e1       	ldi	r30, 0x12	; 18
     97e:	ab c4       	rjmp	.+2390   	; 0x12d6 <__epilogue_restores__>

00000980 <__subsf3>:
     980:	a0 e2       	ldi	r26, 0x20	; 32
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	e5 ec       	ldi	r30, 0xC5	; 197
     986:	f4 e0       	ldi	r31, 0x04	; 4
     988:	96 c4       	rjmp	.+2348   	; 0x12b6 <__prologue_saves__+0x18>
     98a:	69 83       	std	Y+1, r22	; 0x01
     98c:	7a 83       	std	Y+2, r23	; 0x02
     98e:	8b 83       	std	Y+3, r24	; 0x03
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	2d 83       	std	Y+5, r18	; 0x05
     994:	3e 83       	std	Y+6, r19	; 0x06
     996:	4f 83       	std	Y+7, r20	; 0x07
     998:	58 87       	std	Y+8, r21	; 0x08
     99a:	e9 e0       	ldi	r30, 0x09	; 9
     99c:	ee 2e       	mov	r14, r30
     99e:	f1 2c       	mov	r15, r1
     9a0:	ec 0e       	add	r14, r28
     9a2:	fd 1e       	adc	r15, r29
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	b7 01       	movw	r22, r14
     9aa:	81 d3       	rcall	.+1794   	; 0x10ae <__unpack_f>
     9ac:	8e 01       	movw	r16, r28
     9ae:	0f 5e       	subi	r16, 0xEF	; 239
     9b0:	1f 4f       	sbci	r17, 0xFF	; 255
     9b2:	ce 01       	movw	r24, r28
     9b4:	05 96       	adiw	r24, 0x05	; 5
     9b6:	b8 01       	movw	r22, r16
     9b8:	7a d3       	rcall	.+1780   	; 0x10ae <__unpack_f>
     9ba:	8a 89       	ldd	r24, Y+18	; 0x12
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	89 27       	eor	r24, r25
     9c0:	8a 8b       	std	Y+18, r24	; 0x12
     9c2:	c7 01       	movw	r24, r14
     9c4:	b8 01       	movw	r22, r16
     9c6:	ae 01       	movw	r20, r28
     9c8:	47 5e       	subi	r20, 0xE7	; 231
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	8f de       	rcall	.-738    	; 0x6ec <_fpadd_parts>
     9ce:	9a d2       	rcall	.+1332   	; 0xf04 <__pack_f>
     9d0:	a0 96       	adiw	r28, 0x20	; 32
     9d2:	e6 e0       	ldi	r30, 0x06	; 6
     9d4:	8c c4       	rjmp	.+2328   	; 0x12ee <__epilogue_restores__+0x18>

000009d6 <__addsf3>:
     9d6:	a0 e2       	ldi	r26, 0x20	; 32
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e0 ef       	ldi	r30, 0xF0	; 240
     9dc:	f4 e0       	ldi	r31, 0x04	; 4
     9de:	6b c4       	rjmp	.+2262   	; 0x12b6 <__prologue_saves__+0x18>
     9e0:	69 83       	std	Y+1, r22	; 0x01
     9e2:	7a 83       	std	Y+2, r23	; 0x02
     9e4:	8b 83       	std	Y+3, r24	; 0x03
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	2d 83       	std	Y+5, r18	; 0x05
     9ea:	3e 83       	std	Y+6, r19	; 0x06
     9ec:	4f 83       	std	Y+7, r20	; 0x07
     9ee:	58 87       	std	Y+8, r21	; 0x08
     9f0:	f9 e0       	ldi	r31, 0x09	; 9
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f1 2c       	mov	r15, r1
     9f6:	ec 0e       	add	r14, r28
     9f8:	fd 1e       	adc	r15, r29
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	b7 01       	movw	r22, r14
     a00:	56 d3       	rcall	.+1708   	; 0x10ae <__unpack_f>
     a02:	8e 01       	movw	r16, r28
     a04:	0f 5e       	subi	r16, 0xEF	; 239
     a06:	1f 4f       	sbci	r17, 0xFF	; 255
     a08:	ce 01       	movw	r24, r28
     a0a:	05 96       	adiw	r24, 0x05	; 5
     a0c:	b8 01       	movw	r22, r16
     a0e:	4f d3       	rcall	.+1694   	; 0x10ae <__unpack_f>
     a10:	c7 01       	movw	r24, r14
     a12:	b8 01       	movw	r22, r16
     a14:	ae 01       	movw	r20, r28
     a16:	47 5e       	subi	r20, 0xE7	; 231
     a18:	5f 4f       	sbci	r21, 0xFF	; 255
     a1a:	68 de       	rcall	.-816    	; 0x6ec <_fpadd_parts>
     a1c:	73 d2       	rcall	.+1254   	; 0xf04 <__pack_f>
     a1e:	a0 96       	adiw	r28, 0x20	; 32
     a20:	e6 e0       	ldi	r30, 0x06	; 6
     a22:	65 c4       	rjmp	.+2250   	; 0x12ee <__epilogue_restores__+0x18>

00000a24 <__mulsf3>:
     a24:	a0 e2       	ldi	r26, 0x20	; 32
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e7 e1       	ldi	r30, 0x17	; 23
     a2a:	f5 e0       	ldi	r31, 0x05	; 5
     a2c:	38 c4       	rjmp	.+2160   	; 0x129e <__prologue_saves__>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	be 01       	movw	r22, r28
     a44:	67 5f       	subi	r22, 0xF7	; 247
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	32 d3       	rcall	.+1636   	; 0x10ae <__unpack_f>
     a4a:	ce 01       	movw	r24, r28
     a4c:	05 96       	adiw	r24, 0x05	; 5
     a4e:	be 01       	movw	r22, r28
     a50:	6f 5e       	subi	r22, 0xEF	; 239
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	2c d3       	rcall	.+1624   	; 0x10ae <__unpack_f>
     a56:	99 85       	ldd	r25, Y+9	; 0x09
     a58:	92 30       	cpi	r25, 0x02	; 2
     a5a:	88 f0       	brcs	.+34     	; 0xa7e <__mulsf3+0x5a>
     a5c:	89 89       	ldd	r24, Y+17	; 0x11
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	c8 f0       	brcs	.+50     	; 0xa94 <__mulsf3+0x70>
     a62:	94 30       	cpi	r25, 0x04	; 4
     a64:	19 f4       	brne	.+6      	; 0xa6c <__mulsf3+0x48>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	51 f4       	brne	.+20     	; 0xa7e <__mulsf3+0x5a>
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__mulsf3+0x50>
     a6c:	84 30       	cpi	r24, 0x04	; 4
     a6e:	29 f4       	brne	.+10     	; 0xa7a <__mulsf3+0x56>
     a70:	92 30       	cpi	r25, 0x02	; 2
     a72:	81 f4       	brne	.+32     	; 0xa94 <__mulsf3+0x70>
     a74:	8b e6       	ldi	r24, 0x6B	; 107
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	c6 c0       	rjmp	.+396    	; 0xc06 <__mulsf3+0x1e2>
     a7a:	92 30       	cpi	r25, 0x02	; 2
     a7c:	49 f4       	brne	.+18     	; 0xa90 <__mulsf3+0x6c>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	9a 85       	ldd	r25, Y+10	; 0x0a
     a82:	8a 89       	ldd	r24, Y+18	; 0x12
     a84:	98 13       	cpse	r25, r24
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	2a 87       	std	Y+10, r18	; 0x0a
     a8a:	ce 01       	movw	r24, r28
     a8c:	09 96       	adiw	r24, 0x09	; 9
     a8e:	bb c0       	rjmp	.+374    	; 0xc06 <__mulsf3+0x1e2>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	49 f4       	brne	.+18     	; 0xaa6 <__mulsf3+0x82>
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	9a 85       	ldd	r25, Y+10	; 0x0a
     a98:	8a 89       	ldd	r24, Y+18	; 0x12
     a9a:	98 13       	cpse	r25, r24
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	2a 8b       	std	Y+18, r18	; 0x12
     aa0:	ce 01       	movw	r24, r28
     aa2:	41 96       	adiw	r24, 0x11	; 17
     aa4:	b0 c0       	rjmp	.+352    	; 0xc06 <__mulsf3+0x1e2>
     aa6:	2d 84       	ldd	r2, Y+13	; 0x0d
     aa8:	3e 84       	ldd	r3, Y+14	; 0x0e
     aaa:	4f 84       	ldd	r4, Y+15	; 0x0f
     aac:	58 88       	ldd	r5, Y+16	; 0x10
     aae:	6d 88       	ldd	r6, Y+21	; 0x15
     ab0:	7e 88       	ldd	r7, Y+22	; 0x16
     ab2:	8f 88       	ldd	r8, Y+23	; 0x17
     ab4:	98 8c       	ldd	r9, Y+24	; 0x18
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	aa 24       	eor	r10, r10
     abe:	bb 24       	eor	r11, r11
     ac0:	65 01       	movw	r12, r10
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	e0 e0       	ldi	r30, 0x00	; 0
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	c1 01       	movw	r24, r2
     ad0:	81 70       	andi	r24, 0x01	; 1
     ad2:	90 70       	andi	r25, 0x00	; 0
     ad4:	89 2b       	or	r24, r25
     ad6:	e9 f0       	breq	.+58     	; 0xb12 <__mulsf3+0xee>
     ad8:	e6 0c       	add	r14, r6
     ada:	f7 1c       	adc	r15, r7
     adc:	08 1d       	adc	r16, r8
     ade:	19 1d       	adc	r17, r9
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	2a 0d       	add	r18, r10
     ae6:	3b 1d       	adc	r19, r11
     ae8:	4c 1d       	adc	r20, r12
     aea:	5d 1d       	adc	r21, r13
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	e6 14       	cp	r14, r6
     af6:	f7 04       	cpc	r15, r7
     af8:	08 05       	cpc	r16, r8
     afa:	19 05       	cpc	r17, r9
     afc:	20 f4       	brcc	.+8      	; 0xb06 <__mulsf3+0xe2>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	ba 01       	movw	r22, r20
     b08:	a9 01       	movw	r20, r18
     b0a:	48 0f       	add	r20, r24
     b0c:	59 1f       	adc	r21, r25
     b0e:	6a 1f       	adc	r22, r26
     b10:	7b 1f       	adc	r23, r27
     b12:	aa 0c       	add	r10, r10
     b14:	bb 1c       	adc	r11, r11
     b16:	cc 1c       	adc	r12, r12
     b18:	dd 1c       	adc	r13, r13
     b1a:	97 fe       	sbrs	r9, 7
     b1c:	08 c0       	rjmp	.+16     	; 0xb2e <__mulsf3+0x10a>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	a8 2a       	or	r10, r24
     b28:	b9 2a       	or	r11, r25
     b2a:	ca 2a       	or	r12, r26
     b2c:	db 2a       	or	r13, r27
     b2e:	31 96       	adiw	r30, 0x01	; 1
     b30:	e0 32       	cpi	r30, 0x20	; 32
     b32:	f1 05       	cpc	r31, r1
     b34:	49 f0       	breq	.+18     	; 0xb48 <__mulsf3+0x124>
     b36:	66 0c       	add	r6, r6
     b38:	77 1c       	adc	r7, r7
     b3a:	88 1c       	adc	r8, r8
     b3c:	99 1c       	adc	r9, r9
     b3e:	56 94       	lsr	r5
     b40:	47 94       	ror	r4
     b42:	37 94       	ror	r3
     b44:	27 94       	ror	r2
     b46:	c3 cf       	rjmp	.-122    	; 0xace <__mulsf3+0xaa>
     b48:	fa 85       	ldd	r31, Y+10	; 0x0a
     b4a:	ea 89       	ldd	r30, Y+18	; 0x12
     b4c:	2b 89       	ldd	r18, Y+19	; 0x13
     b4e:	3c 89       	ldd	r19, Y+20	; 0x14
     b50:	8b 85       	ldd	r24, Y+11	; 0x0b
     b52:	9c 85       	ldd	r25, Y+12	; 0x0c
     b54:	28 0f       	add	r18, r24
     b56:	39 1f       	adc	r19, r25
     b58:	2e 5f       	subi	r18, 0xFE	; 254
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	17 c0       	rjmp	.+46     	; 0xb8c <__mulsf3+0x168>
     b5e:	ca 01       	movw	r24, r20
     b60:	81 70       	andi	r24, 0x01	; 1
     b62:	90 70       	andi	r25, 0x00	; 0
     b64:	89 2b       	or	r24, r25
     b66:	61 f0       	breq	.+24     	; 0xb80 <__mulsf3+0x15c>
     b68:	16 95       	lsr	r17
     b6a:	07 95       	ror	r16
     b6c:	f7 94       	ror	r15
     b6e:	e7 94       	ror	r14
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e8       	ldi	r27, 0x80	; 128
     b78:	e8 2a       	or	r14, r24
     b7a:	f9 2a       	or	r15, r25
     b7c:	0a 2b       	or	r16, r26
     b7e:	1b 2b       	or	r17, r27
     b80:	76 95       	lsr	r23
     b82:	67 95       	ror	r22
     b84:	57 95       	ror	r21
     b86:	47 95       	ror	r20
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	77 fd       	sbrc	r23, 7
     b8e:	e7 cf       	rjmp	.-50     	; 0xb5e <__mulsf3+0x13a>
     b90:	0c c0       	rjmp	.+24     	; 0xbaa <__mulsf3+0x186>
     b92:	44 0f       	add	r20, r20
     b94:	55 1f       	adc	r21, r21
     b96:	66 1f       	adc	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	17 fd       	sbrc	r17, 7
     b9c:	41 60       	ori	r20, 0x01	; 1
     b9e:	ee 0c       	add	r14, r14
     ba0:	ff 1c       	adc	r15, r15
     ba2:	00 1f       	adc	r16, r16
     ba4:	11 1f       	adc	r17, r17
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	30 40       	sbci	r19, 0x00	; 0
     baa:	40 30       	cpi	r20, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	59 07       	cpc	r21, r25
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	69 07       	cpc	r22, r25
     bb4:	90 e4       	ldi	r25, 0x40	; 64
     bb6:	79 07       	cpc	r23, r25
     bb8:	60 f3       	brcs	.-40     	; 0xb92 <__mulsf3+0x16e>
     bba:	2b 8f       	std	Y+27, r18	; 0x1b
     bbc:	3c 8f       	std	Y+28, r19	; 0x1c
     bbe:	db 01       	movw	r26, r22
     bc0:	ca 01       	movw	r24, r20
     bc2:	8f 77       	andi	r24, 0x7F	; 127
     bc4:	90 70       	andi	r25, 0x00	; 0
     bc6:	a0 70       	andi	r26, 0x00	; 0
     bc8:	b0 70       	andi	r27, 0x00	; 0
     bca:	80 34       	cpi	r24, 0x40	; 64
     bcc:	91 05       	cpc	r25, r1
     bce:	a1 05       	cpc	r26, r1
     bd0:	b1 05       	cpc	r27, r1
     bd2:	61 f4       	brne	.+24     	; 0xbec <__mulsf3+0x1c8>
     bd4:	47 fd       	sbrc	r20, 7
     bd6:	0a c0       	rjmp	.+20     	; 0xbec <__mulsf3+0x1c8>
     bd8:	e1 14       	cp	r14, r1
     bda:	f1 04       	cpc	r15, r1
     bdc:	01 05       	cpc	r16, r1
     bde:	11 05       	cpc	r17, r1
     be0:	29 f0       	breq	.+10     	; 0xbec <__mulsf3+0x1c8>
     be2:	40 5c       	subi	r20, 0xC0	; 192
     be4:	5f 4f       	sbci	r21, 0xFF	; 255
     be6:	6f 4f       	sbci	r22, 0xFF	; 255
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	40 78       	andi	r20, 0x80	; 128
     bec:	1a 8e       	std	Y+26, r1	; 0x1a
     bee:	fe 17       	cp	r31, r30
     bf0:	11 f0       	breq	.+4      	; 0xbf6 <__mulsf3+0x1d2>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	8a 8f       	std	Y+26, r24	; 0x1a
     bf6:	4d 8f       	std	Y+29, r20	; 0x1d
     bf8:	5e 8f       	std	Y+30, r21	; 0x1e
     bfa:	6f 8f       	std	Y+31, r22	; 0x1f
     bfc:	78 a3       	std	Y+32, r23	; 0x20
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	89 8f       	std	Y+25, r24	; 0x19
     c02:	ce 01       	movw	r24, r28
     c04:	49 96       	adiw	r24, 0x19	; 25
     c06:	7e d1       	rcall	.+764    	; 0xf04 <__pack_f>
     c08:	a0 96       	adiw	r28, 0x20	; 32
     c0a:	e2 e1       	ldi	r30, 0x12	; 18
     c0c:	64 c3       	rjmp	.+1736   	; 0x12d6 <__epilogue_restores__>

00000c0e <__gtsf2>:
     c0e:	a8 e1       	ldi	r26, 0x18	; 24
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ec e0       	ldi	r30, 0x0C	; 12
     c14:	f6 e0       	ldi	r31, 0x06	; 6
     c16:	4f c3       	rjmp	.+1694   	; 0x12b6 <__prologue_saves__+0x18>
     c18:	69 83       	std	Y+1, r22	; 0x01
     c1a:	7a 83       	std	Y+2, r23	; 0x02
     c1c:	8b 83       	std	Y+3, r24	; 0x03
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	2d 83       	std	Y+5, r18	; 0x05
     c22:	3e 83       	std	Y+6, r19	; 0x06
     c24:	4f 83       	std	Y+7, r20	; 0x07
     c26:	58 87       	std	Y+8, r21	; 0x08
     c28:	89 e0       	ldi	r24, 0x09	; 9
     c2a:	e8 2e       	mov	r14, r24
     c2c:	f1 2c       	mov	r15, r1
     c2e:	ec 0e       	add	r14, r28
     c30:	fd 1e       	adc	r15, r29
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	b7 01       	movw	r22, r14
     c38:	3a d2       	rcall	.+1140   	; 0x10ae <__unpack_f>
     c3a:	8e 01       	movw	r16, r28
     c3c:	0f 5e       	subi	r16, 0xEF	; 239
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	ce 01       	movw	r24, r28
     c42:	05 96       	adiw	r24, 0x05	; 5
     c44:	b8 01       	movw	r22, r16
     c46:	33 d2       	rcall	.+1126   	; 0x10ae <__unpack_f>
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	38 f0       	brcs	.+14     	; 0xc5c <__gtsf2+0x4e>
     c4e:	89 89       	ldd	r24, Y+17	; 0x11
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	20 f0       	brcs	.+8      	; 0xc5c <__gtsf2+0x4e>
     c54:	c7 01       	movw	r24, r14
     c56:	b8 01       	movw	r22, r16
     c58:	a2 d2       	rcall	.+1348   	; 0x119e <__fpcmp_parts_f>
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <__gtsf2+0x50>
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	68 96       	adiw	r28, 0x18	; 24
     c60:	e6 e0       	ldi	r30, 0x06	; 6
     c62:	45 c3       	rjmp	.+1674   	; 0x12ee <__epilogue_restores__+0x18>

00000c64 <__gesf2>:
     c64:	a8 e1       	ldi	r26, 0x18	; 24
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e7 e3       	ldi	r30, 0x37	; 55
     c6a:	f6 e0       	ldi	r31, 0x06	; 6
     c6c:	24 c3       	rjmp	.+1608   	; 0x12b6 <__prologue_saves__+0x18>
     c6e:	69 83       	std	Y+1, r22	; 0x01
     c70:	7a 83       	std	Y+2, r23	; 0x02
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	2d 83       	std	Y+5, r18	; 0x05
     c78:	3e 83       	std	Y+6, r19	; 0x06
     c7a:	4f 83       	std	Y+7, r20	; 0x07
     c7c:	58 87       	std	Y+8, r21	; 0x08
     c7e:	89 e0       	ldi	r24, 0x09	; 9
     c80:	e8 2e       	mov	r14, r24
     c82:	f1 2c       	mov	r15, r1
     c84:	ec 0e       	add	r14, r28
     c86:	fd 1e       	adc	r15, r29
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	b7 01       	movw	r22, r14
     c8e:	0f d2       	rcall	.+1054   	; 0x10ae <__unpack_f>
     c90:	8e 01       	movw	r16, r28
     c92:	0f 5e       	subi	r16, 0xEF	; 239
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	05 96       	adiw	r24, 0x05	; 5
     c9a:	b8 01       	movw	r22, r16
     c9c:	08 d2       	rcall	.+1040   	; 0x10ae <__unpack_f>
     c9e:	89 85       	ldd	r24, Y+9	; 0x09
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	38 f0       	brcs	.+14     	; 0xcb2 <__gesf2+0x4e>
     ca4:	89 89       	ldd	r24, Y+17	; 0x11
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__gesf2+0x4e>
     caa:	c7 01       	movw	r24, r14
     cac:	b8 01       	movw	r22, r16
     cae:	77 d2       	rcall	.+1262   	; 0x119e <__fpcmp_parts_f>
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <__gesf2+0x50>
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	68 96       	adiw	r28, 0x18	; 24
     cb6:	e6 e0       	ldi	r30, 0x06	; 6
     cb8:	1a c3       	rjmp	.+1588   	; 0x12ee <__epilogue_restores__+0x18>

00000cba <__ltsf2>:
     cba:	a8 e1       	ldi	r26, 0x18	; 24
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e2 e6       	ldi	r30, 0x62	; 98
     cc0:	f6 e0       	ldi	r31, 0x06	; 6
     cc2:	f9 c2       	rjmp	.+1522   	; 0x12b6 <__prologue_saves__+0x18>
     cc4:	69 83       	std	Y+1, r22	; 0x01
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	2d 83       	std	Y+5, r18	; 0x05
     cce:	3e 83       	std	Y+6, r19	; 0x06
     cd0:	4f 83       	std	Y+7, r20	; 0x07
     cd2:	58 87       	std	Y+8, r21	; 0x08
     cd4:	89 e0       	ldi	r24, 0x09	; 9
     cd6:	e8 2e       	mov	r14, r24
     cd8:	f1 2c       	mov	r15, r1
     cda:	ec 0e       	add	r14, r28
     cdc:	fd 1e       	adc	r15, r29
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	b7 01       	movw	r22, r14
     ce4:	e4 d1       	rcall	.+968    	; 0x10ae <__unpack_f>
     ce6:	8e 01       	movw	r16, r28
     ce8:	0f 5e       	subi	r16, 0xEF	; 239
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	ce 01       	movw	r24, r28
     cee:	05 96       	adiw	r24, 0x05	; 5
     cf0:	b8 01       	movw	r22, r16
     cf2:	dd d1       	rcall	.+954    	; 0x10ae <__unpack_f>
     cf4:	89 85       	ldd	r24, Y+9	; 0x09
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	38 f0       	brcs	.+14     	; 0xd08 <__ltsf2+0x4e>
     cfa:	89 89       	ldd	r24, Y+17	; 0x11
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	20 f0       	brcs	.+8      	; 0xd08 <__ltsf2+0x4e>
     d00:	c7 01       	movw	r24, r14
     d02:	b8 01       	movw	r22, r16
     d04:	4c d2       	rcall	.+1176   	; 0x119e <__fpcmp_parts_f>
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <__ltsf2+0x50>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	68 96       	adiw	r28, 0x18	; 24
     d0c:	e6 e0       	ldi	r30, 0x06	; 6
     d0e:	ef c2       	rjmp	.+1502   	; 0x12ee <__epilogue_restores__+0x18>

00000d10 <__floatsisf>:
     d10:	a8 e0       	ldi	r26, 0x08	; 8
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ed e8       	ldi	r30, 0x8D	; 141
     d16:	f6 e0       	ldi	r31, 0x06	; 6
     d18:	cb c2       	rjmp	.+1430   	; 0x12b0 <__prologue_saves__+0x12>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	da 01       	movw	r26, r20
     d24:	c9 01       	movw	r24, r18
     d26:	88 27       	eor	r24, r24
     d28:	b7 fd       	sbrc	r27, 7
     d2a:	83 95       	inc	r24
     d2c:	99 27       	eor	r25, r25
     d2e:	aa 27       	eor	r26, r26
     d30:	bb 27       	eor	r27, r27
     d32:	b8 2e       	mov	r11, r24
     d34:	21 15       	cp	r18, r1
     d36:	31 05       	cpc	r19, r1
     d38:	41 05       	cpc	r20, r1
     d3a:	51 05       	cpc	r21, r1
     d3c:	19 f4       	brne	.+6      	; 0xd44 <__floatsisf+0x34>
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	39 c0       	rjmp	.+114    	; 0xdb6 <__floatsisf+0xa6>
     d44:	88 23       	and	r24, r24
     d46:	a9 f0       	breq	.+42     	; 0xd72 <__floatsisf+0x62>
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	38 07       	cpc	r19, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	48 07       	cpc	r20, r24
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	58 07       	cpc	r21, r24
     d56:	29 f4       	brne	.+10     	; 0xd62 <__floatsisf+0x52>
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	9f ec       	ldi	r25, 0xCF	; 207
     d60:	2e c0       	rjmp	.+92     	; 0xdbe <__floatsisf+0xae>
     d62:	ee 24       	eor	r14, r14
     d64:	ff 24       	eor	r15, r15
     d66:	87 01       	movw	r16, r14
     d68:	e2 1a       	sub	r14, r18
     d6a:	f3 0a       	sbc	r15, r19
     d6c:	04 0b       	sbc	r16, r20
     d6e:	15 0b       	sbc	r17, r21
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <__floatsisf+0x66>
     d72:	79 01       	movw	r14, r18
     d74:	8a 01       	movw	r16, r20
     d76:	8e e1       	ldi	r24, 0x1E	; 30
     d78:	c8 2e       	mov	r12, r24
     d7a:	d1 2c       	mov	r13, r1
     d7c:	dc 82       	std	Y+4, r13	; 0x04
     d7e:	cb 82       	std	Y+3, r12	; 0x03
     d80:	ed 82       	std	Y+5, r14	; 0x05
     d82:	fe 82       	std	Y+6, r15	; 0x06
     d84:	0f 83       	std	Y+7, r16	; 0x07
     d86:	18 87       	std	Y+8, r17	; 0x08
     d88:	c8 01       	movw	r24, r16
     d8a:	b7 01       	movw	r22, r14
     d8c:	6c d0       	rcall	.+216    	; 0xe66 <__clzsi2>
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	18 16       	cp	r1, r24
     d92:	19 06       	cpc	r1, r25
     d94:	84 f4       	brge	.+32     	; 0xdb6 <__floatsisf+0xa6>
     d96:	08 2e       	mov	r0, r24
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <__floatsisf+0x92>
     d9a:	ee 0c       	add	r14, r14
     d9c:	ff 1c       	adc	r15, r15
     d9e:	00 1f       	adc	r16, r16
     da0:	11 1f       	adc	r17, r17
     da2:	0a 94       	dec	r0
     da4:	d2 f7       	brpl	.-12     	; 0xd9a <__floatsisf+0x8a>
     da6:	ed 82       	std	Y+5, r14	; 0x05
     da8:	fe 82       	std	Y+6, r15	; 0x06
     daa:	0f 83       	std	Y+7, r16	; 0x07
     dac:	18 87       	std	Y+8, r17	; 0x08
     dae:	c8 1a       	sub	r12, r24
     db0:	d9 0a       	sbc	r13, r25
     db2:	dc 82       	std	Y+4, r13	; 0x04
     db4:	cb 82       	std	Y+3, r12	; 0x03
     db6:	ba 82       	std	Y+2, r11	; 0x02
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	a3 d0       	rcall	.+326    	; 0xf04 <__pack_f>
     dbe:	28 96       	adiw	r28, 0x08	; 8
     dc0:	e9 e0       	ldi	r30, 0x09	; 9
     dc2:	92 c2       	rjmp	.+1316   	; 0x12e8 <__epilogue_restores__+0x12>

00000dc4 <__fixsfsi>:
     dc4:	ac e0       	ldi	r26, 0x0C	; 12
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 ee       	ldi	r30, 0xE7	; 231
     dca:	f6 e0       	ldi	r31, 0x06	; 6
     dcc:	78 c2       	rjmp	.+1264   	; 0x12be <__prologue_saves__+0x20>
     dce:	69 83       	std	Y+1, r22	; 0x01
     dd0:	7a 83       	std	Y+2, r23	; 0x02
     dd2:	8b 83       	std	Y+3, r24	; 0x03
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	be 01       	movw	r22, r28
     ddc:	6b 5f       	subi	r22, 0xFB	; 251
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	66 d1       	rcall	.+716    	; 0x10ae <__unpack_f>
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	61 f1       	breq	.+88     	; 0xe40 <__fixsfsi+0x7c>
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	50 f1       	brcs	.+84     	; 0xe40 <__fixsfsi+0x7c>
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	21 f4       	brne	.+8      	; 0xdf8 <__fixsfsi+0x34>
     df0:	8e 81       	ldd	r24, Y+6	; 0x06
     df2:	88 23       	and	r24, r24
     df4:	51 f1       	breq	.+84     	; 0xe4a <__fixsfsi+0x86>
     df6:	2e c0       	rjmp	.+92     	; 0xe54 <__fixsfsi+0x90>
     df8:	2f 81       	ldd	r18, Y+7	; 0x07
     dfa:	38 85       	ldd	r19, Y+8	; 0x08
     dfc:	37 fd       	sbrc	r19, 7
     dfe:	20 c0       	rjmp	.+64     	; 0xe40 <__fixsfsi+0x7c>
     e00:	6e 81       	ldd	r22, Y+6	; 0x06
     e02:	2f 31       	cpi	r18, 0x1F	; 31
     e04:	31 05       	cpc	r19, r1
     e06:	1c f0       	brlt	.+6      	; 0xe0e <__fixsfsi+0x4a>
     e08:	66 23       	and	r22, r22
     e0a:	f9 f0       	breq	.+62     	; 0xe4a <__fixsfsi+0x86>
     e0c:	23 c0       	rjmp	.+70     	; 0xe54 <__fixsfsi+0x90>
     e0e:	8e e1       	ldi	r24, 0x1E	; 30
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	82 1b       	sub	r24, r18
     e14:	93 0b       	sbc	r25, r19
     e16:	29 85       	ldd	r18, Y+9	; 0x09
     e18:	3a 85       	ldd	r19, Y+10	; 0x0a
     e1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     e1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <__fixsfsi+0x64>
     e20:	56 95       	lsr	r21
     e22:	47 95       	ror	r20
     e24:	37 95       	ror	r19
     e26:	27 95       	ror	r18
     e28:	8a 95       	dec	r24
     e2a:	d2 f7       	brpl	.-12     	; 0xe20 <__fixsfsi+0x5c>
     e2c:	66 23       	and	r22, r22
     e2e:	b1 f0       	breq	.+44     	; 0xe5c <__fixsfsi+0x98>
     e30:	50 95       	com	r21
     e32:	40 95       	com	r20
     e34:	30 95       	com	r19
     e36:	21 95       	neg	r18
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	4f 4f       	sbci	r20, 0xFF	; 255
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <__fixsfsi+0x98>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <__fixsfsi+0x98>
     e4a:	2f ef       	ldi	r18, 0xFF	; 255
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	4f ef       	ldi	r20, 0xFF	; 255
     e50:	5f e7       	ldi	r21, 0x7F	; 127
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <__fixsfsi+0x98>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	50 e8       	ldi	r21, 0x80	; 128
     e5c:	b9 01       	movw	r22, r18
     e5e:	ca 01       	movw	r24, r20
     e60:	2c 96       	adiw	r28, 0x0c	; 12
     e62:	e2 e0       	ldi	r30, 0x02	; 2
     e64:	48 c2       	rjmp	.+1168   	; 0x12f6 <__epilogue_restores__+0x20>

00000e66 <__clzsi2>:
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	7b 01       	movw	r14, r22
     e70:	8c 01       	movw	r16, r24
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	e8 16       	cp	r14, r24
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	f8 06       	cpc	r15, r24
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 07       	cpc	r16, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	18 07       	cpc	r17, r24
     e82:	88 f4       	brcc	.+34     	; 0xea6 <__clzsi2+0x40>
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	e8 16       	cp	r14, r24
     e88:	f1 04       	cpc	r15, r1
     e8a:	01 05       	cpc	r16, r1
     e8c:	11 05       	cpc	r17, r1
     e8e:	31 f0       	breq	.+12     	; 0xe9c <__clzsi2+0x36>
     e90:	28 f0       	brcs	.+10     	; 0xe9c <__clzsi2+0x36>
     e92:	88 e0       	ldi	r24, 0x08	; 8
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <__clzsi2+0x64>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <__clzsi2+0x64>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	e8 16       	cp	r14, r24
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	f8 06       	cpc	r15, r24
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 07       	cpc	r16, r24
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	18 07       	cpc	r17, r24
     eb6:	28 f0       	brcs	.+10     	; 0xec2 <__clzsi2+0x5c>
     eb8:	88 e1       	ldi	r24, 0x18	; 24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <__clzsi2+0x64>
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	20 e2       	ldi	r18, 0x20	; 32
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	28 1b       	sub	r18, r24
     ed4:	39 0b       	sbc	r19, r25
     ed6:	4a 0b       	sbc	r20, r26
     ed8:	5b 0b       	sbc	r21, r27
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__clzsi2+0x7e>
     edc:	16 95       	lsr	r17
     ede:	07 95       	ror	r16
     ee0:	f7 94       	ror	r15
     ee2:	e7 94       	ror	r14
     ee4:	8a 95       	dec	r24
     ee6:	d2 f7       	brpl	.-12     	; 0xedc <__clzsi2+0x76>
     ee8:	f7 01       	movw	r30, r14
     eea:	ed 58       	subi	r30, 0x8D	; 141
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	28 1b       	sub	r18, r24
     ef2:	31 09       	sbc	r19, r1
     ef4:	41 09       	sbc	r20, r1
     ef6:	51 09       	sbc	r21, r1
     ef8:	c9 01       	movw	r24, r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	08 95       	ret

00000f04 <__pack_f>:
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	fc 01       	movw	r30, r24
     f10:	e4 80       	ldd	r14, Z+4	; 0x04
     f12:	f5 80       	ldd	r15, Z+5	; 0x05
     f14:	06 81       	ldd	r16, Z+6	; 0x06
     f16:	17 81       	ldd	r17, Z+7	; 0x07
     f18:	d1 80       	ldd	r13, Z+1	; 0x01
     f1a:	80 81       	ld	r24, Z
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	48 f4       	brcc	.+18     	; 0xf32 <__pack_f+0x2e>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e1       	ldi	r26, 0x10	; 16
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 2a       	or	r14, r24
     f2a:	f9 2a       	or	r15, r25
     f2c:	0a 2b       	or	r16, r26
     f2e:	1b 2b       	or	r17, r27
     f30:	a5 c0       	rjmp	.+330    	; 0x107c <__pack_f+0x178>
     f32:	84 30       	cpi	r24, 0x04	; 4
     f34:	09 f4       	brne	.+2      	; 0xf38 <__pack_f+0x34>
     f36:	9f c0       	rjmp	.+318    	; 0x1076 <__pack_f+0x172>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	21 f4       	brne	.+8      	; 0xf44 <__pack_f+0x40>
     f3c:	ee 24       	eor	r14, r14
     f3e:	ff 24       	eor	r15, r15
     f40:	87 01       	movw	r16, r14
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <__pack_f+0x4a>
     f44:	e1 14       	cp	r14, r1
     f46:	f1 04       	cpc	r15, r1
     f48:	01 05       	cpc	r16, r1
     f4a:	11 05       	cpc	r17, r1
     f4c:	19 f4       	brne	.+6      	; 0xf54 <__pack_f+0x50>
     f4e:	e0 e0       	ldi	r30, 0x00	; 0
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	96 c0       	rjmp	.+300    	; 0x1080 <__pack_f+0x17c>
     f54:	62 81       	ldd	r22, Z+2	; 0x02
     f56:	73 81       	ldd	r23, Z+3	; 0x03
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	62 38       	cpi	r22, 0x82	; 130
     f5c:	79 07       	cpc	r23, r25
     f5e:	0c f0       	brlt	.+2      	; 0xf62 <__pack_f+0x5e>
     f60:	5b c0       	rjmp	.+182    	; 0x1018 <__pack_f+0x114>
     f62:	22 e8       	ldi	r18, 0x82	; 130
     f64:	3f ef       	ldi	r19, 0xFF	; 255
     f66:	26 1b       	sub	r18, r22
     f68:	37 0b       	sbc	r19, r23
     f6a:	2a 31       	cpi	r18, 0x1A	; 26
     f6c:	31 05       	cpc	r19, r1
     f6e:	2c f0       	brlt	.+10     	; 0xf7a <__pack_f+0x76>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	2a c0       	rjmp	.+84     	; 0xfce <__pack_f+0xca>
     f7a:	b8 01       	movw	r22, r16
     f7c:	a7 01       	movw	r20, r14
     f7e:	02 2e       	mov	r0, r18
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <__pack_f+0x86>
     f82:	76 95       	lsr	r23
     f84:	67 95       	ror	r22
     f86:	57 95       	ror	r21
     f88:	47 95       	ror	r20
     f8a:	0a 94       	dec	r0
     f8c:	d2 f7       	brpl	.-12     	; 0xf82 <__pack_f+0x7e>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__pack_f+0x9c>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	aa 1f       	adc	r26, r26
     f9e:	bb 1f       	adc	r27, r27
     fa0:	2a 95       	dec	r18
     fa2:	d2 f7       	brpl	.-12     	; 0xf98 <__pack_f+0x94>
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	a1 09       	sbc	r26, r1
     fa8:	b1 09       	sbc	r27, r1
     faa:	8e 21       	and	r24, r14
     fac:	9f 21       	and	r25, r15
     fae:	a0 23       	and	r26, r16
     fb0:	b1 23       	and	r27, r17
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	a1 05       	cpc	r26, r1
     fb6:	b1 05       	cpc	r27, r1
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <__pack_f+0xbe>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	9a 01       	movw	r18, r20
     fc4:	ab 01       	movw	r20, r22
     fc6:	28 2b       	or	r18, r24
     fc8:	39 2b       	or	r19, r25
     fca:	4a 2b       	or	r20, r26
     fcc:	5b 2b       	or	r21, r27
     fce:	da 01       	movw	r26, r20
     fd0:	c9 01       	movw	r24, r18
     fd2:	8f 77       	andi	r24, 0x7F	; 127
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	a0 70       	andi	r26, 0x00	; 0
     fd8:	b0 70       	andi	r27, 0x00	; 0
     fda:	80 34       	cpi	r24, 0x40	; 64
     fdc:	91 05       	cpc	r25, r1
     fde:	a1 05       	cpc	r26, r1
     fe0:	b1 05       	cpc	r27, r1
     fe2:	39 f4       	brne	.+14     	; 0xff2 <__pack_f+0xee>
     fe4:	27 ff       	sbrs	r18, 7
     fe6:	09 c0       	rjmp	.+18     	; 0xffa <__pack_f+0xf6>
     fe8:	20 5c       	subi	r18, 0xC0	; 192
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	4f 4f       	sbci	r20, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__pack_f+0xf6>
     ff2:	21 5c       	subi	r18, 0xC1	; 193
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	4f 4f       	sbci	r20, 0xFF	; 255
     ff8:	5f 4f       	sbci	r21, 0xFF	; 255
     ffa:	e0 e0       	ldi	r30, 0x00	; 0
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	20 30       	cpi	r18, 0x00	; 0
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	3a 07       	cpc	r19, r26
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	4a 07       	cpc	r20, r26
    1008:	a0 e4       	ldi	r26, 0x40	; 64
    100a:	5a 07       	cpc	r21, r26
    100c:	10 f0       	brcs	.+4      	; 0x1012 <__pack_f+0x10e>
    100e:	e1 e0       	ldi	r30, 0x01	; 1
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	79 01       	movw	r14, r18
    1014:	8a 01       	movw	r16, r20
    1016:	27 c0       	rjmp	.+78     	; 0x1066 <__pack_f+0x162>
    1018:	60 38       	cpi	r22, 0x80	; 128
    101a:	71 05       	cpc	r23, r1
    101c:	64 f5       	brge	.+88     	; 0x1076 <__pack_f+0x172>
    101e:	fb 01       	movw	r30, r22
    1020:	e1 58       	subi	r30, 0x81	; 129
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	d8 01       	movw	r26, r16
    1026:	c7 01       	movw	r24, r14
    1028:	8f 77       	andi	r24, 0x7F	; 127
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	a0 70       	andi	r26, 0x00	; 0
    102e:	b0 70       	andi	r27, 0x00	; 0
    1030:	80 34       	cpi	r24, 0x40	; 64
    1032:	91 05       	cpc	r25, r1
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	39 f4       	brne	.+14     	; 0x1048 <__pack_f+0x144>
    103a:	e7 fe       	sbrs	r14, 7
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <__pack_f+0x154>
    103e:	80 e4       	ldi	r24, 0x40	; 64
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__pack_f+0x14c>
    1048:	8f e3       	ldi	r24, 0x3F	; 63
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e8 0e       	add	r14, r24
    1052:	f9 1e       	adc	r15, r25
    1054:	0a 1f       	adc	r16, r26
    1056:	1b 1f       	adc	r17, r27
    1058:	17 ff       	sbrs	r17, 7
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <__pack_f+0x162>
    105c:	16 95       	lsr	r17
    105e:	07 95       	ror	r16
    1060:	f7 94       	ror	r15
    1062:	e7 94       	ror	r14
    1064:	31 96       	adiw	r30, 0x01	; 1
    1066:	87 e0       	ldi	r24, 0x07	; 7
    1068:	16 95       	lsr	r17
    106a:	07 95       	ror	r16
    106c:	f7 94       	ror	r15
    106e:	e7 94       	ror	r14
    1070:	8a 95       	dec	r24
    1072:	d1 f7       	brne	.-12     	; 0x1068 <__pack_f+0x164>
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <__pack_f+0x17c>
    1076:	ee 24       	eor	r14, r14
    1078:	ff 24       	eor	r15, r15
    107a:	87 01       	movw	r16, r14
    107c:	ef ef       	ldi	r30, 0xFF	; 255
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	6e 2f       	mov	r22, r30
    1082:	67 95       	ror	r22
    1084:	66 27       	eor	r22, r22
    1086:	67 95       	ror	r22
    1088:	90 2f       	mov	r25, r16
    108a:	9f 77       	andi	r25, 0x7F	; 127
    108c:	d7 94       	ror	r13
    108e:	dd 24       	eor	r13, r13
    1090:	d7 94       	ror	r13
    1092:	8e 2f       	mov	r24, r30
    1094:	86 95       	lsr	r24
    1096:	49 2f       	mov	r20, r25
    1098:	46 2b       	or	r20, r22
    109a:	58 2f       	mov	r21, r24
    109c:	5d 29       	or	r21, r13
    109e:	b7 01       	movw	r22, r14
    10a0:	ca 01       	movw	r24, r20
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	08 95       	ret

000010ae <__unpack_f>:
    10ae:	fc 01       	movw	r30, r24
    10b0:	db 01       	movw	r26, r22
    10b2:	40 81       	ld	r20, Z
    10b4:	51 81       	ldd	r21, Z+1	; 0x01
    10b6:	22 81       	ldd	r18, Z+2	; 0x02
    10b8:	62 2f       	mov	r22, r18
    10ba:	6f 77       	andi	r22, 0x7F	; 127
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	22 1f       	adc	r18, r18
    10c0:	22 27       	eor	r18, r18
    10c2:	22 1f       	adc	r18, r18
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	89 2f       	mov	r24, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	82 2b       	or	r24, r18
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	99 1f       	adc	r25, r25
    10d2:	99 27       	eor	r25, r25
    10d4:	99 1f       	adc	r25, r25
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	9c 93       	st	X, r25
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	21 15       	cp	r18, r1
    10de:	31 05       	cpc	r19, r1
    10e0:	a9 f5       	brne	.+106    	; 0x114c <__unpack_f+0x9e>
    10e2:	41 15       	cp	r20, r1
    10e4:	51 05       	cpc	r21, r1
    10e6:	61 05       	cpc	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__unpack_f+0x42>
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	37 c0       	rjmp	.+110    	; 0x115e <__unpack_f+0xb0>
    10f0:	82 e8       	ldi	r24, 0x82	; 130
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	13 96       	adiw	r26, 0x03	; 3
    10f6:	9c 93       	st	X, r25
    10f8:	8e 93       	st	-X, r24
    10fa:	12 97       	sbiw	r26, 0x02	; 2
    10fc:	9a 01       	movw	r18, r20
    10fe:	ab 01       	movw	r20, r22
    1100:	67 e0       	ldi	r22, 0x07	; 7
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	44 1f       	adc	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	6a 95       	dec	r22
    110c:	d1 f7       	brne	.-12     	; 0x1102 <__unpack_f+0x54>
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	8c 93       	st	X, r24
    1112:	0d c0       	rjmp	.+26     	; 0x112e <__unpack_f+0x80>
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	55 1f       	adc	r21, r21
    111c:	12 96       	adiw	r26, 0x02	; 2
    111e:	8d 91       	ld	r24, X+
    1120:	9c 91       	ld	r25, X
    1122:	13 97       	sbiw	r26, 0x03	; 3
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	9c 93       	st	X, r25
    112a:	8e 93       	st	-X, r24
    112c:	12 97       	sbiw	r26, 0x02	; 2
    112e:	20 30       	cpi	r18, 0x00	; 0
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	38 07       	cpc	r19, r24
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	48 07       	cpc	r20, r24
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	58 07       	cpc	r21, r24
    113c:	58 f3       	brcs	.-42     	; 0x1114 <__unpack_f+0x66>
    113e:	14 96       	adiw	r26, 0x04	; 4
    1140:	2d 93       	st	X+, r18
    1142:	3d 93       	st	X+, r19
    1144:	4d 93       	st	X+, r20
    1146:	5c 93       	st	X, r21
    1148:	17 97       	sbiw	r26, 0x07	; 7
    114a:	08 95       	ret
    114c:	2f 3f       	cpi	r18, 0xFF	; 255
    114e:	31 05       	cpc	r19, r1
    1150:	79 f4       	brne	.+30     	; 0x1170 <__unpack_f+0xc2>
    1152:	41 15       	cp	r20, r1
    1154:	51 05       	cpc	r21, r1
    1156:	61 05       	cpc	r22, r1
    1158:	71 05       	cpc	r23, r1
    115a:	19 f4       	brne	.+6      	; 0x1162 <__unpack_f+0xb4>
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	8c 93       	st	X, r24
    1160:	08 95       	ret
    1162:	64 ff       	sbrs	r22, 4
    1164:	03 c0       	rjmp	.+6      	; 0x116c <__unpack_f+0xbe>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	8c 93       	st	X, r24
    116a:	12 c0       	rjmp	.+36     	; 0x1190 <__unpack_f+0xe2>
    116c:	1c 92       	st	X, r1
    116e:	10 c0       	rjmp	.+32     	; 0x1190 <__unpack_f+0xe2>
    1170:	2f 57       	subi	r18, 0x7F	; 127
    1172:	30 40       	sbci	r19, 0x00	; 0
    1174:	13 96       	adiw	r26, 0x03	; 3
    1176:	3c 93       	st	X, r19
    1178:	2e 93       	st	-X, r18
    117a:	12 97       	sbiw	r26, 0x02	; 2
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	8c 93       	st	X, r24
    1180:	87 e0       	ldi	r24, 0x07	; 7
    1182:	44 0f       	add	r20, r20
    1184:	55 1f       	adc	r21, r21
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	8a 95       	dec	r24
    118c:	d1 f7       	brne	.-12     	; 0x1182 <__unpack_f+0xd4>
    118e:	70 64       	ori	r23, 0x40	; 64
    1190:	14 96       	adiw	r26, 0x04	; 4
    1192:	4d 93       	st	X+, r20
    1194:	5d 93       	st	X+, r21
    1196:	6d 93       	st	X+, r22
    1198:	7c 93       	st	X, r23
    119a:	17 97       	sbiw	r26, 0x07	; 7
    119c:	08 95       	ret

0000119e <__fpcmp_parts_f>:
    119e:	1f 93       	push	r17
    11a0:	dc 01       	movw	r26, r24
    11a2:	fb 01       	movw	r30, r22
    11a4:	9c 91       	ld	r25, X
    11a6:	92 30       	cpi	r25, 0x02	; 2
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <__fpcmp_parts_f+0xe>
    11aa:	47 c0       	rjmp	.+142    	; 0x123a <__fpcmp_parts_f+0x9c>
    11ac:	80 81       	ld	r24, Z
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <__fpcmp_parts_f+0x16>
    11b2:	43 c0       	rjmp	.+134    	; 0x123a <__fpcmp_parts_f+0x9c>
    11b4:	94 30       	cpi	r25, 0x04	; 4
    11b6:	51 f4       	brne	.+20     	; 0x11cc <__fpcmp_parts_f+0x2e>
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	1c 91       	ld	r17, X
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	99 f5       	brne	.+102    	; 0x1226 <__fpcmp_parts_f+0x88>
    11c0:	81 81       	ldd	r24, Z+1	; 0x01
    11c2:	68 2f       	mov	r22, r24
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	61 1b       	sub	r22, r17
    11c8:	71 09       	sbc	r23, r1
    11ca:	3f c0       	rjmp	.+126    	; 0x124a <__fpcmp_parts_f+0xac>
    11cc:	84 30       	cpi	r24, 0x04	; 4
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <__fpcmp_parts_f+0x3a>
    11d0:	92 30       	cpi	r25, 0x02	; 2
    11d2:	31 f4       	brne	.+12     	; 0x11e0 <__fpcmp_parts_f+0x42>
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	b9 f1       	breq	.+110    	; 0x1246 <__fpcmp_parts_f+0xa8>
    11d8:	81 81       	ldd	r24, Z+1	; 0x01
    11da:	88 23       	and	r24, r24
    11dc:	89 f1       	breq	.+98     	; 0x1240 <__fpcmp_parts_f+0xa2>
    11de:	2d c0       	rjmp	.+90     	; 0x123a <__fpcmp_parts_f+0x9c>
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	1c 91       	ld	r17, X
    11e4:	11 97       	sbiw	r26, 0x01	; 1
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	f1 f0       	breq	.+60     	; 0x1226 <__fpcmp_parts_f+0x88>
    11ea:	81 81       	ldd	r24, Z+1	; 0x01
    11ec:	18 17       	cp	r17, r24
    11ee:	d9 f4       	brne	.+54     	; 0x1226 <__fpcmp_parts_f+0x88>
    11f0:	12 96       	adiw	r26, 0x02	; 2
    11f2:	2d 91       	ld	r18, X+
    11f4:	3c 91       	ld	r19, X
    11f6:	13 97       	sbiw	r26, 0x03	; 3
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	94 f0       	brlt	.+36     	; 0x1226 <__fpcmp_parts_f+0x88>
    1202:	28 17       	cp	r18, r24
    1204:	39 07       	cpc	r19, r25
    1206:	bc f0       	brlt	.+46     	; 0x1236 <__fpcmp_parts_f+0x98>
    1208:	14 96       	adiw	r26, 0x04	; 4
    120a:	8d 91       	ld	r24, X+
    120c:	9d 91       	ld	r25, X+
    120e:	0d 90       	ld	r0, X+
    1210:	bc 91       	ld	r27, X
    1212:	a0 2d       	mov	r26, r0
    1214:	24 81       	ldd	r18, Z+4	; 0x04
    1216:	35 81       	ldd	r19, Z+5	; 0x05
    1218:	46 81       	ldd	r20, Z+6	; 0x06
    121a:	57 81       	ldd	r21, Z+7	; 0x07
    121c:	28 17       	cp	r18, r24
    121e:	39 07       	cpc	r19, r25
    1220:	4a 07       	cpc	r20, r26
    1222:	5b 07       	cpc	r21, r27
    1224:	18 f4       	brcc	.+6      	; 0x122c <__fpcmp_parts_f+0x8e>
    1226:	11 23       	and	r17, r17
    1228:	41 f0       	breq	.+16     	; 0x123a <__fpcmp_parts_f+0x9c>
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <__fpcmp_parts_f+0xa2>
    122c:	82 17       	cp	r24, r18
    122e:	93 07       	cpc	r25, r19
    1230:	a4 07       	cpc	r26, r20
    1232:	b5 07       	cpc	r27, r21
    1234:	40 f4       	brcc	.+16     	; 0x1246 <__fpcmp_parts_f+0xa8>
    1236:	11 23       	and	r17, r17
    1238:	19 f0       	breq	.+6      	; 0x1240 <__fpcmp_parts_f+0xa2>
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	05 c0       	rjmp	.+10     	; 0x124a <__fpcmp_parts_f+0xac>
    1240:	6f ef       	ldi	r22, 0xFF	; 255
    1242:	7f ef       	ldi	r23, 0xFF	; 255
    1244:	02 c0       	rjmp	.+4      	; 0x124a <__fpcmp_parts_f+0xac>
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	cb 01       	movw	r24, r22
    124c:	1f 91       	pop	r17
    124e:	08 95       	ret

00001250 <__divmodhi4>:
    1250:	97 fb       	bst	r25, 7
    1252:	09 2e       	mov	r0, r25
    1254:	07 26       	eor	r0, r23
    1256:	0a d0       	rcall	.+20     	; 0x126c <__divmodhi4_neg1>
    1258:	77 fd       	sbrc	r23, 7
    125a:	04 d0       	rcall	.+8      	; 0x1264 <__divmodhi4_neg2>
    125c:	0c d0       	rcall	.+24     	; 0x1276 <__udivmodhi4>
    125e:	06 d0       	rcall	.+12     	; 0x126c <__divmodhi4_neg1>
    1260:	00 20       	and	r0, r0
    1262:	1a f4       	brpl	.+6      	; 0x126a <__divmodhi4_exit>

00001264 <__divmodhi4_neg2>:
    1264:	70 95       	com	r23
    1266:	61 95       	neg	r22
    1268:	7f 4f       	sbci	r23, 0xFF	; 255

0000126a <__divmodhi4_exit>:
    126a:	08 95       	ret

0000126c <__divmodhi4_neg1>:
    126c:	f6 f7       	brtc	.-4      	; 0x126a <__divmodhi4_exit>
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__udivmodhi4>:
    1276:	aa 1b       	sub	r26, r26
    1278:	bb 1b       	sub	r27, r27
    127a:	51 e1       	ldi	r21, 0x11	; 17
    127c:	07 c0       	rjmp	.+14     	; 0x128c <__udivmodhi4_ep>

0000127e <__udivmodhi4_loop>:
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	a6 17       	cp	r26, r22
    1284:	b7 07       	cpc	r27, r23
    1286:	10 f0       	brcs	.+4      	; 0x128c <__udivmodhi4_ep>
    1288:	a6 1b       	sub	r26, r22
    128a:	b7 0b       	sbc	r27, r23

0000128c <__udivmodhi4_ep>:
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	5a 95       	dec	r21
    1292:	a9 f7       	brne	.-22     	; 0x127e <__udivmodhi4_loop>
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	08 95       	ret

0000129e <__prologue_saves__>:
    129e:	2f 92       	push	r2
    12a0:	3f 92       	push	r3
    12a2:	4f 92       	push	r4
    12a4:	5f 92       	push	r5
    12a6:	6f 92       	push	r6
    12a8:	7f 92       	push	r7
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	ca 1b       	sub	r28, r26
    12c8:	db 0b       	sbc	r29, r27
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	09 94       	ijmp

000012d6 <__epilogue_restores__>:
    12d6:	2a 88       	ldd	r2, Y+18	; 0x12
    12d8:	39 88       	ldd	r3, Y+17	; 0x11
    12da:	48 88       	ldd	r4, Y+16	; 0x10
    12dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    12de:	6e 84       	ldd	r6, Y+14	; 0x0e
    12e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    12e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    12e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    12e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    12e8:	b9 84       	ldd	r11, Y+9	; 0x09
    12ea:	c8 84       	ldd	r12, Y+8	; 0x08
    12ec:	df 80       	ldd	r13, Y+7	; 0x07
    12ee:	ee 80       	ldd	r14, Y+6	; 0x06
    12f0:	fd 80       	ldd	r15, Y+5	; 0x05
    12f2:	0c 81       	ldd	r16, Y+4	; 0x04
    12f4:	1b 81       	ldd	r17, Y+3	; 0x03
    12f6:	aa 81       	ldd	r26, Y+2	; 0x02
    12f8:	b9 81       	ldd	r27, Y+1	; 0x01
    12fa:	ce 0f       	add	r28, r30
    12fc:	d1 1d       	adc	r29, r1
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	ed 01       	movw	r28, r26
    130a:	08 95       	ret

0000130c <do_rand>:
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e8       	ldi	r30, 0x8B	; 139
    1312:	f9 e0       	ldi	r31, 0x09	; 9
    1314:	cc cf       	rjmp	.-104    	; 0x12ae <__prologue_saves__+0x10>
    1316:	ec 01       	movw	r28, r24
    1318:	a8 80       	ld	r10, Y
    131a:	b9 80       	ldd	r11, Y+1	; 0x01
    131c:	ca 80       	ldd	r12, Y+2	; 0x02
    131e:	db 80       	ldd	r13, Y+3	; 0x03
    1320:	a1 14       	cp	r10, r1
    1322:	b1 04       	cpc	r11, r1
    1324:	c1 04       	cpc	r12, r1
    1326:	d1 04       	cpc	r13, r1
    1328:	41 f4       	brne	.+16     	; 0x133a <do_rand+0x2e>
    132a:	84 e2       	ldi	r24, 0x24	; 36
    132c:	a8 2e       	mov	r10, r24
    132e:	89 ed       	ldi	r24, 0xD9	; 217
    1330:	b8 2e       	mov	r11, r24
    1332:	8b e5       	ldi	r24, 0x5B	; 91
    1334:	c8 2e       	mov	r12, r24
    1336:	87 e0       	ldi	r24, 0x07	; 7
    1338:	d8 2e       	mov	r13, r24
    133a:	c6 01       	movw	r24, r12
    133c:	b5 01       	movw	r22, r10
    133e:	2d e1       	ldi	r18, 0x1D	; 29
    1340:	33 ef       	ldi	r19, 0xF3	; 243
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	5a d0       	rcall	.+180    	; 0x13fc <__divmodsi4>
    1348:	27 ea       	ldi	r18, 0xA7	; 167
    134a:	31 e4       	ldi	r19, 0x41	; 65
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	36 d0       	rcall	.+108    	; 0x13be <__mulsi3>
    1352:	7b 01       	movw	r14, r22
    1354:	8c 01       	movw	r16, r24
    1356:	c6 01       	movw	r24, r12
    1358:	b5 01       	movw	r22, r10
    135a:	2d e1       	ldi	r18, 0x1D	; 29
    135c:	33 ef       	ldi	r19, 0xF3	; 243
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	4c d0       	rcall	.+152    	; 0x13fc <__divmodsi4>
    1364:	ca 01       	movw	r24, r20
    1366:	b9 01       	movw	r22, r18
    1368:	2c ee       	ldi	r18, 0xEC	; 236
    136a:	34 ef       	ldi	r19, 0xF4	; 244
    136c:	4f ef       	ldi	r20, 0xFF	; 255
    136e:	5f ef       	ldi	r21, 0xFF	; 255
    1370:	26 d0       	rcall	.+76     	; 0x13be <__mulsi3>
    1372:	6e 0d       	add	r22, r14
    1374:	7f 1d       	adc	r23, r15
    1376:	80 1f       	adc	r24, r16
    1378:	91 1f       	adc	r25, r17
    137a:	97 ff       	sbrs	r25, 7
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <do_rand+0x7a>
    137e:	61 50       	subi	r22, 0x01	; 1
    1380:	70 40       	sbci	r23, 0x00	; 0
    1382:	80 40       	sbci	r24, 0x00	; 0
    1384:	90 48       	sbci	r25, 0x80	; 128
    1386:	68 83       	st	Y, r22
    1388:	79 83       	std	Y+1, r23	; 0x01
    138a:	8a 83       	std	Y+2, r24	; 0x02
    138c:	9b 83       	std	Y+3, r25	; 0x03
    138e:	9b 01       	movw	r18, r22
    1390:	3f 77       	andi	r19, 0x7F	; 127
    1392:	c9 01       	movw	r24, r18
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	ea e0       	ldi	r30, 0x0A	; 10
    139a:	a5 cf       	rjmp	.-182    	; 0x12e6 <__epilogue_restores__+0x10>

0000139c <rand_r>:
    139c:	b7 df       	rcall	.-146    	; 0x130c <do_rand>
    139e:	08 95       	ret

000013a0 <rand>:
    13a0:	83 e7       	ldi	r24, 0x73	; 115
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	b3 df       	rcall	.-154    	; 0x130c <do_rand>
    13a6:	08 95       	ret

000013a8 <srand>:
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	80 93 73 01 	sts	0x0173, r24
    13b0:	90 93 74 01 	sts	0x0174, r25
    13b4:	a0 93 75 01 	sts	0x0175, r26
    13b8:	b0 93 76 01 	sts	0x0176, r27
    13bc:	08 95       	ret

000013be <__mulsi3>:
    13be:	62 9f       	mul	r22, r18
    13c0:	d0 01       	movw	r26, r0
    13c2:	73 9f       	mul	r23, r19
    13c4:	f0 01       	movw	r30, r0
    13c6:	82 9f       	mul	r24, r18
    13c8:	e0 0d       	add	r30, r0
    13ca:	f1 1d       	adc	r31, r1
    13cc:	64 9f       	mul	r22, r20
    13ce:	e0 0d       	add	r30, r0
    13d0:	f1 1d       	adc	r31, r1
    13d2:	92 9f       	mul	r25, r18
    13d4:	f0 0d       	add	r31, r0
    13d6:	83 9f       	mul	r24, r19
    13d8:	f0 0d       	add	r31, r0
    13da:	74 9f       	mul	r23, r20
    13dc:	f0 0d       	add	r31, r0
    13de:	65 9f       	mul	r22, r21
    13e0:	f0 0d       	add	r31, r0
    13e2:	99 27       	eor	r25, r25
    13e4:	72 9f       	mul	r23, r18
    13e6:	b0 0d       	add	r27, r0
    13e8:	e1 1d       	adc	r30, r1
    13ea:	f9 1f       	adc	r31, r25
    13ec:	63 9f       	mul	r22, r19
    13ee:	b0 0d       	add	r27, r0
    13f0:	e1 1d       	adc	r30, r1
    13f2:	f9 1f       	adc	r31, r25
    13f4:	bd 01       	movw	r22, r26
    13f6:	cf 01       	movw	r24, r30
    13f8:	11 24       	eor	r1, r1
    13fa:	08 95       	ret

000013fc <__divmodsi4>:
    13fc:	97 fb       	bst	r25, 7
    13fe:	09 2e       	mov	r0, r25
    1400:	05 26       	eor	r0, r21
    1402:	0e d0       	rcall	.+28     	; 0x1420 <__divmodsi4_neg1>
    1404:	57 fd       	sbrc	r21, 7
    1406:	04 d0       	rcall	.+8      	; 0x1410 <__divmodsi4_neg2>
    1408:	14 d0       	rcall	.+40     	; 0x1432 <__udivmodsi4>
    140a:	0a d0       	rcall	.+20     	; 0x1420 <__divmodsi4_neg1>
    140c:	00 1c       	adc	r0, r0
    140e:	38 f4       	brcc	.+14     	; 0x141e <__divmodsi4_exit>

00001410 <__divmodsi4_neg2>:
    1410:	50 95       	com	r21
    1412:	40 95       	com	r20
    1414:	30 95       	com	r19
    1416:	21 95       	neg	r18
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	4f 4f       	sbci	r20, 0xFF	; 255
    141c:	5f 4f       	sbci	r21, 0xFF	; 255

0000141e <__divmodsi4_exit>:
    141e:	08 95       	ret

00001420 <__divmodsi4_neg1>:
    1420:	f6 f7       	brtc	.-4      	; 0x141e <__divmodsi4_exit>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	08 95       	ret

00001432 <__udivmodsi4>:
    1432:	a1 e2       	ldi	r26, 0x21	; 33
    1434:	1a 2e       	mov	r1, r26
    1436:	aa 1b       	sub	r26, r26
    1438:	bb 1b       	sub	r27, r27
    143a:	fd 01       	movw	r30, r26
    143c:	0d c0       	rjmp	.+26     	; 0x1458 <__udivmodsi4_ep>

0000143e <__udivmodsi4_loop>:
    143e:	aa 1f       	adc	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	ee 1f       	adc	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	a2 17       	cp	r26, r18
    1448:	b3 07       	cpc	r27, r19
    144a:	e4 07       	cpc	r30, r20
    144c:	f5 07       	cpc	r31, r21
    144e:	20 f0       	brcs	.+8      	; 0x1458 <__udivmodsi4_ep>
    1450:	a2 1b       	sub	r26, r18
    1452:	b3 0b       	sbc	r27, r19
    1454:	e4 0b       	sbc	r30, r20
    1456:	f5 0b       	sbc	r31, r21

00001458 <__udivmodsi4_ep>:
    1458:	66 1f       	adc	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	1a 94       	dec	r1
    1462:	69 f7       	brne	.-38     	; 0x143e <__udivmodsi4_loop>
    1464:	60 95       	com	r22
    1466:	70 95       	com	r23
    1468:	80 95       	com	r24
    146a:	90 95       	com	r25
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	bd 01       	movw	r22, r26
    1472:	cf 01       	movw	r24, r30
    1474:	08 95       	ret

00001476 <_exit>:
    1476:	f8 94       	cli

00001478 <__stop_program>:
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <__stop_program>
