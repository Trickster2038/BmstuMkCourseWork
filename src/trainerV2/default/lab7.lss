
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006e  0080006e  000004b2  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d6  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000566  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000315  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000505  00000000  00000000  00000fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e6  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e1       	ldi	r30, 0x10	; 16
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	ae 36       	cpi	r26, 0x6E	; 110
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	ae e6       	ldi	r26, 0x6E	; 110
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a8 37       	cpi	r26, 0x78	; 120
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0e d0       	rcall	.+28     	; 0x72 <main>
  56:	da c1       	rjmp	.+948    	; 0x40c <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <test>:
#include "display.h"

char hh = 0;

int test(void){
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  5a:	17 ba       	out	0x17, r1	; 23
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
  5c:	85 e9       	ldi	r24, 0x95	; 149
  5e:	88 bb       	out	0x18, r24	; 24
}
  60:	08 95       	ret

00000062 <init_main>:

void init_main(void){
	DDRA=0xF0;
  62:	80 ef       	ldi	r24, 0xF0	; 240
  64:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  66:	8f e0       	ldi	r24, 0x0F	; 15
  68:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  6e:	87 bb       	out	0x17, r24	; 23
	//PORTB=0xF3;
}
  70:	08 95       	ret

00000072 <main>:

int main(void){
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
}

void init_main(void){
	DDRA=0xF0;
  76:	80 ef       	ldi	r24, 0xF0	; 240
  78:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  7a:	8f e0       	ldi	r24, 0x0F	; 15
  7c:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  82:	87 bb       	out	0x17, r24	; 23
	//test1_func();
	//PORTC=0b10011001;
	//uart_init();
	//uart_send_byte('h');
	//uart_send_byte('3');
	display_set_bytes(1,2,3,4);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	62 e0       	ldi	r22, 0x02	; 2
  88:	43 e0       	ldi	r20, 0x03	; 3
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	5b d0       	rcall	.+182    	; 0x144 <display_set_bytes>
	leds_random_line();
  8e:	a4 d0       	rcall	.+328    	; 0x1d8 <leds_random_line>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	c4 e6       	ldi	r28, 0x64	; 100
  92:	d0 e0       	ldi	r29, 0x00	; 0

	while(1) {
		leds_move_column();
  94:	7b d0       	rcall	.+246    	; 0x18c <leds_move_column>
		leds_update();
  96:	93 d0       	rcall	.+294    	; 0x1be <leds_update>
  98:	88 ee       	ldi	r24, 0xE8	; 232
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	fe 01       	movw	r30, r28
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x2a>
		_delay_ms(100);

		hh++;
  a6:	80 91 6e 00 	lds	r24, 0x006E
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 6e 00 	sts	0x006E, r24
		if(hh % 4 == 0){
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	83 70       	andi	r24, 0x03	; 3
  b4:	90 70       	andi	r25, 0x00	; 0
  b6:	89 2b       	or	r24, r25
  b8:	69 f7       	brne	.-38     	; 0x94 <main+0x22>
			leds_random_line();
  ba:	8e d0       	rcall	.+284    	; 0x1d8 <leds_random_line>
  bc:	eb cf       	rjmp	.-42     	; 0x94 <main+0x22>

000000be <test1_func>:
#include <avr/io.h>

int test1_func(void){
	DDRA=0xFF; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b10010100; // ????????? LED7, PB0-????????????? ???????? ??????
  c2:	84 e9       	ldi	r24, 0x94	; 148
  c4:	8b bb       	out	0x1b, r24	; 27
}
  c6:	08 95       	ret

000000c8 <keyboard_get_state>:
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
  c8:	10 92 6f 00 	sts	0x006F, r1
  cc:	40 91 70 00 	lds	r20, 0x0070
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	23 c0       	rjmp	.+70     	; 0x11a <keyboard_get_state+0x52>
    { 
       PORTA=portState[i];
  d4:	e5 2f       	mov	r30, r21
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e0 5a       	subi	r30, 0xA0	; 160
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	18 c0       	rjmp	.+48     	; 0x114 <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[j])==0))
  e4:	89 b3       	in	r24, 0x19	; 25
  e6:	24 2f       	mov	r18, r20
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	64 2f       	mov	r22, r20
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	f9 01       	movw	r30, r18
  f0:	ec 59       	subi	r30, 0x9C	; 156
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	90 81       	ld	r25, Z
  f6:	89 23       	and	r24, r25
  f8:	61 f4       	brne	.+24     	; 0x112 <keyboard_get_state+0x4a>
  fa:	40 93 70 00 	sts	0x0070, r20
  fe:	50 93 6f 00 	sts	0x006F, r21
          {
		  	return (j<<4) | i;
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	8a 95       	dec	r24
 10a:	e1 f7       	brne	.-8      	; 0x104 <keyboard_get_state+0x3c>
 10c:	85 2f       	mov	r24, r21
 10e:	82 2b       	or	r24, r18
 110:	08 95       	ret
 112:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[i];
       for(j=0; j<4; j++)
 114:	44 30       	cpi	r20, 0x04	; 4
 116:	31 f7       	brne	.-52     	; 0xe4 <keyboard_get_state+0x1c>
 118:	5f 5f       	subi	r21, 0xFF	; 255
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
 11a:	54 30       	cpi	r21, 0x04	; 4
 11c:	d8 f2       	brcs	.-74     	; 0xd4 <keyboard_get_state+0xc>
 11e:	40 93 70 00 	sts	0x0070, r20
 122:	50 93 6f 00 	sts	0x006F, r21
 126:	8f ef       	ldi	r24, 0xFF	; 255
		  	return (j<<4) | i;
          }
       }                          
    }
	return 0xFF;  
}
 128:	08 95       	ret

0000012a <uart_init>:
#define F_CPU 1000000UL
#define BAUD 9600
#include <util/setbaud.h>

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
 12a:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
 130:	59 9a       	sbi	0x0b, 1	; 11
#else
    UCSRA &= ~(_BV(U2X));
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	8a b9       	out	0x0a, r24	; 10
}
 13a:	08 95       	ret

0000013c <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); /* Wait until data register empty. */
 13c:	5d 9b       	sbis	0x0b, 5	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <uart_send_byte>
   UDR = c;
 140:	8c b9       	out	0x0c, r24	; 12
}
 142:	08 95       	ret

00000144 <display_set_bytes>:
char c1, c2, c3, c4;
char display_temp;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c1 = t1;
 144:	80 93 76 00 	sts	0x0076, r24
	c2 = t2;
 148:	60 93 74 00 	sts	0x0074, r22
	c3 = t3;
 14c:	40 93 77 00 	sts	0x0077, r20
	c4 = t4;
 150:	20 93 73 00 	sts	0x0073, r18
}
 154:	08 95       	ret

00000156 <display_flash_once>:

void display_flash_once(){
	display_temp = 0x0F & c1;
	PORTB = 0x10 | display_temp;
 156:	80 91 76 00 	lds	r24, 0x0076
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	88 bb       	out	0x18, r24	; 24
	display_temp = 0x0F & c2;
	PORTB = 0x20 | display_temp;
 160:	80 91 74 00 	lds	r24, 0x0074
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	80 62       	ori	r24, 0x20	; 32
 168:	88 bb       	out	0x18, r24	; 24
	display_temp = 0x0F & c3;
	PORTB = 0x40 | display_temp;
 16a:	80 91 77 00 	lds	r24, 0x0077
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	80 64       	ori	r24, 0x40	; 64
 172:	88 bb       	out	0x18, r24	; 24
	display_temp = 0x0F & c4;
 174:	80 91 73 00 	lds	r24, 0x0073
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	80 93 75 00 	sts	0x0075, r24
	PORTB = 0x80 | display_temp;
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	88 bb       	out	0x18, r24	; 24
}
 182:	08 95       	ret

00000184 <display_off>:

void display_off(){
	PORTB &= 0x0F;
 184:	88 b3       	in	r24, 0x18	; 24
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	88 bb       	out	0x18, r24	; 24
}
 18a:	08 95       	ret

0000018c <leds_move_column>:
	line = rand() % 4;
	return line;
}

void leds_move_column(){
	if(direction == 1){
 18c:	80 91 68 00 	lds	r24, 0x0068
 190:	90 91 72 00 	lds	r25, 0x0072
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	39 f4       	brne	.+14     	; 0x1a6 <leds_move_column+0x1a>
		if(column < 3){
 198:	93 30       	cpi	r25, 0x03	; 3
 19a:	10 f4       	brcc	.+4      	; 0x1a0 <leds_move_column+0x14>
			column++;
 19c:	9f 5f       	subi	r25, 0xFF	; 255
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <leds_move_column+0x20>
		} else {
			direction = 0;
 1a0:	10 92 68 00 	sts	0x0068, r1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
 1a6:	99 23       	and	r25, r25
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <leds_move_column+0x26>
			column--;
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	90 93 72 00 	sts	0x0072, r25
 1b0:	08 95       	ret
		} else {
			direction = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 68 00 	sts	0x0068, r24
			column++;
 1b8:	80 93 72 00 	sts	0x0072, r24
 1bc:	08 95       	ret

000001be <leds_update>:
		}
	}
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
 1be:	90 91 71 00 	lds	r25, 0x0071
 1c2:	90 68       	ori	r25, 0x80	; 128
 1c4:	80 91 72 00 	lds	r24, 0x0072
 1c8:	88 0f       	add	r24, r24
 1ca:	88 0f       	add	r24, r24
 1cc:	88 0f       	add	r24, r24
 1ce:	89 2b       	or	r24, r25
 1d0:	85 bb       	out	0x15, r24	; 21
}
 1d2:	08 95       	ret

000001d4 <leds_off>:

void leds_off(){
	PORTC &= 0x7F;
 1d4:	af 98       	cbi	0x15, 7	; 21
}
 1d6:	08 95       	ret

000001d8 <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 4;
 1d8:	77 d0       	rcall	.+238    	; 0x2c8 <rand>
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	03 d0       	rcall	.+6      	; 0x1e6 <__divmodhi4>
 1e0:	80 93 71 00 	sts	0x0071, r24
	return line;
}
 1e4:	08 95       	ret

000001e6 <__divmodhi4>:
 1e6:	97 fb       	bst	r25, 7
 1e8:	09 2e       	mov	r0, r25
 1ea:	07 26       	eor	r0, r23
 1ec:	0a d0       	rcall	.+20     	; 0x202 <__divmodhi4_neg1>
 1ee:	77 fd       	sbrc	r23, 7
 1f0:	04 d0       	rcall	.+8      	; 0x1fa <__divmodhi4_neg2>
 1f2:	0c d0       	rcall	.+24     	; 0x20c <__udivmodhi4>
 1f4:	06 d0       	rcall	.+12     	; 0x202 <__divmodhi4_neg1>
 1f6:	00 20       	and	r0, r0
 1f8:	1a f4       	brpl	.+6      	; 0x200 <__divmodhi4_exit>

000001fa <__divmodhi4_neg2>:
 1fa:	70 95       	com	r23
 1fc:	61 95       	neg	r22
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000200 <__divmodhi4_exit>:
 200:	08 95       	ret

00000202 <__divmodhi4_neg1>:
 202:	f6 f7       	brtc	.-4      	; 0x200 <__divmodhi4_exit>
 204:	90 95       	com	r25
 206:	81 95       	neg	r24
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	08 95       	ret

0000020c <__udivmodhi4>:
 20c:	aa 1b       	sub	r26, r26
 20e:	bb 1b       	sub	r27, r27
 210:	51 e1       	ldi	r21, 0x11	; 17
 212:	07 c0       	rjmp	.+14     	; 0x222 <__udivmodhi4_ep>

00000214 <__udivmodhi4_loop>:
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	a6 17       	cp	r26, r22
 21a:	b7 07       	cpc	r27, r23
 21c:	10 f0       	brcs	.+4      	; 0x222 <__udivmodhi4_ep>
 21e:	a6 1b       	sub	r26, r22
 220:	b7 0b       	sbc	r27, r23

00000222 <__udivmodhi4_ep>:
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	5a 95       	dec	r21
 228:	a9 f7       	brne	.-22     	; 0x214 <__udivmodhi4_loop>
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	08 95       	ret

00000234 <do_rand>:
 234:	a0 e0       	ldi	r26, 0x00	; 0
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	ef e1       	ldi	r30, 0x1F	; 31
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	96 c0       	rjmp	.+300    	; 0x36a <__prologue_saves__+0x10>
 23e:	ec 01       	movw	r28, r24
 240:	a8 80       	ld	r10, Y
 242:	b9 80       	ldd	r11, Y+1	; 0x01
 244:	ca 80       	ldd	r12, Y+2	; 0x02
 246:	db 80       	ldd	r13, Y+3	; 0x03
 248:	a1 14       	cp	r10, r1
 24a:	b1 04       	cpc	r11, r1
 24c:	c1 04       	cpc	r12, r1
 24e:	d1 04       	cpc	r13, r1
 250:	41 f4       	brne	.+16     	; 0x262 <__stack+0x3>
 252:	84 e2       	ldi	r24, 0x24	; 36
 254:	a8 2e       	mov	r10, r24
 256:	89 ed       	ldi	r24, 0xD9	; 217
 258:	b8 2e       	mov	r11, r24
 25a:	8b e5       	ldi	r24, 0x5B	; 91
 25c:	c8 2e       	mov	r12, r24
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	d8 2e       	mov	r13, r24
 262:	c6 01       	movw	r24, r12
 264:	b5 01       	movw	r22, r10
 266:	2d e1       	ldi	r18, 0x1D	; 29
 268:	33 ef       	ldi	r19, 0xF3	; 243
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	5a d0       	rcall	.+180    	; 0x324 <__divmodsi4>
 270:	27 ea       	ldi	r18, 0xA7	; 167
 272:	31 e4       	ldi	r19, 0x41	; 65
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	36 d0       	rcall	.+108    	; 0x2e6 <__mulsi3>
 27a:	7b 01       	movw	r14, r22
 27c:	8c 01       	movw	r16, r24
 27e:	c6 01       	movw	r24, r12
 280:	b5 01       	movw	r22, r10
 282:	2d e1       	ldi	r18, 0x1D	; 29
 284:	33 ef       	ldi	r19, 0xF3	; 243
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	4c d0       	rcall	.+152    	; 0x324 <__divmodsi4>
 28c:	ca 01       	movw	r24, r20
 28e:	b9 01       	movw	r22, r18
 290:	2c ee       	ldi	r18, 0xEC	; 236
 292:	34 ef       	ldi	r19, 0xF4	; 244
 294:	4f ef       	ldi	r20, 0xFF	; 255
 296:	5f ef       	ldi	r21, 0xFF	; 255
 298:	26 d0       	rcall	.+76     	; 0x2e6 <__mulsi3>
 29a:	6e 0d       	add	r22, r14
 29c:	7f 1d       	adc	r23, r15
 29e:	80 1f       	adc	r24, r16
 2a0:	91 1f       	adc	r25, r17
 2a2:	97 ff       	sbrs	r25, 7
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <__stack+0x4f>
 2a6:	61 50       	subi	r22, 0x01	; 1
 2a8:	70 40       	sbci	r23, 0x00	; 0
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 48       	sbci	r25, 0x80	; 128
 2ae:	68 83       	st	Y, r22
 2b0:	79 83       	std	Y+1, r23	; 0x01
 2b2:	8a 83       	std	Y+2, r24	; 0x02
 2b4:	9b 83       	std	Y+3, r25	; 0x03
 2b6:	9b 01       	movw	r18, r22
 2b8:	3f 77       	andi	r19, 0x7F	; 127
 2ba:	c9 01       	movw	r24, r18
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	ea e0       	ldi	r30, 0x0A	; 10
 2c2:	6f c0       	rjmp	.+222    	; 0x3a2 <__epilogue_restores__+0x10>

000002c4 <rand_r>:
 2c4:	b7 df       	rcall	.-146    	; 0x234 <do_rand>
 2c6:	08 95       	ret

000002c8 <rand>:
 2c8:	89 e6       	ldi	r24, 0x69	; 105
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	b3 df       	rcall	.-154    	; 0x234 <do_rand>
 2ce:	08 95       	ret

000002d0 <srand>:
 2d0:	a0 e0       	ldi	r26, 0x00	; 0
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	80 93 69 00 	sts	0x0069, r24
 2d8:	90 93 6a 00 	sts	0x006A, r25
 2dc:	a0 93 6b 00 	sts	0x006B, r26
 2e0:	b0 93 6c 00 	sts	0x006C, r27
 2e4:	08 95       	ret

000002e6 <__mulsi3>:
 2e6:	62 9f       	mul	r22, r18
 2e8:	d0 01       	movw	r26, r0
 2ea:	73 9f       	mul	r23, r19
 2ec:	f0 01       	movw	r30, r0
 2ee:	82 9f       	mul	r24, r18
 2f0:	e0 0d       	add	r30, r0
 2f2:	f1 1d       	adc	r31, r1
 2f4:	64 9f       	mul	r22, r20
 2f6:	e0 0d       	add	r30, r0
 2f8:	f1 1d       	adc	r31, r1
 2fa:	92 9f       	mul	r25, r18
 2fc:	f0 0d       	add	r31, r0
 2fe:	83 9f       	mul	r24, r19
 300:	f0 0d       	add	r31, r0
 302:	74 9f       	mul	r23, r20
 304:	f0 0d       	add	r31, r0
 306:	65 9f       	mul	r22, r21
 308:	f0 0d       	add	r31, r0
 30a:	99 27       	eor	r25, r25
 30c:	72 9f       	mul	r23, r18
 30e:	b0 0d       	add	r27, r0
 310:	e1 1d       	adc	r30, r1
 312:	f9 1f       	adc	r31, r25
 314:	63 9f       	mul	r22, r19
 316:	b0 0d       	add	r27, r0
 318:	e1 1d       	adc	r30, r1
 31a:	f9 1f       	adc	r31, r25
 31c:	bd 01       	movw	r22, r26
 31e:	cf 01       	movw	r24, r30
 320:	11 24       	eor	r1, r1
 322:	08 95       	ret

00000324 <__divmodsi4>:
 324:	97 fb       	bst	r25, 7
 326:	09 2e       	mov	r0, r25
 328:	05 26       	eor	r0, r21
 32a:	0e d0       	rcall	.+28     	; 0x348 <__divmodsi4_neg1>
 32c:	57 fd       	sbrc	r21, 7
 32e:	04 d0       	rcall	.+8      	; 0x338 <__divmodsi4_neg2>
 330:	4b d0       	rcall	.+150    	; 0x3c8 <__udivmodsi4>
 332:	0a d0       	rcall	.+20     	; 0x348 <__divmodsi4_neg1>
 334:	00 1c       	adc	r0, r0
 336:	38 f4       	brcc	.+14     	; 0x346 <__divmodsi4_exit>

00000338 <__divmodsi4_neg2>:
 338:	50 95       	com	r21
 33a:	40 95       	com	r20
 33c:	30 95       	com	r19
 33e:	21 95       	neg	r18
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	4f 4f       	sbci	r20, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255

00000346 <__divmodsi4_exit>:
 346:	08 95       	ret

00000348 <__divmodsi4_neg1>:
 348:	f6 f7       	brtc	.-4      	; 0x346 <__divmodsi4_exit>
 34a:	90 95       	com	r25
 34c:	80 95       	com	r24
 34e:	70 95       	com	r23
 350:	61 95       	neg	r22
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	8f 4f       	sbci	r24, 0xFF	; 255
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__prologue_saves__>:
 35a:	2f 92       	push	r2
 35c:	3f 92       	push	r3
 35e:	4f 92       	push	r4
 360:	5f 92       	push	r5
 362:	6f 92       	push	r6
 364:	7f 92       	push	r7
 366:	8f 92       	push	r8
 368:	9f 92       	push	r9
 36a:	af 92       	push	r10
 36c:	bf 92       	push	r11
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	ca 1b       	sub	r28, r26
 384:	db 0b       	sbc	r29, r27
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	09 94       	ijmp

00000392 <__epilogue_restores__>:
 392:	2a 88       	ldd	r2, Y+18	; 0x12
 394:	39 88       	ldd	r3, Y+17	; 0x11
 396:	48 88       	ldd	r4, Y+16	; 0x10
 398:	5f 84       	ldd	r5, Y+15	; 0x0f
 39a:	6e 84       	ldd	r6, Y+14	; 0x0e
 39c:	7d 84       	ldd	r7, Y+13	; 0x0d
 39e:	8c 84       	ldd	r8, Y+12	; 0x0c
 3a0:	9b 84       	ldd	r9, Y+11	; 0x0b
 3a2:	aa 84       	ldd	r10, Y+10	; 0x0a
 3a4:	b9 84       	ldd	r11, Y+9	; 0x09
 3a6:	c8 84       	ldd	r12, Y+8	; 0x08
 3a8:	df 80       	ldd	r13, Y+7	; 0x07
 3aa:	ee 80       	ldd	r14, Y+6	; 0x06
 3ac:	fd 80       	ldd	r15, Y+5	; 0x05
 3ae:	0c 81       	ldd	r16, Y+4	; 0x04
 3b0:	1b 81       	ldd	r17, Y+3	; 0x03
 3b2:	aa 81       	ldd	r26, Y+2	; 0x02
 3b4:	b9 81       	ldd	r27, Y+1	; 0x01
 3b6:	ce 0f       	add	r28, r30
 3b8:	d1 1d       	adc	r29, r1
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	ed 01       	movw	r28, r26
 3c6:	08 95       	ret

000003c8 <__udivmodsi4>:
 3c8:	a1 e2       	ldi	r26, 0x21	; 33
 3ca:	1a 2e       	mov	r1, r26
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	fd 01       	movw	r30, r26
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__udivmodsi4_ep>

000003d4 <__udivmodsi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	ee 1f       	adc	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	a2 17       	cp	r26, r18
 3de:	b3 07       	cpc	r27, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__udivmodsi4_ep>
 3e6:	a2 1b       	sub	r26, r18
 3e8:	b3 0b       	sbc	r27, r19
 3ea:	e4 0b       	sbc	r30, r20
 3ec:	f5 0b       	sbc	r31, r21

000003ee <__udivmodsi4_ep>:
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 94       	dec	r1
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <__udivmodsi4_loop>
 3fa:	60 95       	com	r22
 3fc:	70 95       	com	r23
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	bd 01       	movw	r22, r26
 408:	cf 01       	movw	r24, r30
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
