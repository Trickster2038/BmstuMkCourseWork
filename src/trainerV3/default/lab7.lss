
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000015a4  00001638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800178  00800178  00001750  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000050f  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a44  00000000  00000000  00001ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001643  00000000  00000000  00004903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019d1  00000000  00000000  00005f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00007918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058c  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba3  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00008d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
       c:	2a c0       	rjmp	.+84     	; 0x62 <__vector_6>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
      12:	b3 c1       	rjmp	.+870    	; 0x37a <__vector_9>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	11 e0       	ldi	r17, 0x01	; 1
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e4 ea       	ldi	r30, 0xA4	; 164
      3e:	f5 e1       	ldi	r31, 0x15	; 21
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a8 37       	cpi	r26, 0x78	; 120
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a8 e7       	ldi	r26, 0x78	; 120
      50:	b1 e0       	ldi	r27, 0x01	; 1
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a0 3b       	cpi	r26, 0xB0	; 176
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	52 d0       	rcall	.+164    	; 0x102 <main>
      5e:	a0 ca       	rjmp	.-2752   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <__vector_6>:
long sum_timer_ms = 0;

long results[K];

ISR (TIMER1_COMPA_vect)
{
      62:	1f 92       	push	r1
      64:	0f 92       	push	r0
      66:	0f b6       	in	r0, 0x3f	; 63
      68:	0f 92       	push	r0
      6a:	11 24       	eor	r1, r1
      6c:	8f 93       	push	r24
      6e:	9f 93       	push	r25
      70:	af 93       	push	r26
      72:	bf 93       	push	r27
  timer_ms++;
      74:	80 91 7d 01 	lds	r24, 0x017D
      78:	90 91 7e 01 	lds	r25, 0x017E
      7c:	a0 91 7f 01 	lds	r26, 0x017F
      80:	b0 91 80 01 	lds	r27, 0x0180
      84:	01 96       	adiw	r24, 0x01	; 1
      86:	a1 1d       	adc	r26, r1
      88:	b1 1d       	adc	r27, r1
      8a:	80 93 7d 01 	sts	0x017D, r24
      8e:	90 93 7e 01 	sts	0x017E, r25
      92:	a0 93 7f 01 	sts	0x017F, r26
      96:	b0 93 80 01 	sts	0x0180, r27
  timer_control++; // for debug
      9a:	80 91 97 01 	lds	r24, 0x0197
      9e:	90 91 98 01 	lds	r25, 0x0198
      a2:	a0 91 99 01 	lds	r26, 0x0199
      a6:	b0 91 9a 01 	lds	r27, 0x019A
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	a1 1d       	adc	r26, r1
      ae:	b1 1d       	adc	r27, r1
      b0:	80 93 97 01 	sts	0x0197, r24
      b4:	90 93 98 01 	sts	0x0198, r25
      b8:	a0 93 99 01 	sts	0x0199, r26
      bc:	b0 93 9a 01 	sts	0x019A, r27
  TCNT1=0; //clear ticks
      c0:	1d bc       	out	0x2d, r1	; 45
      c2:	1c bc       	out	0x2c, r1	; 44
}
      c4:	bf 91       	pop	r27
      c6:	af 91       	pop	r26
      c8:	9f 91       	pop	r25
      ca:	8f 91       	pop	r24
      cc:	0f 90       	pop	r0
      ce:	0f be       	out	0x3f, r0	; 63
      d0:	0f 90       	pop	r0
      d2:	1f 90       	pop	r1
      d4:	18 95       	reti

000000d6 <init_main>:
		display_flash_once();
	}
}

void init_main(void){
	timer1_init();
      d6:	6a d3       	rcall	.+1748   	; 0x7ac <timer1_init>
	DDRA=0xF0;
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F; // resistors on buttons
      dc:	8f e0       	ldi	r24, 0x0F	; 15
      de:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF; // PORTC - OUTPUT
      e0:	8f ef       	ldi	r24, 0xFF	; 255
      e2:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF; // PORTB - OUTPUT
      e4:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; // PORTD - OUTPUT
      e6:	81 bb       	out	0x11, r24	; 17
	display_init_timer0();
      e8:	dd d2       	rcall	.+1466   	; 0x6a4 <display_init_timer0>
	uart_init();
      ea:	9f d1       	rcall	.+830    	; 0x42a <uart_init>
	sei();
      ec:	78 94       	sei

	display_off();
      ee:	c4 d2       	rcall	.+1416   	; 0x678 <display_off>
	led_line = leds_random_line();
      f0:	05 d3       	rcall	.+1546   	; 0x6fc <leds_random_line>
      f2:	80 93 7b 01 	sts	0x017B, r24
	display_set_long(0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	5b d2       	rcall	.+1206   	; 0x5b6 <display_set_long>
}
     100:	08 95       	ret

00000102 <main>:

int main(){
     102:	9f 92       	push	r9
     104:	af 92       	push	r10
     106:	bf 92       	push	r11
     108:	cf 92       	push	r12
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
	init_main();
     118:	de df       	rcall	.-68     	; 0xd6 <init_main>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     11a:	c4 e6       	ldi	r28, 0x64	; 100
     11c:	d0 e0       	ldi	r29, 0x00	; 0

			_delay_ms(delay_amount);	
		} else {
			if((key == 9) && (lock_reset == 0)){
				display_set_long(0);
				display_on = 1;
     11e:	99 24       	eor	r9, r9
     120:	93 94       	inc	r9

int main(){
	init_main();

	while(1){
		key = keyboard_get_state();
     122:	52 d1       	rcall	.+676    	; 0x3c8 <keyboard_get_state>
     124:	98 2f       	mov	r25, r24
     126:	80 93 7a 01 	sts	0x017A, r24

		if(active == 1){
     12a:	80 91 7c 01 	lds	r24, 0x017C
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	09 f0       	breq	.+2      	; 0x134 <main+0x32>
     132:	de c0       	rjmp	.+444    	; 0x2f0 <__stack+0x91>
			leds_move_column();
     134:	bd d2       	rcall	.+1402   	; 0x6b0 <leds_move_column>
			leds_update();
     136:	d5 d2       	rcall	.+1450   	; 0x6e2 <leds_update>

			if((key != 0) && (key <= 8)){
     138:	90 91 7a 01 	lds	r25, 0x017A
     13c:	89 2f       	mov	r24, r25
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	88 30       	cpi	r24, 0x08	; 8
     142:	08 f0       	brcs	.+2      	; 0x146 <main+0x44>
     144:	53 c0       	rjmp	.+166    	; 0x1ec <main+0xea>
				if(key == led_line){
     146:	80 91 7b 01 	lds	r24, 0x017B
     14a:	98 17       	cp	r25, r24
     14c:	09 f0       	breq	.+2      	; 0x150 <main+0x4e>
     14e:	4b c0       	rjmp	.+150    	; 0x1e6 <main+0xe4>
					timer_ms_buff = timer_ms; // not really necessary
     150:	60 91 7d 01 	lds	r22, 0x017D
     154:	70 91 7e 01 	lds	r23, 0x017E
     158:	80 91 7f 01 	lds	r24, 0x017F
     15c:	90 91 80 01 	lds	r25, 0x0180
     160:	60 93 9b 01 	sts	0x019B, r22
     164:	70 93 9c 01 	sts	0x019C, r23
     168:	80 93 9d 01 	sts	0x019D, r24
     16c:	90 93 9e 01 	sts	0x019E, r25
					display_set_long(timer_ms_buff);
     170:	22 d2       	rcall	.+1092   	; 0x5b6 <display_set_long>
					results[(int) tries_counter] = timer_ms_buff;
     172:	60 91 81 01 	lds	r22, 0x0181
     176:	20 91 9b 01 	lds	r18, 0x019B
     17a:	30 91 9c 01 	lds	r19, 0x019C
     17e:	40 91 9d 01 	lds	r20, 0x019D
     182:	50 91 9e 01 	lds	r21, 0x019E
     186:	e6 2f       	mov	r30, r22
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	ee 0f       	add	r30, r30
     18c:	ff 1f       	adc	r31, r31
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	e5 57       	subi	r30, 0x75	; 117
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	20 83       	st	Z, r18
     198:	31 83       	std	Z+1, r19	; 0x01
     19a:	42 83       	std	Z+2, r20	; 0x02
     19c:	53 83       	std	Z+3, r21	; 0x03
					sum_timer_ms += timer_ms_buff;
     19e:	80 91 82 01 	lds	r24, 0x0182
     1a2:	90 91 83 01 	lds	r25, 0x0183
     1a6:	a0 91 84 01 	lds	r26, 0x0184
     1aa:	b0 91 85 01 	lds	r27, 0x0185
     1ae:	82 0f       	add	r24, r18
     1b0:	93 1f       	adc	r25, r19
     1b2:	a4 1f       	adc	r26, r20
     1b4:	b5 1f       	adc	r27, r21
     1b6:	80 93 82 01 	sts	0x0182, r24
     1ba:	90 93 83 01 	sts	0x0183, r25
     1be:	a0 93 84 01 	sts	0x0184, r26
     1c2:	b0 93 85 01 	sts	0x0185, r27
					tries_counter++;
     1c6:	6f 5f       	subi	r22, 0xFF	; 255
     1c8:	60 93 81 01 	sts	0x0181, r22
					timer_ms = 0;
     1cc:	10 92 7d 01 	sts	0x017D, r1
     1d0:	10 92 7e 01 	sts	0x017E, r1
     1d4:	10 92 7f 01 	sts	0x017F, r1
     1d8:	10 92 80 01 	sts	0x0180, r1
					led_line = leds_random_line();
     1dc:	8f d2       	rcall	.+1310   	; 0x6fc <leds_random_line>
     1de:	80 93 7b 01 	sts	0x017B, r24
					leds_update(); // why necessary here?
     1e2:	7f d2       	rcall	.+1278   	; 0x6e2 <leds_update>
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <main+0xea>
				} else {
					buzzer_beep(BUZZER_DELAY);
     1e6:	82 e3       	ldi	r24, 0x32	; 50
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	90 d2       	rcall	.+1312   	; 0x70c <buzzer_beep>
				}
			} 

			if(key == 9){
     1ec:	80 91 7a 01 	lds	r24, 0x017A
     1f0:	89 30       	cpi	r24, 0x09	; 9
     1f2:	69 f4       	brne	.+26     	; 0x20e <main+0x10c>
				display_on = 0;
     1f4:	10 92 79 01 	sts	0x0179, r1
				display_off();
     1f8:	3f d2       	rcall	.+1150   	; 0x678 <display_off>
				active = 0;
     1fa:	10 92 7c 01 	sts	0x017C, r1

				leds_off();
     1fe:	7c d2       	rcall	.+1272   	; 0x6f8 <leds_off>
     200:	88 eb       	ldi	r24, 0xB8	; 184
     202:	9b e0       	ldi	r25, 0x0B	; 11
     204:	fe 01       	movw	r30, r28
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <main+0x104>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x102>
				_delay_ms(OTHER_KEYS_DELAY);
			} 

			if((key == 10) && (delay_amount > MIN_DELAY)){
     20e:	80 91 7a 01 	lds	r24, 0x017A
     212:	8a 30       	cpi	r24, 0x0A	; 10
     214:	49 f4       	brne	.+18     	; 0x228 <main+0x126>
     216:	80 91 60 00 	lds	r24, 0x0060
     21a:	90 91 61 00 	lds	r25, 0x0061
     21e:	85 36       	cpi	r24, 0x65	; 101
     220:	91 05       	cpc	r25, r1
     222:	8c f0       	brlt	.+34     	; 0x246 <main+0x144>
				delay_amount -= DELAY_STEP;
     224:	0a 97       	sbiw	r24, 0x0a	; 10
     226:	0b c0       	rjmp	.+22     	; 0x23e <main+0x13c>
			}

			if((key == 11) && (delay_amount < MAX_DELAY)){
     228:	8b 30       	cpi	r24, 0x0B	; 11
     22a:	69 f4       	brne	.+26     	; 0x246 <main+0x144>
     22c:	80 91 60 00 	lds	r24, 0x0060
     230:	90 91 61 00 	lds	r25, 0x0061
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	84 3f       	cpi	r24, 0xF4	; 244
     238:	92 07       	cpc	r25, r18
     23a:	2c f4       	brge	.+10     	; 0x246 <main+0x144>
				delay_amount += DELAY_STEP;
     23c:	0a 96       	adiw	r24, 0x0a	; 10
     23e:	90 93 61 00 	sts	0x0061, r25
     242:	80 93 60 00 	sts	0x0060, r24
			}
			
			if(tries_counter == K){
     246:	80 91 81 01 	lds	r24, 0x0181
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	99 f4       	brne	.+38     	; 0x274 <__stack+0x15>
				display_set_long(sum_timer_ms / K);
     24e:	60 91 82 01 	lds	r22, 0x0182
     252:	70 91 83 01 	lds	r23, 0x0183
     256:	80 91 84 01 	lds	r24, 0x0184
     25a:	90 91 85 01 	lds	r25, 0x0185
     25e:	23 e0       	ldi	r18, 0x03	; 3
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	bb d8       	rcall	.-3722   	; 0xfffff3de <__eeprom_end+0xff7ef3de>
     268:	ca 01       	movw	r24, r20
     26a:	b9 01       	movw	r22, r18
     26c:	a4 d1       	rcall	.+840    	; 0x5b6 <display_set_long>
				leds_off();
     26e:	44 d2       	rcall	.+1160   	; 0x6f8 <leds_off>
				active = 0;
     270:	10 92 7c 01 	sts	0x017C, r1
			}			

			_delay_ms(delay_amount);	
     274:	60 91 60 00 	lds	r22, 0x0060
     278:	70 91 61 00 	lds	r23, 0x0061
     27c:	88 27       	eor	r24, r24
     27e:	77 fd       	sbrc	r23, 7
     280:	80 95       	com	r24
     282:	98 2f       	mov	r25, r24
     284:	da d5       	rcall	.+2996   	; 0xe3a <__floatsisf>
     286:	5b 01       	movw	r10, r22
     288:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	4a e7       	ldi	r20, 0x7A	; 122
     290:	54 e4       	ldi	r21, 0x44	; 68
     292:	5d d4       	rcall	.+2234   	; 0xb4e <__mulsf3>
     294:	7b 01       	movw	r14, r22
     296:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e8       	ldi	r20, 0x80	; 128
     29e:	5f e3       	ldi	r21, 0x3F	; 63
     2a0:	a1 d5       	rcall	.+2882   	; 0xde4 <__ltsf2>
     2a2:	88 23       	and	r24, r24
     2a4:	1c f4       	brge	.+6      	; 0x2ac <__stack+0x4d>
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	1e c0       	rjmp	.+60     	; 0x2e8 <__stack+0x89>
		__ticks = 1;
	else if (__tmp > 65535)
     2ac:	c8 01       	movw	r24, r16
     2ae:	b7 01       	movw	r22, r14
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	3f ef       	ldi	r19, 0xFF	; 255
     2b4:	4f e7       	ldi	r20, 0x7F	; 127
     2b6:	57 e4       	ldi	r21, 0x47	; 71
     2b8:	3f d5       	rcall	.+2686   	; 0xd38 <__gtsf2>
     2ba:	18 16       	cp	r1, r24
     2bc:	94 f4       	brge	.+36     	; 0x2e2 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2be:	c6 01       	movw	r24, r12
     2c0:	b5 01       	movw	r22, r10
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e2       	ldi	r20, 0x20	; 32
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	41 d4       	rcall	.+2178   	; 0xb4e <__mulsf3>
     2cc:	7c d2       	rcall	.+1272   	; 0x7c6 <__fixunssfsi>
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <__stack+0x7b>
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <__stack+0x73>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d6:	61 50       	subi	r22, 0x01	; 1
     2d8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2da:	61 15       	cp	r22, r1
     2dc:	71 05       	cpc	r23, r1
     2de:	c1 f7       	brne	.-16     	; 0x2d0 <__stack+0x71>
     2e0:	20 cf       	rjmp	.-448    	; 0x122 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e2:	c8 01       	movw	r24, r16
     2e4:	b7 01       	movw	r22, r14
     2e6:	6f d2       	rcall	.+1246   	; 0x7c6 <__fixunssfsi>
     2e8:	cb 01       	movw	r24, r22
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__stack+0x8b>
     2ee:	19 cf       	rjmp	.-462    	; 0x122 <main+0x20>
		} else {
			if((key == 9) && (lock_reset == 0)){
     2f0:	99 30       	cpi	r25, 0x09	; 9
     2f2:	11 f5       	brne	.+68     	; 0x338 <__stack+0xd9>
     2f4:	80 91 78 01 	lds	r24, 0x0178
     2f8:	88 23       	and	r24, r24
     2fa:	f1 f4       	brne	.+60     	; 0x338 <__stack+0xd9>
				display_set_long(0);
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	58 d1       	rcall	.+688    	; 0x5b6 <display_set_long>
				display_on = 1;
     306:	90 92 79 01 	sts	0x0179, r9
				active = 1;
     30a:	90 92 7c 01 	sts	0x017C, r9

				tries_counter = 0;
     30e:	10 92 81 01 	sts	0x0181, r1
				sum_timer_ms = 0;
     312:	10 92 82 01 	sts	0x0182, r1
     316:	10 92 83 01 	sts	0x0183, r1
     31a:	10 92 84 01 	sts	0x0184, r1
     31e:	10 92 85 01 	sts	0x0185, r1
				timer_ms = 0;
     322:	10 92 7d 01 	sts	0x017D, r1
     326:	10 92 7e 01 	sts	0x017E, r1
     32a:	10 92 7f 01 	sts	0x017F, r1
     32e:	10 92 80 01 	sts	0x0180, r1
				led_line = leds_random_line(); // refresh line after reset
     332:	e4 d1       	rcall	.+968    	; 0x6fc <leds_random_line>
     334:	80 93 7b 01 	sts	0x017B, r24
			} 

			if(key == 12){
     338:	80 91 7a 01 	lds	r24, 0x017A
     33c:	8c 30       	cpi	r24, 0x0C	; 12
     33e:	a9 f4       	brne	.+42     	; 0x36a <__stack+0x10b>
				if(tries_counter == K){
     340:	80 91 81 01 	lds	r24, 0x0181
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	89 f4       	brne	.+34     	; 0x36a <__stack+0x10b>
					uart_send_data(results, K, sum_timer_ms / K);
     348:	60 91 82 01 	lds	r22, 0x0182
     34c:	70 91 83 01 	lds	r23, 0x0183
     350:	80 91 84 01 	lds	r24, 0x0184
     354:	90 91 85 01 	lds	r25, 0x0185
     358:	23 e0       	ldi	r18, 0x03	; 3
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	3e d8       	rcall	.-3972   	; 0xfffff3de <__eeprom_end+0xff7ef3de>
     362:	8b e8       	ldi	r24, 0x8B	; 139
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	63 e0       	ldi	r22, 0x03	; 3
     368:	c0 d0       	rcall	.+384    	; 0x4ea <uart_send_data>
     36a:	88 eb       	ldi	r24, 0xB8	; 184
     36c:	9b e0       	ldi	r25, 0x0B	; 11
     36e:	fe 01       	movw	r30, r28
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <__stack+0x111>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     374:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     376:	d9 f7       	brne	.-10     	; 0x36e <__stack+0x10f>
     378:	d4 ce       	rjmp	.-600    	; 0x122 <main+0x20>

0000037a <__vector_9>:
  timer_ms++;
  timer_control++; // for debug
  TCNT1=0; //clear ticks
}

ISR (TIMER0_OVF_vect){
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	2f 93       	push	r18
     386:	3f 93       	push	r19
     388:	4f 93       	push	r20
     38a:	5f 93       	push	r21
     38c:	6f 93       	push	r22
     38e:	7f 93       	push	r23
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	af 93       	push	r26
     396:	bf 93       	push	r27
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
	if(display_on == 1){
     39c:	80 91 79 01 	lds	r24, 0x0179
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <__vector_9+0x2c>
		display_flash_once();
     3a4:	6d d1       	rcall	.+730    	; 0x680 <display_flash_once>
	}
}
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	7f 91       	pop	r23
     3b4:	6f 91       	pop	r22
     3b6:	5f 91       	pop	r21
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <keyboard_get_state>:
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     3c8:	10 92 86 01 	sts	0x0186, r1
     3cc:	40 91 87 01 	lds	r20, 0x0187
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	23 c0       	rjmp	.+70     	; 0x41a <keyboard_get_state+0x52>
    { 
       PORTA=portState[(int) i];
     3d4:	e5 2f       	mov	r30, r21
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	ee 59       	subi	r30, 0x9E	; 158
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	80 81       	ld	r24, Z
     3de:	8b bb       	out	0x1b, r24	; 27
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	18 c0       	rjmp	.+48     	; 0x414 <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[(int) j])==0))
     3e4:	89 b3       	in	r24, 0x19	; 25
     3e6:	24 2f       	mov	r18, r20
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	64 2f       	mov	r22, r20
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	f9 01       	movw	r30, r18
     3f0:	ea 59       	subi	r30, 0x9A	; 154
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	90 81       	ld	r25, Z
     3f6:	89 23       	and	r24, r25
     3f8:	61 f4       	brne	.+24     	; 0x412 <keyboard_get_state+0x4a>
     3fa:	40 93 87 01 	sts	0x0187, r20
     3fe:	50 93 86 01 	sts	0x0186, r21
          {
		  	return (j*4 + i + 1);
     402:	85 2f       	mov	r24, r21
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	22 0f       	add	r18, r18
     408:	33 1f       	adc	r19, r19
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	82 0f       	add	r24, r18
     410:	08 95       	ret
     412:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[(int) i];
       for(j=0; j<4; j++)
     414:	44 30       	cpi	r20, 0x04	; 4
     416:	31 f7       	brne	.-52     	; 0x3e4 <keyboard_get_state+0x1c>
     418:	5f 5f       	subi	r21, 0xFF	; 255
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     41a:	54 30       	cpi	r21, 0x04	; 4
     41c:	d8 f2       	brcs	.-74     	; 0x3d4 <keyboard_get_state+0xc>
     41e:	40 93 87 01 	sts	0x0187, r20
     422:	50 93 86 01 	sts	0x0186, r21
     426:	80 e0       	ldi	r24, 0x00	; 0
		  	return (j*4 + i + 1);
          }
       }                          
    }
	return 0;  
}
     428:	08 95       	ret

0000042a <uart_init>:
long divider;
char cnt;
char i;

void uart_init() {
    UBRRH = UBRRH_VALUE;
     42a:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
     42c:	89 e1       	ldi	r24, 0x19	; 25
     42e:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= (1 << U2X);
#else
    UCSRA &= ~(1 << U2X);
     430:	59 98       	cbi	0x0b, 1	; 11
#endif

    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
     432:	86 e0       	ldi	r24, 0x06	; 6
     434:	80 bd       	out	0x20, r24	; 32
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
     436:	88 e1       	ldi	r24, 0x18	; 24
     438:	8a b9       	out	0x0a, r24	; 10
}
     43a:	08 95       	ret

0000043c <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     43c:	5d 9b       	sbis	0x0b, 5	; 11
     43e:	fe cf       	rjmp	.-4      	; 0x43c <uart_send_byte>
   UDR = c;
     440:	8c b9       	out	0x0c, r24	; 12
}
     442:	08 95       	ret

00000444 <uart_send_long>:

void uart_send_long(long data) {
     444:	af 92       	push	r10
     446:	bf 92       	push	r11
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	5b 01       	movw	r10, r22
     456:	6c 01       	movw	r12, r24
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	e8 2e       	mov	r14, r24
     45c:	f1 2c       	mov	r15, r1
     45e:	01 2d       	mov	r16, r1
     460:	11 2d       	mov	r17, r1
	divider = 1; 
	while((divider*10) < data){
     462:	c8 01       	movw	r24, r16
     464:	b7 01       	movw	r22, r14
     466:	2a e0       	ldi	r18, 0x0A	; 10
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	85 d7       	rcall	.+3850   	; 0x137a <__mulsi3>
     470:	6a 15       	cp	r22, r10
     472:	7b 05       	cpc	r23, r11
     474:	8c 05       	cpc	r24, r12
     476:	9d 05       	cpc	r25, r13
     478:	f4 f4       	brge	.+60     	; 0x4b6 <uart_send_long+0x72>
     47a:	7b 01       	movw	r14, r22
     47c:	8c 01       	movw	r16, r24
     47e:	f1 cf       	rjmp	.-30     	; 0x462 <uart_send_long+0x1e>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     480:	5d 9b       	sbis	0x0b, 5	; 11
     482:	fe cf       	rjmp	.-4      	; 0x480 <uart_send_long+0x3c>
	divider = 1; 
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
     484:	c6 01       	movw	r24, r12
     486:	b5 01       	movw	r22, r10
     488:	a8 01       	movw	r20, r16
     48a:	97 01       	movw	r18, r14
     48c:	a8 d7       	rcall	.+3920   	; 0x13de <__divmodsi4>
     48e:	ca 01       	movw	r24, r20
     490:	b9 01       	movw	r22, r18
     492:	2a e0       	ldi	r18, 0x0A	; 10
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	a1 d7       	rcall	.+3906   	; 0x13de <__divmodsi4>
     49c:	60 5d       	subi	r22, 0xD0	; 208
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     49e:	6c b9       	out	0x0c, r22	; 12
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;	
     4a0:	c8 01       	movw	r24, r16
     4a2:	b7 01       	movw	r22, r14
     4a4:	2a e0       	ldi	r18, 0x0A	; 10
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	98 d7       	rcall	.+3888   	; 0x13de <__divmodsi4>
     4ae:	c9 01       	movw	r24, r18
     4b0:	da 01       	movw	r26, r20
     4b2:	7c 01       	movw	r14, r24
     4b4:	8d 01       	movw	r16, r26
void uart_send_long(long data) {
	divider = 1; 
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
     4b6:	1e 14       	cp	r1, r14
     4b8:	1f 04       	cpc	r1, r15
     4ba:	10 06       	cpc	r1, r16
     4bc:	11 06       	cpc	r1, r17
     4be:	04 f3       	brlt	.-64     	; 0x480 <uart_send_long+0x3c>
     4c0:	e0 92 a4 01 	sts	0x01A4, r14
     4c4:	f0 92 a5 01 	sts	0x01A5, r15
     4c8:	00 93 a6 01 	sts	0x01A6, r16
     4cc:	10 93 a7 01 	sts	0x01A7, r17
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     4d0:	5d 9b       	sbis	0x0b, 5	; 11
     4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <uart_send_long+0x8c>
   UDR = c;
     4d4:	80 e2       	ldi	r24, 0x20	; 32
     4d6:	8c b9       	out	0x0c, r24	; 12
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;	
	}
	uart_send_byte(' ');
}
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	08 95       	ret

000004ea <uart_send_data>:

void uart_send_data(long* res_array, char range, long average) {
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
     4fe:	d6 2e       	mov	r13, r22
     500:	79 01       	movw	r14, r18
     502:	8a 01       	movw	r16, r20
	for(i=0; i<range; i++){
     504:	10 92 86 01 	sts	0x0186, r1
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     508:	3a e3       	ldi	r19, 0x3A	; 58
     50a:	b3 2e       	mov	r11, r19
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     50c:	2a e0       	ldi	r18, 0x0A	; 10
     50e:	c2 2e       	mov	r12, r18
     510:	1c c0       	rjmp	.+56     	; 0x54a <uart_send_data+0x60>
     512:	5d 9b       	sbis	0x0b, 5	; 11
     514:	fe cf       	rjmp	.-4      	; 0x512 <uart_send_data+0x28>
	uart_send_byte(' ');
}

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
     516:	ef 5c       	subi	r30, 0xCF	; 207
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     518:	ec b9       	out	0x0c, r30	; 12
     51a:	e1 53       	subi	r30, 0x31	; 49
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     51c:	5d 9b       	sbis	0x0b, 5	; 11
     51e:	fe cf       	rjmp	.-4      	; 0x51c <uart_send_data+0x32>
   UDR = c;
     520:	bc b8       	out	0x0c, r11	; 12

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
		uart_send_byte(':');
		uart_send_long(res_array[(int) i]);
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	ee 0f       	add	r30, r30
     526:	ff 1f       	adc	r31, r31
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	ec 0f       	add	r30, r28
     52e:	fd 1f       	adc	r31, r29
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	85 df       	rcall	.-246    	; 0x444 <uart_send_long>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     53a:	5d 9b       	sbis	0x0b, 5	; 11
     53c:	fe cf       	rjmp	.-4      	; 0x53a <uart_send_data+0x50>
   UDR = c;
     53e:	cc b8       	out	0x0c, r12	; 12
	}
	uart_send_byte(' ');
}

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
     540:	80 91 86 01 	lds	r24, 0x0186
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 86 01 	sts	0x0186, r24
     54a:	e0 91 86 01 	lds	r30, 0x0186
     54e:	ed 15       	cp	r30, r13
     550:	00 f3       	brcs	.-64     	; 0x512 <uart_send_data+0x28>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     552:	5d 9b       	sbis	0x0b, 5	; 11
     554:	fe cf       	rjmp	.-4      	; 0x552 <uart_send_data+0x68>
   UDR = c;
     556:	81 e4       	ldi	r24, 0x41	; 65
     558:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     55a:	5d 9b       	sbis	0x0b, 5	; 11
     55c:	fe cf       	rjmp	.-4      	; 0x55a <uart_send_data+0x70>
   UDR = c;
     55e:	86 e5       	ldi	r24, 0x56	; 86
     560:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     562:	5d 9b       	sbis	0x0b, 5	; 11
     564:	fe cf       	rjmp	.-4      	; 0x562 <uart_send_data+0x78>
   UDR = c;
     566:	87 e4       	ldi	r24, 0x47	; 71
     568:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     56a:	5d 9b       	sbis	0x0b, 5	; 11
     56c:	fe cf       	rjmp	.-4      	; 0x56a <uart_send_data+0x80>
   UDR = c;
     56e:	8a e3       	ldi	r24, 0x3A	; 58
     570:	8c b9       	out	0x0c, r24	; 12
	}
	uart_send_byte('A');
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_long(average);
     572:	c8 01       	movw	r24, r16
     574:	b7 01       	movw	r22, r14
     576:	66 df       	rcall	.-308    	; 0x444 <uart_send_long>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     578:	5d 9b       	sbis	0x0b, 5	; 11
     57a:	fe cf       	rjmp	.-4      	; 0x578 <uart_send_data+0x8e>
   UDR = c;
     57c:	8a e0       	ldi	r24, 0x0A	; 10
     57e:	8c b9       	out	0x0c, r24	; 12
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_long(average);
	uart_send_byte('\n');
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	08 95       	ret

00000594 <display_set_bytes>:
char d1, d2, d3, d4;
char display_pos = 0;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c[0] = ~0x1F | (0x0F & t1);
     594:	8f 70       	andi	r24, 0x0F	; 15
     596:	80 6e       	ori	r24, 0xE0	; 224
     598:	80 93 a9 01 	sts	0x01A9, r24
	c[1] = ~0x2F | (0x0F & t2);
     59c:	6f 70       	andi	r22, 0x0F	; 15
     59e:	60 6d       	ori	r22, 0xD0	; 208
     5a0:	60 93 aa 01 	sts	0x01AA, r22
	c[2] = ~0x4F | (0x0F & t3);
     5a4:	4f 70       	andi	r20, 0x0F	; 15
     5a6:	40 6b       	ori	r20, 0xB0	; 176
     5a8:	40 93 ab 01 	sts	0x01AB, r20
	c[3] = ~0x8F | (0x0F & t4);
     5ac:	2f 70       	andi	r18, 0x0F	; 15
     5ae:	20 67       	ori	r18, 0x70	; 112
     5b0:	20 93 ac 01 	sts	0x01AC, r18
}
     5b4:	08 95       	ret

000005b6 <display_set_long>:

void display_set_long(long target){
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	5b 01       	movw	r10, r22
     5c6:	6c 01       	movw	r12, r24
	if(target < 10000){
     5c8:	80 e1       	ldi	r24, 0x10	; 16
     5ca:	a8 16       	cp	r10, r24
     5cc:	87 e2       	ldi	r24, 0x27	; 39
     5ce:	b8 06       	cpc	r11, r24
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	c8 06       	cpc	r12, r24
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	d8 06       	cpc	r13, r24
     5d8:	0c f0       	brlt	.+2      	; 0x5dc <display_set_long+0x26>
     5da:	41 c0       	rjmp	.+130    	; 0x65e <display_set_long+0xa8>
		d4 = target % 10;
     5dc:	c6 01       	movw	r24, r12
     5de:	b5 01       	movw	r22, r10
     5e0:	2a e0       	ldi	r18, 0x0A	; 10
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	fa d6       	rcall	.+3572   	; 0x13de <__divmodsi4>
     5ea:	f6 2e       	mov	r15, r22
     5ec:	60 93 ae 01 	sts	0x01AE, r22
		d3 = (target / 10) % 10;
     5f0:	c6 01       	movw	r24, r12
     5f2:	b5 01       	movw	r22, r10
     5f4:	2a e0       	ldi	r18, 0x0A	; 10
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	f0 d6       	rcall	.+3552   	; 0x13de <__divmodsi4>
     5fe:	ca 01       	movw	r24, r20
     600:	b9 01       	movw	r22, r18
     602:	2a e0       	ldi	r18, 0x0A	; 10
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	e9 d6       	rcall	.+3538   	; 0x13de <__divmodsi4>
     60c:	06 2f       	mov	r16, r22
     60e:	60 93 af 01 	sts	0x01AF, r22
		d2 = (target / 100) % 10;
     612:	c6 01       	movw	r24, r12
     614:	b5 01       	movw	r22, r10
     616:	24 e6       	ldi	r18, 0x64	; 100
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	df d6       	rcall	.+3518   	; 0x13de <__divmodsi4>
     620:	ca 01       	movw	r24, r20
     622:	b9 01       	movw	r22, r18
     624:	2a e0       	ldi	r18, 0x0A	; 10
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	d8 d6       	rcall	.+3504   	; 0x13de <__divmodsi4>
     62e:	16 2f       	mov	r17, r22
     630:	60 93 ad 01 	sts	0x01AD, r22
		d1 = (target / 1000) % 10;
     634:	c6 01       	movw	r24, r12
     636:	b5 01       	movw	r22, r10
     638:	28 ee       	ldi	r18, 0xE8	; 232
     63a:	33 e0       	ldi	r19, 0x03	; 3
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	ce d6       	rcall	.+3484   	; 0x13de <__divmodsi4>
     642:	ca 01       	movw	r24, r20
     644:	b9 01       	movw	r22, r18
     646:	2a e0       	ldi	r18, 0x0A	; 10
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	c7 d6       	rcall	.+3470   	; 0x13de <__divmodsi4>
     650:	86 2f       	mov	r24, r22
     652:	60 93 a8 01 	sts	0x01A8, r22
		display_set_bytes(d1, d2, d3, d4);
     656:	61 2f       	mov	r22, r17
     658:	40 2f       	mov	r20, r16
     65a:	2f 2d       	mov	r18, r15
     65c:	04 c0       	rjmp	.+8      	; 0x666 <display_set_long+0xb0>
	} else {
		display_set_bytes(0x0E, 0x0E, 0x0E, 0x0E);
     65e:	8e e0       	ldi	r24, 0x0E	; 14
     660:	6e e0       	ldi	r22, 0x0E	; 14
     662:	4e e0       	ldi	r20, 0x0E	; 14
     664:	2e e0       	ldi	r18, 0x0E	; 14
     666:	96 df       	rcall	.-212    	; 0x594 <display_set_bytes>
	}
}
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	08 95       	ret

00000678 <display_off>:

void display_off(){
	PORTB |= 0xFF;
     678:	88 b3       	in	r24, 0x18	; 24
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	88 bb       	out	0x18, r24	; 24
}
     67e:	08 95       	ret

00000680 <display_flash_once>:

void display_flash_once(){
	display_pos++;
     680:	80 91 88 01 	lds	r24, 0x0188
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	80 93 88 01 	sts	0x0188, r24
	if(display_pos > 3){
     68a:	84 30       	cpi	r24, 0x04	; 4
     68c:	18 f0       	brcs	.+6      	; 0x694 <display_flash_once+0x14>
		display_pos = display_pos % 4;
     68e:	83 70       	andi	r24, 0x03	; 3
     690:	80 93 88 01 	sts	0x0188, r24
	}
	PORTB = c[(int) display_pos];
     694:	e0 91 88 01 	lds	r30, 0x0188
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	e7 55       	subi	r30, 0x57	; 87
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	80 81       	ld	r24, Z
     6a0:	88 bb       	out	0x18, r24	; 24
}
     6a2:	08 95       	ret

000006a4 <display_init_timer0>:

void display_init_timer0(){
	//TCCR0 = (1<<CS01) | (1 << CS00); // K = 64
	TCCR0 = (1<<CS01); // K = 8
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // allow interrupt
     6a8:	89 b7       	in	r24, 0x39	; 57
     6aa:	81 60       	ori	r24, 0x01	; 1
     6ac:	89 bf       	out	0x39, r24	; 57
}
     6ae:	08 95       	ret

000006b0 <leds_move_column>:
	line = rand() % 8;
	return (line + 1);
}

void leds_move_column(){
	if(direction == 1){
     6b0:	80 91 6a 00 	lds	r24, 0x006A
     6b4:	90 91 8a 01 	lds	r25, 0x018A
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	39 f4       	brne	.+14     	; 0x6ca <leds_move_column+0x1a>
		if(column < 3){
     6bc:	93 30       	cpi	r25, 0x03	; 3
     6be:	10 f4       	brcc	.+4      	; 0x6c4 <leds_move_column+0x14>
			column++;
     6c0:	9f 5f       	subi	r25, 0xFF	; 255
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <leds_move_column+0x20>
		} else {
			direction = 0;
     6c4:	10 92 6a 00 	sts	0x006A, r1
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
     6ca:	99 23       	and	r25, r25
     6cc:	21 f0       	breq	.+8      	; 0x6d6 <leds_move_column+0x26>
			column--;
     6ce:	91 50       	subi	r25, 0x01	; 1
     6d0:	90 93 8a 01 	sts	0x018A, r25
     6d4:	08 95       	ret
		} else {
			direction = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 6a 00 	sts	0x006A, r24
			column++;
     6dc:	80 93 8a 01 	sts	0x018A, r24
     6e0:	08 95       	ret

000006e2 <leds_update>:
		}
	}
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
     6e2:	90 91 89 01 	lds	r25, 0x0189
     6e6:	90 68       	ori	r25, 0x80	; 128
     6e8:	80 91 8a 01 	lds	r24, 0x018A
     6ec:	88 0f       	add	r24, r24
     6ee:	88 0f       	add	r24, r24
     6f0:	88 0f       	add	r24, r24
     6f2:	89 2b       	or	r24, r25
     6f4:	85 bb       	out	0x15, r24	; 21
}
     6f6:	08 95       	ret

000006f8 <leds_off>:

void leds_off(){
	PORTC &= 0x7F;
     6f8:	af 98       	cbi	0x15, 7	; 21
}
     6fa:	08 95       	ret

000006fc <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 8;
     6fc:	42 d7       	rcall	.+3716   	; 0x1582 <rand>
     6fe:	68 e0       	ldi	r22, 0x08	; 8
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	5a d6       	rcall	.+3252   	; 0x13b8 <__divmodhi4>
     704:	80 93 89 01 	sts	0x0189, r24
	return (line + 1);
}
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	08 95       	ret

0000070c <buzzer_beep>:
#include <avr/io.h>
#include <util/delay.h>

void buzzer_beep(int time_amount_ms){
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
	PORTD |= 0x80;
     71c:	97 9a       	sbi	0x12, 7	; 18
	_delay_ms(time_amount_ms);
     71e:	aa 27       	eor	r26, r26
     720:	97 fd       	sbrc	r25, 7
     722:	a0 95       	com	r26
     724:	ba 2f       	mov	r27, r26
     726:	bc 01       	movw	r22, r24
     728:	cd 01       	movw	r24, r26
     72a:	87 d3       	rcall	.+1806   	; 0xe3a <__floatsisf>
     72c:	5b 01       	movw	r10, r22
     72e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	4a e7       	ldi	r20, 0x7A	; 122
     736:	54 e4       	ldi	r21, 0x44	; 68
     738:	0a d2       	rcall	.+1044   	; 0xb4e <__mulsf3>
     73a:	7b 01       	movw	r14, r22
     73c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e8       	ldi	r20, 0x80	; 128
     744:	5f e3       	ldi	r21, 0x3F	; 63
     746:	4e d3       	rcall	.+1692   	; 0xde4 <__ltsf2>
     748:	88 23       	and	r24, r24
     74a:	1c f4       	brge	.+6      	; 0x752 <buzzer_beep+0x46>
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	20 c0       	rjmp	.+64     	; 0x792 <buzzer_beep+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     752:	c8 01       	movw	r24, r16
     754:	b7 01       	movw	r22, r14
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	3f ef       	ldi	r19, 0xFF	; 255
     75a:	4f e7       	ldi	r20, 0x7F	; 127
     75c:	57 e4       	ldi	r21, 0x47	; 71
     75e:	ec d2       	rcall	.+1496   	; 0xd38 <__gtsf2>
     760:	18 16       	cp	r1, r24
     762:	a4 f4       	brge	.+40     	; 0x78c <buzzer_beep+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     764:	c6 01       	movw	r24, r12
     766:	b5 01       	movw	r22, r10
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e2       	ldi	r20, 0x20	; 32
     76e:	51 e4       	ldi	r21, 0x41	; 65
     770:	ee d1       	rcall	.+988    	; 0xb4e <__mulsf3>
     772:	29 d0       	rcall	.+82     	; 0x7c6 <__fixunssfsi>
     774:	84 e6       	ldi	r24, 0x64	; 100
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	05 c0       	rjmp	.+10     	; 0x784 <buzzer_beep+0x78>
     77a:	fc 01       	movw	r30, r24
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <buzzer_beep+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     780:	61 50       	subi	r22, 0x01	; 1
     782:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     784:	61 15       	cp	r22, r1
     786:	71 05       	cpc	r23, r1
     788:	c1 f7       	brne	.-16     	; 0x77a <buzzer_beep+0x6e>
     78a:	06 c0       	rjmp	.+12     	; 0x798 <buzzer_beep+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     78c:	c8 01       	movw	r24, r16
     78e:	b7 01       	movw	r22, r14
     790:	1a d0       	rcall	.+52     	; 0x7c6 <__fixunssfsi>
     792:	cb 01       	movw	r24, r22
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <buzzer_beep+0x88>
	PORTD &= 0x7F;
     798:	97 98       	cbi	0x12, 7	; 18
}
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	08 95       	ret

000007ac <timer1_init>:
#include <avr/io.h>

void timer1_init(){
	TCNT1=0x00; // ticks
     7ac:	1d bc       	out	0x2d, r1	; 45
     7ae:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS10); // K = 0
     7b0:	8e b5       	in	r24, 0x2e	; 46
     7b2:	81 60       	ori	r24, 0x01	; 1
     7b4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (unsigned int) (F_CPU / 1000); // compare num
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	9f e0       	ldi	r25, 0x0F	; 15
     7ba:	9b bd       	out	0x2b, r25	; 43
     7bc:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A); // launch timer	
     7be:	89 b7       	in	r24, 0x39	; 57
     7c0:	80 61       	ori	r24, 0x10	; 16
     7c2:	89 bf       	out	0x39, r24	; 57
}
     7c4:	08 95       	ret

000007c6 <__fixunssfsi>:
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	7b 01       	movw	r14, r22
     7d0:	8c 01       	movw	r16, r24
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	5f e4       	ldi	r21, 0x4F	; 79
     7da:	d9 d2       	rcall	.+1458   	; 0xd8e <__gesf2>
     7dc:	88 23       	and	r24, r24
     7de:	7c f0       	brlt	.+30     	; 0x7fe <__fixunssfsi+0x38>
     7e0:	c8 01       	movw	r24, r16
     7e2:	b7 01       	movw	r22, r14
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	5f e4       	ldi	r21, 0x4F	; 79
     7ec:	5e d1       	rcall	.+700    	; 0xaaa <__subsf3>
     7ee:	7f d3       	rcall	.+1790   	; 0xeee <__fixsfsi>
     7f0:	9b 01       	movw	r18, r22
     7f2:	ac 01       	movw	r20, r24
     7f4:	20 50       	subi	r18, 0x00	; 0
     7f6:	30 40       	sbci	r19, 0x00	; 0
     7f8:	40 40       	sbci	r20, 0x00	; 0
     7fa:	50 48       	sbci	r21, 0x80	; 128
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <__fixunssfsi+0x42>
     7fe:	c8 01       	movw	r24, r16
     800:	b7 01       	movw	r22, r14
     802:	75 d3       	rcall	.+1770   	; 0xeee <__fixsfsi>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	b9 01       	movw	r22, r18
     80a:	ca 01       	movw	r24, r20
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	08 95       	ret

00000816 <_fpadd_parts>:
     816:	a0 e0       	ldi	r26, 0x00	; 0
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e0 e1       	ldi	r30, 0x10	; 16
     81c:	f4 e0       	ldi	r31, 0x04	; 4
     81e:	30 c6       	rjmp	.+3168   	; 0x1480 <__prologue_saves__>
     820:	dc 01       	movw	r26, r24
     822:	2b 01       	movw	r4, r22
     824:	fa 01       	movw	r30, r20
     826:	9c 91       	ld	r25, X
     828:	92 30       	cpi	r25, 0x02	; 2
     82a:	08 f4       	brcc	.+2      	; 0x82e <_fpadd_parts+0x18>
     82c:	39 c1       	rjmp	.+626    	; 0xaa0 <_fpadd_parts+0x28a>
     82e:	eb 01       	movw	r28, r22
     830:	88 81       	ld	r24, Y
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	08 f4       	brcc	.+2      	; 0x838 <_fpadd_parts+0x22>
     836:	33 c1       	rjmp	.+614    	; 0xa9e <_fpadd_parts+0x288>
     838:	94 30       	cpi	r25, 0x04	; 4
     83a:	69 f4       	brne	.+26     	; 0x856 <_fpadd_parts+0x40>
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	09 f0       	breq	.+2      	; 0x842 <_fpadd_parts+0x2c>
     840:	2f c1       	rjmp	.+606    	; 0xaa0 <_fpadd_parts+0x28a>
     842:	11 96       	adiw	r26, 0x01	; 1
     844:	9c 91       	ld	r25, X
     846:	11 97       	sbiw	r26, 0x01	; 1
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	98 17       	cp	r25, r24
     84c:	09 f4       	brne	.+2      	; 0x850 <_fpadd_parts+0x3a>
     84e:	28 c1       	rjmp	.+592    	; 0xaa0 <_fpadd_parts+0x28a>
     850:	ab e6       	ldi	r26, 0x6B	; 107
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	25 c1       	rjmp	.+586    	; 0xaa0 <_fpadd_parts+0x28a>
     856:	84 30       	cpi	r24, 0x04	; 4
     858:	09 f4       	brne	.+2      	; 0x85c <_fpadd_parts+0x46>
     85a:	21 c1       	rjmp	.+578    	; 0xa9e <_fpadd_parts+0x288>
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	a9 f4       	brne	.+42     	; 0x88a <_fpadd_parts+0x74>
     860:	92 30       	cpi	r25, 0x02	; 2
     862:	09 f0       	breq	.+2      	; 0x866 <_fpadd_parts+0x50>
     864:	1d c1       	rjmp	.+570    	; 0xaa0 <_fpadd_parts+0x28a>
     866:	9a 01       	movw	r18, r20
     868:	ad 01       	movw	r20, r26
     86a:	88 e0       	ldi	r24, 0x08	; 8
     86c:	ea 01       	movw	r28, r20
     86e:	09 90       	ld	r0, Y+
     870:	ae 01       	movw	r20, r28
     872:	e9 01       	movw	r28, r18
     874:	09 92       	st	Y+, r0
     876:	9e 01       	movw	r18, r28
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	c1 f7       	brne	.-16     	; 0x86c <_fpadd_parts+0x56>
     87c:	e2 01       	movw	r28, r4
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	11 96       	adiw	r26, 0x01	; 1
     882:	9c 91       	ld	r25, X
     884:	89 23       	and	r24, r25
     886:	81 83       	std	Z+1, r24	; 0x01
     888:	08 c1       	rjmp	.+528    	; 0xa9a <_fpadd_parts+0x284>
     88a:	92 30       	cpi	r25, 0x02	; 2
     88c:	09 f4       	brne	.+2      	; 0x890 <_fpadd_parts+0x7a>
     88e:	07 c1       	rjmp	.+526    	; 0xa9e <_fpadd_parts+0x288>
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	2d 90       	ld	r2, X+
     894:	3c 90       	ld	r3, X
     896:	13 97       	sbiw	r26, 0x03	; 3
     898:	eb 01       	movw	r28, r22
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	9b 81       	ldd	r25, Y+3	; 0x03
     89e:	14 96       	adiw	r26, 0x04	; 4
     8a0:	ad 90       	ld	r10, X+
     8a2:	bd 90       	ld	r11, X+
     8a4:	cd 90       	ld	r12, X+
     8a6:	dc 90       	ld	r13, X
     8a8:	17 97       	sbiw	r26, 0x07	; 7
     8aa:	ec 80       	ldd	r14, Y+4	; 0x04
     8ac:	fd 80       	ldd	r15, Y+5	; 0x05
     8ae:	0e 81       	ldd	r16, Y+6	; 0x06
     8b0:	1f 81       	ldd	r17, Y+7	; 0x07
     8b2:	91 01       	movw	r18, r2
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	b9 01       	movw	r22, r18
     8ba:	37 ff       	sbrs	r19, 7
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <_fpadd_parts+0xb0>
     8be:	66 27       	eor	r22, r22
     8c0:	77 27       	eor	r23, r23
     8c2:	62 1b       	sub	r22, r18
     8c4:	73 0b       	sbc	r23, r19
     8c6:	60 32       	cpi	r22, 0x20	; 32
     8c8:	71 05       	cpc	r23, r1
     8ca:	0c f0       	brlt	.+2      	; 0x8ce <_fpadd_parts+0xb8>
     8cc:	61 c0       	rjmp	.+194    	; 0x990 <_fpadd_parts+0x17a>
     8ce:	12 16       	cp	r1, r18
     8d0:	13 06       	cpc	r1, r19
     8d2:	6c f5       	brge	.+90     	; 0x92e <_fpadd_parts+0x118>
     8d4:	37 01       	movw	r6, r14
     8d6:	48 01       	movw	r8, r16
     8d8:	06 2e       	mov	r0, r22
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <_fpadd_parts+0xce>
     8dc:	96 94       	lsr	r9
     8de:	87 94       	ror	r8
     8e0:	77 94       	ror	r7
     8e2:	67 94       	ror	r6
     8e4:	0a 94       	dec	r0
     8e6:	d2 f7       	brpl	.-12     	; 0x8dc <_fpadd_parts+0xc6>
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <_fpadd_parts+0xe4>
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	44 1f       	adc	r20, r20
     8f8:	55 1f       	adc	r21, r21
     8fa:	6a 95       	dec	r22
     8fc:	d2 f7       	brpl	.-12     	; 0x8f2 <_fpadd_parts+0xdc>
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	30 40       	sbci	r19, 0x00	; 0
     902:	40 40       	sbci	r20, 0x00	; 0
     904:	50 40       	sbci	r21, 0x00	; 0
     906:	2e 21       	and	r18, r14
     908:	3f 21       	and	r19, r15
     90a:	40 23       	and	r20, r16
     90c:	51 23       	and	r21, r17
     90e:	21 15       	cp	r18, r1
     910:	31 05       	cpc	r19, r1
     912:	41 05       	cpc	r20, r1
     914:	51 05       	cpc	r21, r1
     916:	21 f0       	breq	.+8      	; 0x920 <_fpadd_parts+0x10a>
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	79 01       	movw	r14, r18
     922:	8a 01       	movw	r16, r20
     924:	e6 28       	or	r14, r6
     926:	f7 28       	or	r15, r7
     928:	08 29       	or	r16, r8
     92a:	19 29       	or	r17, r9
     92c:	3c c0       	rjmp	.+120    	; 0x9a6 <_fpadd_parts+0x190>
     92e:	23 2b       	or	r18, r19
     930:	d1 f1       	breq	.+116    	; 0x9a6 <_fpadd_parts+0x190>
     932:	26 0e       	add	r2, r22
     934:	37 1e       	adc	r3, r23
     936:	35 01       	movw	r6, r10
     938:	46 01       	movw	r8, r12
     93a:	06 2e       	mov	r0, r22
     93c:	04 c0       	rjmp	.+8      	; 0x946 <_fpadd_parts+0x130>
     93e:	96 94       	lsr	r9
     940:	87 94       	ror	r8
     942:	77 94       	ror	r7
     944:	67 94       	ror	r6
     946:	0a 94       	dec	r0
     948:	d2 f7       	brpl	.-12     	; 0x93e <_fpadd_parts+0x128>
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	04 c0       	rjmp	.+8      	; 0x95c <_fpadd_parts+0x146>
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	44 1f       	adc	r20, r20
     95a:	55 1f       	adc	r21, r21
     95c:	6a 95       	dec	r22
     95e:	d2 f7       	brpl	.-12     	; 0x954 <_fpadd_parts+0x13e>
     960:	21 50       	subi	r18, 0x01	; 1
     962:	30 40       	sbci	r19, 0x00	; 0
     964:	40 40       	sbci	r20, 0x00	; 0
     966:	50 40       	sbci	r21, 0x00	; 0
     968:	2a 21       	and	r18, r10
     96a:	3b 21       	and	r19, r11
     96c:	4c 21       	and	r20, r12
     96e:	5d 21       	and	r21, r13
     970:	21 15       	cp	r18, r1
     972:	31 05       	cpc	r19, r1
     974:	41 05       	cpc	r20, r1
     976:	51 05       	cpc	r21, r1
     978:	21 f0       	breq	.+8      	; 0x982 <_fpadd_parts+0x16c>
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	59 01       	movw	r10, r18
     984:	6a 01       	movw	r12, r20
     986:	a6 28       	or	r10, r6
     988:	b7 28       	or	r11, r7
     98a:	c8 28       	or	r12, r8
     98c:	d9 28       	or	r13, r9
     98e:	0b c0       	rjmp	.+22     	; 0x9a6 <_fpadd_parts+0x190>
     990:	82 15       	cp	r24, r2
     992:	93 05       	cpc	r25, r3
     994:	2c f0       	brlt	.+10     	; 0x9a0 <_fpadd_parts+0x18a>
     996:	1c 01       	movw	r2, r24
     998:	aa 24       	eor	r10, r10
     99a:	bb 24       	eor	r11, r11
     99c:	65 01       	movw	r12, r10
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <_fpadd_parts+0x190>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	9c 91       	ld	r25, X
     9aa:	d2 01       	movw	r26, r4
     9ac:	11 96       	adiw	r26, 0x01	; 1
     9ae:	8c 91       	ld	r24, X
     9b0:	98 17       	cp	r25, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <_fpadd_parts+0x1a0>
     9b4:	45 c0       	rjmp	.+138    	; 0xa40 <_fpadd_parts+0x22a>
     9b6:	99 23       	and	r25, r25
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <_fpadd_parts+0x1b2>
     9ba:	a8 01       	movw	r20, r16
     9bc:	97 01       	movw	r18, r14
     9be:	2a 19       	sub	r18, r10
     9c0:	3b 09       	sbc	r19, r11
     9c2:	4c 09       	sbc	r20, r12
     9c4:	5d 09       	sbc	r21, r13
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <_fpadd_parts+0x1be>
     9c8:	a6 01       	movw	r20, r12
     9ca:	95 01       	movw	r18, r10
     9cc:	2e 19       	sub	r18, r14
     9ce:	3f 09       	sbc	r19, r15
     9d0:	40 0b       	sbc	r20, r16
     9d2:	51 0b       	sbc	r21, r17
     9d4:	57 fd       	sbrc	r21, 7
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <_fpadd_parts+0x1d2>
     9d8:	11 82       	std	Z+1, r1	; 0x01
     9da:	33 82       	std	Z+3, r3	; 0x03
     9dc:	22 82       	std	Z+2, r2	; 0x02
     9de:	24 83       	std	Z+4, r18	; 0x04
     9e0:	35 83       	std	Z+5, r19	; 0x05
     9e2:	46 83       	std	Z+6, r20	; 0x06
     9e4:	57 83       	std	Z+7, r21	; 0x07
     9e6:	1d c0       	rjmp	.+58     	; 0xa22 <_fpadd_parts+0x20c>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	81 83       	std	Z+1, r24	; 0x01
     9ec:	33 82       	std	Z+3, r3	; 0x03
     9ee:	22 82       	std	Z+2, r2	; 0x02
     9f0:	88 27       	eor	r24, r24
     9f2:	99 27       	eor	r25, r25
     9f4:	dc 01       	movw	r26, r24
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	a4 0b       	sbc	r26, r20
     9fc:	b5 0b       	sbc	r27, r21
     9fe:	84 83       	std	Z+4, r24	; 0x04
     a00:	95 83       	std	Z+5, r25	; 0x05
     a02:	a6 83       	std	Z+6, r26	; 0x06
     a04:	b7 83       	std	Z+7, r27	; 0x07
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <_fpadd_parts+0x20c>
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	44 1f       	adc	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	24 83       	std	Z+4, r18	; 0x04
     a12:	35 83       	std	Z+5, r19	; 0x05
     a14:	46 83       	std	Z+6, r20	; 0x06
     a16:	57 83       	std	Z+7, r21	; 0x07
     a18:	82 81       	ldd	r24, Z+2	; 0x02
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	93 83       	std	Z+3, r25	; 0x03
     a20:	82 83       	std	Z+2, r24	; 0x02
     a22:	24 81       	ldd	r18, Z+4	; 0x04
     a24:	35 81       	ldd	r19, Z+5	; 0x05
     a26:	46 81       	ldd	r20, Z+6	; 0x06
     a28:	57 81       	ldd	r21, Z+7	; 0x07
     a2a:	da 01       	movw	r26, r20
     a2c:	c9 01       	movw	r24, r18
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	af 4f       	sbci	r26, 0xFF	; 255
     a3a:	bf 43       	sbci	r27, 0x3F	; 63
     a3c:	28 f3       	brcs	.-54     	; 0xa08 <_fpadd_parts+0x1f2>
     a3e:	0b c0       	rjmp	.+22     	; 0xa56 <_fpadd_parts+0x240>
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	33 82       	std	Z+3, r3	; 0x03
     a44:	22 82       	std	Z+2, r2	; 0x02
     a46:	ea 0c       	add	r14, r10
     a48:	fb 1c       	adc	r15, r11
     a4a:	0c 1d       	adc	r16, r12
     a4c:	1d 1d       	adc	r17, r13
     a4e:	e4 82       	std	Z+4, r14	; 0x04
     a50:	f5 82       	std	Z+5, r15	; 0x05
     a52:	06 83       	std	Z+6, r16	; 0x06
     a54:	17 83       	std	Z+7, r17	; 0x07
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	80 83       	st	Z, r24
     a5a:	24 81       	ldd	r18, Z+4	; 0x04
     a5c:	35 81       	ldd	r19, Z+5	; 0x05
     a5e:	46 81       	ldd	r20, Z+6	; 0x06
     a60:	57 81       	ldd	r21, Z+7	; 0x07
     a62:	57 ff       	sbrs	r21, 7
     a64:	1a c0       	rjmp	.+52     	; 0xa9a <_fpadd_parts+0x284>
     a66:	c9 01       	movw	r24, r18
     a68:	aa 27       	eor	r26, r26
     a6a:	97 fd       	sbrc	r25, 7
     a6c:	a0 95       	com	r26
     a6e:	ba 2f       	mov	r27, r26
     a70:	81 70       	andi	r24, 0x01	; 1
     a72:	90 70       	andi	r25, 0x00	; 0
     a74:	a0 70       	andi	r26, 0x00	; 0
     a76:	b0 70       	andi	r27, 0x00	; 0
     a78:	56 95       	lsr	r21
     a7a:	47 95       	ror	r20
     a7c:	37 95       	ror	r19
     a7e:	27 95       	ror	r18
     a80:	82 2b       	or	r24, r18
     a82:	93 2b       	or	r25, r19
     a84:	a4 2b       	or	r26, r20
     a86:	b5 2b       	or	r27, r21
     a88:	84 83       	std	Z+4, r24	; 0x04
     a8a:	95 83       	std	Z+5, r25	; 0x05
     a8c:	a6 83       	std	Z+6, r26	; 0x06
     a8e:	b7 83       	std	Z+7, r27	; 0x07
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	93 83       	std	Z+3, r25	; 0x03
     a98:	82 83       	std	Z+2, r24	; 0x02
     a9a:	df 01       	movw	r26, r30
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_fpadd_parts+0x28a>
     a9e:	d2 01       	movw	r26, r4
     aa0:	cd 01       	movw	r24, r26
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	e2 e1       	ldi	r30, 0x12	; 18
     aa8:	07 c5       	rjmp	.+2574   	; 0x14b8 <__epilogue_restores__>

00000aaa <__subsf3>:
     aaa:	a0 e2       	ldi	r26, 0x20	; 32
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	ea e5       	ldi	r30, 0x5A	; 90
     ab0:	f5 e0       	ldi	r31, 0x05	; 5
     ab2:	f2 c4       	rjmp	.+2532   	; 0x1498 <__prologue_saves__+0x18>
     ab4:	69 83       	std	Y+1, r22	; 0x01
     ab6:	7a 83       	std	Y+2, r23	; 0x02
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	2d 83       	std	Y+5, r18	; 0x05
     abe:	3e 83       	std	Y+6, r19	; 0x06
     ac0:	4f 83       	std	Y+7, r20	; 0x07
     ac2:	58 87       	std	Y+8, r21	; 0x08
     ac4:	e9 e0       	ldi	r30, 0x09	; 9
     ac6:	ee 2e       	mov	r14, r30
     ac8:	f1 2c       	mov	r15, r1
     aca:	ec 0e       	add	r14, r28
     acc:	fd 1e       	adc	r15, r29
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	b7 01       	movw	r22, r14
     ad4:	81 d3       	rcall	.+1794   	; 0x11d8 <__unpack_f>
     ad6:	8e 01       	movw	r16, r28
     ad8:	0f 5e       	subi	r16, 0xEF	; 239
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	ce 01       	movw	r24, r28
     ade:	05 96       	adiw	r24, 0x05	; 5
     ae0:	b8 01       	movw	r22, r16
     ae2:	7a d3       	rcall	.+1780   	; 0x11d8 <__unpack_f>
     ae4:	8a 89       	ldd	r24, Y+18	; 0x12
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	89 27       	eor	r24, r25
     aea:	8a 8b       	std	Y+18, r24	; 0x12
     aec:	c7 01       	movw	r24, r14
     aee:	b8 01       	movw	r22, r16
     af0:	ae 01       	movw	r20, r28
     af2:	47 5e       	subi	r20, 0xE7	; 231
     af4:	5f 4f       	sbci	r21, 0xFF	; 255
     af6:	8f de       	rcall	.-738    	; 0x816 <_fpadd_parts>
     af8:	9a d2       	rcall	.+1332   	; 0x102e <__pack_f>
     afa:	a0 96       	adiw	r28, 0x20	; 32
     afc:	e6 e0       	ldi	r30, 0x06	; 6
     afe:	e8 c4       	rjmp	.+2512   	; 0x14d0 <__epilogue_restores__+0x18>

00000b00 <__addsf3>:
     b00:	a0 e2       	ldi	r26, 0x20	; 32
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e5 e8       	ldi	r30, 0x85	; 133
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	c7 c4       	rjmp	.+2446   	; 0x1498 <__prologue_saves__+0x18>
     b0a:	69 83       	std	Y+1, r22	; 0x01
     b0c:	7a 83       	std	Y+2, r23	; 0x02
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	2d 83       	std	Y+5, r18	; 0x05
     b14:	3e 83       	std	Y+6, r19	; 0x06
     b16:	4f 83       	std	Y+7, r20	; 0x07
     b18:	58 87       	std	Y+8, r21	; 0x08
     b1a:	f9 e0       	ldi	r31, 0x09	; 9
     b1c:	ef 2e       	mov	r14, r31
     b1e:	f1 2c       	mov	r15, r1
     b20:	ec 0e       	add	r14, r28
     b22:	fd 1e       	adc	r15, r29
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	b7 01       	movw	r22, r14
     b2a:	56 d3       	rcall	.+1708   	; 0x11d8 <__unpack_f>
     b2c:	8e 01       	movw	r16, r28
     b2e:	0f 5e       	subi	r16, 0xEF	; 239
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	ce 01       	movw	r24, r28
     b34:	05 96       	adiw	r24, 0x05	; 5
     b36:	b8 01       	movw	r22, r16
     b38:	4f d3       	rcall	.+1694   	; 0x11d8 <__unpack_f>
     b3a:	c7 01       	movw	r24, r14
     b3c:	b8 01       	movw	r22, r16
     b3e:	ae 01       	movw	r20, r28
     b40:	47 5e       	subi	r20, 0xE7	; 231
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	68 de       	rcall	.-816    	; 0x816 <_fpadd_parts>
     b46:	73 d2       	rcall	.+1254   	; 0x102e <__pack_f>
     b48:	a0 96       	adiw	r28, 0x20	; 32
     b4a:	e6 e0       	ldi	r30, 0x06	; 6
     b4c:	c1 c4       	rjmp	.+2434   	; 0x14d0 <__epilogue_restores__+0x18>

00000b4e <__mulsf3>:
     b4e:	a0 e2       	ldi	r26, 0x20	; 32
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ec ea       	ldi	r30, 0xAC	; 172
     b54:	f5 e0       	ldi	r31, 0x05	; 5
     b56:	94 c4       	rjmp	.+2344   	; 0x1480 <__prologue_saves__>
     b58:	69 83       	std	Y+1, r22	; 0x01
     b5a:	7a 83       	std	Y+2, r23	; 0x02
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	2d 83       	std	Y+5, r18	; 0x05
     b62:	3e 83       	std	Y+6, r19	; 0x06
     b64:	4f 83       	std	Y+7, r20	; 0x07
     b66:	58 87       	std	Y+8, r21	; 0x08
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	be 01       	movw	r22, r28
     b6e:	67 5f       	subi	r22, 0xF7	; 247
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	32 d3       	rcall	.+1636   	; 0x11d8 <__unpack_f>
     b74:	ce 01       	movw	r24, r28
     b76:	05 96       	adiw	r24, 0x05	; 5
     b78:	be 01       	movw	r22, r28
     b7a:	6f 5e       	subi	r22, 0xEF	; 239
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	2c d3       	rcall	.+1624   	; 0x11d8 <__unpack_f>
     b80:	99 85       	ldd	r25, Y+9	; 0x09
     b82:	92 30       	cpi	r25, 0x02	; 2
     b84:	88 f0       	brcs	.+34     	; 0xba8 <__mulsf3+0x5a>
     b86:	89 89       	ldd	r24, Y+17	; 0x11
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	c8 f0       	brcs	.+50     	; 0xbbe <__mulsf3+0x70>
     b8c:	94 30       	cpi	r25, 0x04	; 4
     b8e:	19 f4       	brne	.+6      	; 0xb96 <__mulsf3+0x48>
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	51 f4       	brne	.+20     	; 0xba8 <__mulsf3+0x5a>
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <__mulsf3+0x50>
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	29 f4       	brne	.+10     	; 0xba4 <__mulsf3+0x56>
     b9a:	92 30       	cpi	r25, 0x02	; 2
     b9c:	81 f4       	brne	.+32     	; 0xbbe <__mulsf3+0x70>
     b9e:	8b e6       	ldi	r24, 0x6B	; 107
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	c6 c0       	rjmp	.+396    	; 0xd30 <__mulsf3+0x1e2>
     ba4:	92 30       	cpi	r25, 0x02	; 2
     ba6:	49 f4       	brne	.+18     	; 0xbba <__mulsf3+0x6c>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bac:	8a 89       	ldd	r24, Y+18	; 0x12
     bae:	98 13       	cpse	r25, r24
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	2a 87       	std	Y+10, r18	; 0x0a
     bb4:	ce 01       	movw	r24, r28
     bb6:	09 96       	adiw	r24, 0x09	; 9
     bb8:	bb c0       	rjmp	.+374    	; 0xd30 <__mulsf3+0x1e2>
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	49 f4       	brne	.+18     	; 0xbd0 <__mulsf3+0x82>
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	8a 89       	ldd	r24, Y+18	; 0x12
     bc4:	98 13       	cpse	r25, r24
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	2a 8b       	std	Y+18, r18	; 0x12
     bca:	ce 01       	movw	r24, r28
     bcc:	41 96       	adiw	r24, 0x11	; 17
     bce:	b0 c0       	rjmp	.+352    	; 0xd30 <__mulsf3+0x1e2>
     bd0:	2d 84       	ldd	r2, Y+13	; 0x0d
     bd2:	3e 84       	ldd	r3, Y+14	; 0x0e
     bd4:	4f 84       	ldd	r4, Y+15	; 0x0f
     bd6:	58 88       	ldd	r5, Y+16	; 0x10
     bd8:	6d 88       	ldd	r6, Y+21	; 0x15
     bda:	7e 88       	ldd	r7, Y+22	; 0x16
     bdc:	8f 88       	ldd	r8, Y+23	; 0x17
     bde:	98 8c       	ldd	r9, Y+24	; 0x18
     be0:	ee 24       	eor	r14, r14
     be2:	ff 24       	eor	r15, r15
     be4:	87 01       	movw	r16, r14
     be6:	aa 24       	eor	r10, r10
     be8:	bb 24       	eor	r11, r11
     bea:	65 01       	movw	r12, r10
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	e0 e0       	ldi	r30, 0x00	; 0
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	c1 01       	movw	r24, r2
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	90 70       	andi	r25, 0x00	; 0
     bfe:	89 2b       	or	r24, r25
     c00:	e9 f0       	breq	.+58     	; 0xc3c <__mulsf3+0xee>
     c02:	e6 0c       	add	r14, r6
     c04:	f7 1c       	adc	r15, r7
     c06:	08 1d       	adc	r16, r8
     c08:	19 1d       	adc	r17, r9
     c0a:	9a 01       	movw	r18, r20
     c0c:	ab 01       	movw	r20, r22
     c0e:	2a 0d       	add	r18, r10
     c10:	3b 1d       	adc	r19, r11
     c12:	4c 1d       	adc	r20, r12
     c14:	5d 1d       	adc	r21, r13
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e6 14       	cp	r14, r6
     c20:	f7 04       	cpc	r15, r7
     c22:	08 05       	cpc	r16, r8
     c24:	19 05       	cpc	r17, r9
     c26:	20 f4       	brcc	.+8      	; 0xc30 <__mulsf3+0xe2>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ba 01       	movw	r22, r20
     c32:	a9 01       	movw	r20, r18
     c34:	48 0f       	add	r20, r24
     c36:	59 1f       	adc	r21, r25
     c38:	6a 1f       	adc	r22, r26
     c3a:	7b 1f       	adc	r23, r27
     c3c:	aa 0c       	add	r10, r10
     c3e:	bb 1c       	adc	r11, r11
     c40:	cc 1c       	adc	r12, r12
     c42:	dd 1c       	adc	r13, r13
     c44:	97 fe       	sbrs	r9, 7
     c46:	08 c0       	rjmp	.+16     	; 0xc58 <__mulsf3+0x10a>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	a8 2a       	or	r10, r24
     c52:	b9 2a       	or	r11, r25
     c54:	ca 2a       	or	r12, r26
     c56:	db 2a       	or	r13, r27
     c58:	31 96       	adiw	r30, 0x01	; 1
     c5a:	e0 32       	cpi	r30, 0x20	; 32
     c5c:	f1 05       	cpc	r31, r1
     c5e:	49 f0       	breq	.+18     	; 0xc72 <__mulsf3+0x124>
     c60:	66 0c       	add	r6, r6
     c62:	77 1c       	adc	r7, r7
     c64:	88 1c       	adc	r8, r8
     c66:	99 1c       	adc	r9, r9
     c68:	56 94       	lsr	r5
     c6a:	47 94       	ror	r4
     c6c:	37 94       	ror	r3
     c6e:	27 94       	ror	r2
     c70:	c3 cf       	rjmp	.-122    	; 0xbf8 <__mulsf3+0xaa>
     c72:	fa 85       	ldd	r31, Y+10	; 0x0a
     c74:	ea 89       	ldd	r30, Y+18	; 0x12
     c76:	2b 89       	ldd	r18, Y+19	; 0x13
     c78:	3c 89       	ldd	r19, Y+20	; 0x14
     c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c7e:	28 0f       	add	r18, r24
     c80:	39 1f       	adc	r19, r25
     c82:	2e 5f       	subi	r18, 0xFE	; 254
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	17 c0       	rjmp	.+46     	; 0xcb6 <__mulsf3+0x168>
     c88:	ca 01       	movw	r24, r20
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	90 70       	andi	r25, 0x00	; 0
     c8e:	89 2b       	or	r24, r25
     c90:	61 f0       	breq	.+24     	; 0xcaa <__mulsf3+0x15c>
     c92:	16 95       	lsr	r17
     c94:	07 95       	ror	r16
     c96:	f7 94       	ror	r15
     c98:	e7 94       	ror	r14
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	b0 e8       	ldi	r27, 0x80	; 128
     ca2:	e8 2a       	or	r14, r24
     ca4:	f9 2a       	or	r15, r25
     ca6:	0a 2b       	or	r16, r26
     ca8:	1b 2b       	or	r17, r27
     caa:	76 95       	lsr	r23
     cac:	67 95       	ror	r22
     cae:	57 95       	ror	r21
     cb0:	47 95       	ror	r20
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	77 fd       	sbrc	r23, 7
     cb8:	e7 cf       	rjmp	.-50     	; 0xc88 <__mulsf3+0x13a>
     cba:	0c c0       	rjmp	.+24     	; 0xcd4 <__mulsf3+0x186>
     cbc:	44 0f       	add	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	66 1f       	adc	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	17 fd       	sbrc	r17, 7
     cc6:	41 60       	ori	r20, 0x01	; 1
     cc8:	ee 0c       	add	r14, r14
     cca:	ff 1c       	adc	r15, r15
     ccc:	00 1f       	adc	r16, r16
     cce:	11 1f       	adc	r17, r17
     cd0:	21 50       	subi	r18, 0x01	; 1
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	40 30       	cpi	r20, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	59 07       	cpc	r21, r25
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	69 07       	cpc	r22, r25
     cde:	90 e4       	ldi	r25, 0x40	; 64
     ce0:	79 07       	cpc	r23, r25
     ce2:	60 f3       	brcs	.-40     	; 0xcbc <__mulsf3+0x16e>
     ce4:	2b 8f       	std	Y+27, r18	; 0x1b
     ce6:	3c 8f       	std	Y+28, r19	; 0x1c
     ce8:	db 01       	movw	r26, r22
     cea:	ca 01       	movw	r24, r20
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	a0 70       	andi	r26, 0x00	; 0
     cf2:	b0 70       	andi	r27, 0x00	; 0
     cf4:	80 34       	cpi	r24, 0x40	; 64
     cf6:	91 05       	cpc	r25, r1
     cf8:	a1 05       	cpc	r26, r1
     cfa:	b1 05       	cpc	r27, r1
     cfc:	61 f4       	brne	.+24     	; 0xd16 <__mulsf3+0x1c8>
     cfe:	47 fd       	sbrc	r20, 7
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <__mulsf3+0x1c8>
     d02:	e1 14       	cp	r14, r1
     d04:	f1 04       	cpc	r15, r1
     d06:	01 05       	cpc	r16, r1
     d08:	11 05       	cpc	r17, r1
     d0a:	29 f0       	breq	.+10     	; 0xd16 <__mulsf3+0x1c8>
     d0c:	40 5c       	subi	r20, 0xC0	; 192
     d0e:	5f 4f       	sbci	r21, 0xFF	; 255
     d10:	6f 4f       	sbci	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	40 78       	andi	r20, 0x80	; 128
     d16:	1a 8e       	std	Y+26, r1	; 0x1a
     d18:	fe 17       	cp	r31, r30
     d1a:	11 f0       	breq	.+4      	; 0xd20 <__mulsf3+0x1d2>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	8a 8f       	std	Y+26, r24	; 0x1a
     d20:	4d 8f       	std	Y+29, r20	; 0x1d
     d22:	5e 8f       	std	Y+30, r21	; 0x1e
     d24:	6f 8f       	std	Y+31, r22	; 0x1f
     d26:	78 a3       	std	Y+32, r23	; 0x20
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	89 8f       	std	Y+25, r24	; 0x19
     d2c:	ce 01       	movw	r24, r28
     d2e:	49 96       	adiw	r24, 0x19	; 25
     d30:	7e d1       	rcall	.+764    	; 0x102e <__pack_f>
     d32:	a0 96       	adiw	r28, 0x20	; 32
     d34:	e2 e1       	ldi	r30, 0x12	; 18
     d36:	c0 c3       	rjmp	.+1920   	; 0x14b8 <__epilogue_restores__>

00000d38 <__gtsf2>:
     d38:	a8 e1       	ldi	r26, 0x18	; 24
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e1 ea       	ldi	r30, 0xA1	; 161
     d3e:	f6 e0       	ldi	r31, 0x06	; 6
     d40:	ab c3       	rjmp	.+1878   	; 0x1498 <__prologue_saves__+0x18>
     d42:	69 83       	std	Y+1, r22	; 0x01
     d44:	7a 83       	std	Y+2, r23	; 0x02
     d46:	8b 83       	std	Y+3, r24	; 0x03
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	2d 83       	std	Y+5, r18	; 0x05
     d4c:	3e 83       	std	Y+6, r19	; 0x06
     d4e:	4f 83       	std	Y+7, r20	; 0x07
     d50:	58 87       	std	Y+8, r21	; 0x08
     d52:	89 e0       	ldi	r24, 0x09	; 9
     d54:	e8 2e       	mov	r14, r24
     d56:	f1 2c       	mov	r15, r1
     d58:	ec 0e       	add	r14, r28
     d5a:	fd 1e       	adc	r15, r29
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	b7 01       	movw	r22, r14
     d62:	3a d2       	rcall	.+1140   	; 0x11d8 <__unpack_f>
     d64:	8e 01       	movw	r16, r28
     d66:	0f 5e       	subi	r16, 0xEF	; 239
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	ce 01       	movw	r24, r28
     d6c:	05 96       	adiw	r24, 0x05	; 5
     d6e:	b8 01       	movw	r22, r16
     d70:	33 d2       	rcall	.+1126   	; 0x11d8 <__unpack_f>
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	38 f0       	brcs	.+14     	; 0xd86 <__gtsf2+0x4e>
     d78:	89 89       	ldd	r24, Y+17	; 0x11
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	20 f0       	brcs	.+8      	; 0xd86 <__gtsf2+0x4e>
     d7e:	c7 01       	movw	r24, r14
     d80:	b8 01       	movw	r22, r16
     d82:	a2 d2       	rcall	.+1348   	; 0x12c8 <__fpcmp_parts_f>
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <__gtsf2+0x50>
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	68 96       	adiw	r28, 0x18	; 24
     d8a:	e6 e0       	ldi	r30, 0x06	; 6
     d8c:	a1 c3       	rjmp	.+1858   	; 0x14d0 <__epilogue_restores__+0x18>

00000d8e <__gesf2>:
     d8e:	a8 e1       	ldi	r26, 0x18	; 24
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ec ec       	ldi	r30, 0xCC	; 204
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	80 c3       	rjmp	.+1792   	; 0x1498 <__prologue_saves__+0x18>
     d98:	69 83       	std	Y+1, r22	; 0x01
     d9a:	7a 83       	std	Y+2, r23	; 0x02
     d9c:	8b 83       	std	Y+3, r24	; 0x03
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	2d 83       	std	Y+5, r18	; 0x05
     da2:	3e 83       	std	Y+6, r19	; 0x06
     da4:	4f 83       	std	Y+7, r20	; 0x07
     da6:	58 87       	std	Y+8, r21	; 0x08
     da8:	89 e0       	ldi	r24, 0x09	; 9
     daa:	e8 2e       	mov	r14, r24
     dac:	f1 2c       	mov	r15, r1
     dae:	ec 0e       	add	r14, r28
     db0:	fd 1e       	adc	r15, r29
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	b7 01       	movw	r22, r14
     db8:	0f d2       	rcall	.+1054   	; 0x11d8 <__unpack_f>
     dba:	8e 01       	movw	r16, r28
     dbc:	0f 5e       	subi	r16, 0xEF	; 239
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	ce 01       	movw	r24, r28
     dc2:	05 96       	adiw	r24, 0x05	; 5
     dc4:	b8 01       	movw	r22, r16
     dc6:	08 d2       	rcall	.+1040   	; 0x11d8 <__unpack_f>
     dc8:	89 85       	ldd	r24, Y+9	; 0x09
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	38 f0       	brcs	.+14     	; 0xddc <__gesf2+0x4e>
     dce:	89 89       	ldd	r24, Y+17	; 0x11
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	20 f0       	brcs	.+8      	; 0xddc <__gesf2+0x4e>
     dd4:	c7 01       	movw	r24, r14
     dd6:	b8 01       	movw	r22, r16
     dd8:	77 d2       	rcall	.+1262   	; 0x12c8 <__fpcmp_parts_f>
     dda:	01 c0       	rjmp	.+2      	; 0xdde <__gesf2+0x50>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	68 96       	adiw	r28, 0x18	; 24
     de0:	e6 e0       	ldi	r30, 0x06	; 6
     de2:	76 c3       	rjmp	.+1772   	; 0x14d0 <__epilogue_restores__+0x18>

00000de4 <__ltsf2>:
     de4:	a8 e1       	ldi	r26, 0x18	; 24
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 ef       	ldi	r30, 0xF7	; 247
     dea:	f6 e0       	ldi	r31, 0x06	; 6
     dec:	55 c3       	rjmp	.+1706   	; 0x1498 <__prologue_saves__+0x18>
     dee:	69 83       	std	Y+1, r22	; 0x01
     df0:	7a 83       	std	Y+2, r23	; 0x02
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	2d 83       	std	Y+5, r18	; 0x05
     df8:	3e 83       	std	Y+6, r19	; 0x06
     dfa:	4f 83       	std	Y+7, r20	; 0x07
     dfc:	58 87       	std	Y+8, r21	; 0x08
     dfe:	89 e0       	ldi	r24, 0x09	; 9
     e00:	e8 2e       	mov	r14, r24
     e02:	f1 2c       	mov	r15, r1
     e04:	ec 0e       	add	r14, r28
     e06:	fd 1e       	adc	r15, r29
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	b7 01       	movw	r22, r14
     e0e:	e4 d1       	rcall	.+968    	; 0x11d8 <__unpack_f>
     e10:	8e 01       	movw	r16, r28
     e12:	0f 5e       	subi	r16, 0xEF	; 239
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	ce 01       	movw	r24, r28
     e18:	05 96       	adiw	r24, 0x05	; 5
     e1a:	b8 01       	movw	r22, r16
     e1c:	dd d1       	rcall	.+954    	; 0x11d8 <__unpack_f>
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	38 f0       	brcs	.+14     	; 0xe32 <__ltsf2+0x4e>
     e24:	89 89       	ldd	r24, Y+17	; 0x11
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	20 f0       	brcs	.+8      	; 0xe32 <__ltsf2+0x4e>
     e2a:	c7 01       	movw	r24, r14
     e2c:	b8 01       	movw	r22, r16
     e2e:	4c d2       	rcall	.+1176   	; 0x12c8 <__fpcmp_parts_f>
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <__ltsf2+0x50>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	68 96       	adiw	r28, 0x18	; 24
     e36:	e6 e0       	ldi	r30, 0x06	; 6
     e38:	4b c3       	rjmp	.+1686   	; 0x14d0 <__epilogue_restores__+0x18>

00000e3a <__floatsisf>:
     e3a:	a8 e0       	ldi	r26, 0x08	; 8
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e2 e2       	ldi	r30, 0x22	; 34
     e40:	f7 e0       	ldi	r31, 0x07	; 7
     e42:	27 c3       	rjmp	.+1614   	; 0x1492 <__prologue_saves__+0x12>
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	da 01       	movw	r26, r20
     e4e:	c9 01       	movw	r24, r18
     e50:	88 27       	eor	r24, r24
     e52:	b7 fd       	sbrc	r27, 7
     e54:	83 95       	inc	r24
     e56:	99 27       	eor	r25, r25
     e58:	aa 27       	eor	r26, r26
     e5a:	bb 27       	eor	r27, r27
     e5c:	b8 2e       	mov	r11, r24
     e5e:	21 15       	cp	r18, r1
     e60:	31 05       	cpc	r19, r1
     e62:	41 05       	cpc	r20, r1
     e64:	51 05       	cpc	r21, r1
     e66:	19 f4       	brne	.+6      	; 0xe6e <__floatsisf+0x34>
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	39 c0       	rjmp	.+114    	; 0xee0 <__floatsisf+0xa6>
     e6e:	88 23       	and	r24, r24
     e70:	a9 f0       	breq	.+42     	; 0xe9c <__floatsisf+0x62>
     e72:	20 30       	cpi	r18, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	38 07       	cpc	r19, r24
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	48 07       	cpc	r20, r24
     e7c:	80 e8       	ldi	r24, 0x80	; 128
     e7e:	58 07       	cpc	r21, r24
     e80:	29 f4       	brne	.+10     	; 0xe8c <__floatsisf+0x52>
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	9f ec       	ldi	r25, 0xCF	; 207
     e8a:	2e c0       	rjmp	.+92     	; 0xee8 <__floatsisf+0xae>
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	87 01       	movw	r16, r14
     e92:	e2 1a       	sub	r14, r18
     e94:	f3 0a       	sbc	r15, r19
     e96:	04 0b       	sbc	r16, r20
     e98:	15 0b       	sbc	r17, r21
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <__floatsisf+0x66>
     e9c:	79 01       	movw	r14, r18
     e9e:	8a 01       	movw	r16, r20
     ea0:	8e e1       	ldi	r24, 0x1E	; 30
     ea2:	c8 2e       	mov	r12, r24
     ea4:	d1 2c       	mov	r13, r1
     ea6:	dc 82       	std	Y+4, r13	; 0x04
     ea8:	cb 82       	std	Y+3, r12	; 0x03
     eaa:	ed 82       	std	Y+5, r14	; 0x05
     eac:	fe 82       	std	Y+6, r15	; 0x06
     eae:	0f 83       	std	Y+7, r16	; 0x07
     eb0:	18 87       	std	Y+8, r17	; 0x08
     eb2:	c8 01       	movw	r24, r16
     eb4:	b7 01       	movw	r22, r14
     eb6:	6c d0       	rcall	.+216    	; 0xf90 <__clzsi2>
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	18 16       	cp	r1, r24
     ebc:	19 06       	cpc	r1, r25
     ebe:	84 f4       	brge	.+32     	; 0xee0 <__floatsisf+0xa6>
     ec0:	08 2e       	mov	r0, r24
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <__floatsisf+0x92>
     ec4:	ee 0c       	add	r14, r14
     ec6:	ff 1c       	adc	r15, r15
     ec8:	00 1f       	adc	r16, r16
     eca:	11 1f       	adc	r17, r17
     ecc:	0a 94       	dec	r0
     ece:	d2 f7       	brpl	.-12     	; 0xec4 <__floatsisf+0x8a>
     ed0:	ed 82       	std	Y+5, r14	; 0x05
     ed2:	fe 82       	std	Y+6, r15	; 0x06
     ed4:	0f 83       	std	Y+7, r16	; 0x07
     ed6:	18 87       	std	Y+8, r17	; 0x08
     ed8:	c8 1a       	sub	r12, r24
     eda:	d9 0a       	sbc	r13, r25
     edc:	dc 82       	std	Y+4, r13	; 0x04
     ede:	cb 82       	std	Y+3, r12	; 0x03
     ee0:	ba 82       	std	Y+2, r11	; 0x02
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	a3 d0       	rcall	.+326    	; 0x102e <__pack_f>
     ee8:	28 96       	adiw	r28, 0x08	; 8
     eea:	e9 e0       	ldi	r30, 0x09	; 9
     eec:	ee c2       	rjmp	.+1500   	; 0x14ca <__epilogue_restores__+0x12>

00000eee <__fixsfsi>:
     eee:	ac e0       	ldi	r26, 0x0C	; 12
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ec e7       	ldi	r30, 0x7C	; 124
     ef4:	f7 e0       	ldi	r31, 0x07	; 7
     ef6:	d4 c2       	rjmp	.+1448   	; 0x14a0 <__prologue_saves__+0x20>
     ef8:	69 83       	std	Y+1, r22	; 0x01
     efa:	7a 83       	std	Y+2, r23	; 0x02
     efc:	8b 83       	std	Y+3, r24	; 0x03
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	be 01       	movw	r22, r28
     f06:	6b 5f       	subi	r22, 0xFB	; 251
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	66 d1       	rcall	.+716    	; 0x11d8 <__unpack_f>
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	61 f1       	breq	.+88     	; 0xf6a <__fixsfsi+0x7c>
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	50 f1       	brcs	.+84     	; 0xf6a <__fixsfsi+0x7c>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f4       	brne	.+8      	; 0xf22 <__fixsfsi+0x34>
     f1a:	8e 81       	ldd	r24, Y+6	; 0x06
     f1c:	88 23       	and	r24, r24
     f1e:	51 f1       	breq	.+84     	; 0xf74 <__fixsfsi+0x86>
     f20:	2e c0       	rjmp	.+92     	; 0xf7e <__fixsfsi+0x90>
     f22:	2f 81       	ldd	r18, Y+7	; 0x07
     f24:	38 85       	ldd	r19, Y+8	; 0x08
     f26:	37 fd       	sbrc	r19, 7
     f28:	20 c0       	rjmp	.+64     	; 0xf6a <__fixsfsi+0x7c>
     f2a:	6e 81       	ldd	r22, Y+6	; 0x06
     f2c:	2f 31       	cpi	r18, 0x1F	; 31
     f2e:	31 05       	cpc	r19, r1
     f30:	1c f0       	brlt	.+6      	; 0xf38 <__fixsfsi+0x4a>
     f32:	66 23       	and	r22, r22
     f34:	f9 f0       	breq	.+62     	; 0xf74 <__fixsfsi+0x86>
     f36:	23 c0       	rjmp	.+70     	; 0xf7e <__fixsfsi+0x90>
     f38:	8e e1       	ldi	r24, 0x1E	; 30
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	82 1b       	sub	r24, r18
     f3e:	93 0b       	sbc	r25, r19
     f40:	29 85       	ldd	r18, Y+9	; 0x09
     f42:	3a 85       	ldd	r19, Y+10	; 0x0a
     f44:	4b 85       	ldd	r20, Y+11	; 0x0b
     f46:	5c 85       	ldd	r21, Y+12	; 0x0c
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <__fixsfsi+0x64>
     f4a:	56 95       	lsr	r21
     f4c:	47 95       	ror	r20
     f4e:	37 95       	ror	r19
     f50:	27 95       	ror	r18
     f52:	8a 95       	dec	r24
     f54:	d2 f7       	brpl	.-12     	; 0xf4a <__fixsfsi+0x5c>
     f56:	66 23       	and	r22, r22
     f58:	b1 f0       	breq	.+44     	; 0xf86 <__fixsfsi+0x98>
     f5a:	50 95       	com	r21
     f5c:	40 95       	com	r20
     f5e:	30 95       	com	r19
     f60:	21 95       	neg	r18
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	4f 4f       	sbci	r20, 0xFF	; 255
     f66:	5f 4f       	sbci	r21, 0xFF	; 255
     f68:	0e c0       	rjmp	.+28     	; 0xf86 <__fixsfsi+0x98>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <__fixsfsi+0x98>
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	3f ef       	ldi	r19, 0xFF	; 255
     f78:	4f ef       	ldi	r20, 0xFF	; 255
     f7a:	5f e7       	ldi	r21, 0x7F	; 127
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <__fixsfsi+0x98>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e8       	ldi	r21, 0x80	; 128
     f86:	b9 01       	movw	r22, r18
     f88:	ca 01       	movw	r24, r20
     f8a:	2c 96       	adiw	r28, 0x0c	; 12
     f8c:	e2 e0       	ldi	r30, 0x02	; 2
     f8e:	a4 c2       	rjmp	.+1352   	; 0x14d8 <__epilogue_restores__+0x20>

00000f90 <__clzsi2>:
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	7b 01       	movw	r14, r22
     f9a:	8c 01       	movw	r16, r24
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	e8 16       	cp	r14, r24
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	f8 06       	cpc	r15, r24
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 07       	cpc	r16, r24
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	18 07       	cpc	r17, r24
     fac:	88 f4       	brcc	.+34     	; 0xfd0 <__clzsi2+0x40>
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	e8 16       	cp	r14, r24
     fb2:	f1 04       	cpc	r15, r1
     fb4:	01 05       	cpc	r16, r1
     fb6:	11 05       	cpc	r17, r1
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <__clzsi2+0x36>
     fba:	28 f0       	brcs	.+10     	; 0xfc6 <__clzsi2+0x36>
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	17 c0       	rjmp	.+46     	; 0xff4 <__clzsi2+0x64>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	12 c0       	rjmp	.+36     	; 0xff4 <__clzsi2+0x64>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	e8 16       	cp	r14, r24
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	f8 06       	cpc	r15, r24
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	08 07       	cpc	r16, r24
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	18 07       	cpc	r17, r24
     fe0:	28 f0       	brcs	.+10     	; 0xfec <__clzsi2+0x5c>
     fe2:	88 e1       	ldi	r24, 0x18	; 24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <__clzsi2+0x64>
     fec:	80 e1       	ldi	r24, 0x10	; 16
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	20 e2       	ldi	r18, 0x20	; 32
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	28 1b       	sub	r18, r24
     ffe:	39 0b       	sbc	r19, r25
    1000:	4a 0b       	sbc	r20, r26
    1002:	5b 0b       	sbc	r21, r27
    1004:	04 c0       	rjmp	.+8      	; 0x100e <__clzsi2+0x7e>
    1006:	16 95       	lsr	r17
    1008:	07 95       	ror	r16
    100a:	f7 94       	ror	r15
    100c:	e7 94       	ror	r14
    100e:	8a 95       	dec	r24
    1010:	d2 f7       	brpl	.-12     	; 0x1006 <__clzsi2+0x76>
    1012:	f7 01       	movw	r30, r14
    1014:	ed 58       	subi	r30, 0x8D	; 141
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	28 1b       	sub	r18, r24
    101c:	31 09       	sbc	r19, r1
    101e:	41 09       	sbc	r20, r1
    1020:	51 09       	sbc	r21, r1
    1022:	c9 01       	movw	r24, r18
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	08 95       	ret

0000102e <__pack_f>:
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	fc 01       	movw	r30, r24
    103a:	e4 80       	ldd	r14, Z+4	; 0x04
    103c:	f5 80       	ldd	r15, Z+5	; 0x05
    103e:	06 81       	ldd	r16, Z+6	; 0x06
    1040:	17 81       	ldd	r17, Z+7	; 0x07
    1042:	d1 80       	ldd	r13, Z+1	; 0x01
    1044:	80 81       	ld	r24, Z
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	48 f4       	brcc	.+18     	; 0x105c <__pack_f+0x2e>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e1       	ldi	r26, 0x10	; 16
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 2a       	or	r14, r24
    1054:	f9 2a       	or	r15, r25
    1056:	0a 2b       	or	r16, r26
    1058:	1b 2b       	or	r17, r27
    105a:	a5 c0       	rjmp	.+330    	; 0x11a6 <__pack_f+0x178>
    105c:	84 30       	cpi	r24, 0x04	; 4
    105e:	09 f4       	brne	.+2      	; 0x1062 <__pack_f+0x34>
    1060:	9f c0       	rjmp	.+318    	; 0x11a0 <__pack_f+0x172>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	21 f4       	brne	.+8      	; 0x106e <__pack_f+0x40>
    1066:	ee 24       	eor	r14, r14
    1068:	ff 24       	eor	r15, r15
    106a:	87 01       	movw	r16, r14
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <__pack_f+0x4a>
    106e:	e1 14       	cp	r14, r1
    1070:	f1 04       	cpc	r15, r1
    1072:	01 05       	cpc	r16, r1
    1074:	11 05       	cpc	r17, r1
    1076:	19 f4       	brne	.+6      	; 0x107e <__pack_f+0x50>
    1078:	e0 e0       	ldi	r30, 0x00	; 0
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	96 c0       	rjmp	.+300    	; 0x11aa <__pack_f+0x17c>
    107e:	62 81       	ldd	r22, Z+2	; 0x02
    1080:	73 81       	ldd	r23, Z+3	; 0x03
    1082:	9f ef       	ldi	r25, 0xFF	; 255
    1084:	62 38       	cpi	r22, 0x82	; 130
    1086:	79 07       	cpc	r23, r25
    1088:	0c f0       	brlt	.+2      	; 0x108c <__pack_f+0x5e>
    108a:	5b c0       	rjmp	.+182    	; 0x1142 <__pack_f+0x114>
    108c:	22 e8       	ldi	r18, 0x82	; 130
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	26 1b       	sub	r18, r22
    1092:	37 0b       	sbc	r19, r23
    1094:	2a 31       	cpi	r18, 0x1A	; 26
    1096:	31 05       	cpc	r19, r1
    1098:	2c f0       	brlt	.+10     	; 0x10a4 <__pack_f+0x76>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	2a c0       	rjmp	.+84     	; 0x10f8 <__pack_f+0xca>
    10a4:	b8 01       	movw	r22, r16
    10a6:	a7 01       	movw	r20, r14
    10a8:	02 2e       	mov	r0, r18
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__pack_f+0x86>
    10ac:	76 95       	lsr	r23
    10ae:	67 95       	ror	r22
    10b0:	57 95       	ror	r21
    10b2:	47 95       	ror	r20
    10b4:	0a 94       	dec	r0
    10b6:	d2 f7       	brpl	.-12     	; 0x10ac <__pack_f+0x7e>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <__pack_f+0x9c>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	aa 1f       	adc	r26, r26
    10c8:	bb 1f       	adc	r27, r27
    10ca:	2a 95       	dec	r18
    10cc:	d2 f7       	brpl	.-12     	; 0x10c2 <__pack_f+0x94>
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	a1 09       	sbc	r26, r1
    10d2:	b1 09       	sbc	r27, r1
    10d4:	8e 21       	and	r24, r14
    10d6:	9f 21       	and	r25, r15
    10d8:	a0 23       	and	r26, r16
    10da:	b1 23       	and	r27, r17
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	a1 05       	cpc	r26, r1
    10e0:	b1 05       	cpc	r27, r1
    10e2:	21 f0       	breq	.+8      	; 0x10ec <__pack_f+0xbe>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	9a 01       	movw	r18, r20
    10ee:	ab 01       	movw	r20, r22
    10f0:	28 2b       	or	r18, r24
    10f2:	39 2b       	or	r19, r25
    10f4:	4a 2b       	or	r20, r26
    10f6:	5b 2b       	or	r21, r27
    10f8:	da 01       	movw	r26, r20
    10fa:	c9 01       	movw	r24, r18
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    10fe:	90 70       	andi	r25, 0x00	; 0
    1100:	a0 70       	andi	r26, 0x00	; 0
    1102:	b0 70       	andi	r27, 0x00	; 0
    1104:	80 34       	cpi	r24, 0x40	; 64
    1106:	91 05       	cpc	r25, r1
    1108:	a1 05       	cpc	r26, r1
    110a:	b1 05       	cpc	r27, r1
    110c:	39 f4       	brne	.+14     	; 0x111c <__pack_f+0xee>
    110e:	27 ff       	sbrs	r18, 7
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <__pack_f+0xf6>
    1112:	20 5c       	subi	r18, 0xC0	; 192
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	4f 4f       	sbci	r20, 0xFF	; 255
    1118:	5f 4f       	sbci	r21, 0xFF	; 255
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__pack_f+0xf6>
    111c:	21 5c       	subi	r18, 0xC1	; 193
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	4f 4f       	sbci	r20, 0xFF	; 255
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	e0 e0       	ldi	r30, 0x00	; 0
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	20 30       	cpi	r18, 0x00	; 0
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	3a 07       	cpc	r19, r26
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	4a 07       	cpc	r20, r26
    1132:	a0 e4       	ldi	r26, 0x40	; 64
    1134:	5a 07       	cpc	r21, r26
    1136:	10 f0       	brcs	.+4      	; 0x113c <__pack_f+0x10e>
    1138:	e1 e0       	ldi	r30, 0x01	; 1
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	79 01       	movw	r14, r18
    113e:	8a 01       	movw	r16, r20
    1140:	27 c0       	rjmp	.+78     	; 0x1190 <__pack_f+0x162>
    1142:	60 38       	cpi	r22, 0x80	; 128
    1144:	71 05       	cpc	r23, r1
    1146:	64 f5       	brge	.+88     	; 0x11a0 <__pack_f+0x172>
    1148:	fb 01       	movw	r30, r22
    114a:	e1 58       	subi	r30, 0x81	; 129
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	d8 01       	movw	r26, r16
    1150:	c7 01       	movw	r24, r14
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	90 70       	andi	r25, 0x00	; 0
    1156:	a0 70       	andi	r26, 0x00	; 0
    1158:	b0 70       	andi	r27, 0x00	; 0
    115a:	80 34       	cpi	r24, 0x40	; 64
    115c:	91 05       	cpc	r25, r1
    115e:	a1 05       	cpc	r26, r1
    1160:	b1 05       	cpc	r27, r1
    1162:	39 f4       	brne	.+14     	; 0x1172 <__pack_f+0x144>
    1164:	e7 fe       	sbrs	r14, 7
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <__pack_f+0x154>
    1168:	80 e4       	ldi	r24, 0x40	; 64
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	04 c0       	rjmp	.+8      	; 0x117a <__pack_f+0x14c>
    1172:	8f e3       	ldi	r24, 0x3F	; 63
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e8 0e       	add	r14, r24
    117c:	f9 1e       	adc	r15, r25
    117e:	0a 1f       	adc	r16, r26
    1180:	1b 1f       	adc	r17, r27
    1182:	17 ff       	sbrs	r17, 7
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <__pack_f+0x162>
    1186:	16 95       	lsr	r17
    1188:	07 95       	ror	r16
    118a:	f7 94       	ror	r15
    118c:	e7 94       	ror	r14
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	87 e0       	ldi	r24, 0x07	; 7
    1192:	16 95       	lsr	r17
    1194:	07 95       	ror	r16
    1196:	f7 94       	ror	r15
    1198:	e7 94       	ror	r14
    119a:	8a 95       	dec	r24
    119c:	d1 f7       	brne	.-12     	; 0x1192 <__pack_f+0x164>
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <__pack_f+0x17c>
    11a0:	ee 24       	eor	r14, r14
    11a2:	ff 24       	eor	r15, r15
    11a4:	87 01       	movw	r16, r14
    11a6:	ef ef       	ldi	r30, 0xFF	; 255
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	6e 2f       	mov	r22, r30
    11ac:	67 95       	ror	r22
    11ae:	66 27       	eor	r22, r22
    11b0:	67 95       	ror	r22
    11b2:	90 2f       	mov	r25, r16
    11b4:	9f 77       	andi	r25, 0x7F	; 127
    11b6:	d7 94       	ror	r13
    11b8:	dd 24       	eor	r13, r13
    11ba:	d7 94       	ror	r13
    11bc:	8e 2f       	mov	r24, r30
    11be:	86 95       	lsr	r24
    11c0:	49 2f       	mov	r20, r25
    11c2:	46 2b       	or	r20, r22
    11c4:	58 2f       	mov	r21, r24
    11c6:	5d 29       	or	r21, r13
    11c8:	b7 01       	movw	r22, r14
    11ca:	ca 01       	movw	r24, r20
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	08 95       	ret

000011d8 <__unpack_f>:
    11d8:	fc 01       	movw	r30, r24
    11da:	db 01       	movw	r26, r22
    11dc:	40 81       	ld	r20, Z
    11de:	51 81       	ldd	r21, Z+1	; 0x01
    11e0:	22 81       	ldd	r18, Z+2	; 0x02
    11e2:	62 2f       	mov	r22, r18
    11e4:	6f 77       	andi	r22, 0x7F	; 127
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	22 1f       	adc	r18, r18
    11ea:	22 27       	eor	r18, r18
    11ec:	22 1f       	adc	r18, r18
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	89 2f       	mov	r24, r25
    11f2:	88 0f       	add	r24, r24
    11f4:	82 2b       	or	r24, r18
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	99 1f       	adc	r25, r25
    11fc:	99 27       	eor	r25, r25
    11fe:	99 1f       	adc	r25, r25
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	9c 93       	st	X, r25
    1204:	11 97       	sbiw	r26, 0x01	; 1
    1206:	21 15       	cp	r18, r1
    1208:	31 05       	cpc	r19, r1
    120a:	a9 f5       	brne	.+106    	; 0x1276 <__unpack_f+0x9e>
    120c:	41 15       	cp	r20, r1
    120e:	51 05       	cpc	r21, r1
    1210:	61 05       	cpc	r22, r1
    1212:	71 05       	cpc	r23, r1
    1214:	11 f4       	brne	.+4      	; 0x121a <__unpack_f+0x42>
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	37 c0       	rjmp	.+110    	; 0x1288 <__unpack_f+0xb0>
    121a:	82 e8       	ldi	r24, 0x82	; 130
    121c:	9f ef       	ldi	r25, 0xFF	; 255
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
    1224:	12 97       	sbiw	r26, 0x02	; 2
    1226:	9a 01       	movw	r18, r20
    1228:	ab 01       	movw	r20, r22
    122a:	67 e0       	ldi	r22, 0x07	; 7
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	44 1f       	adc	r20, r20
    1232:	55 1f       	adc	r21, r21
    1234:	6a 95       	dec	r22
    1236:	d1 f7       	brne	.-12     	; 0x122c <__unpack_f+0x54>
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	8c 93       	st	X, r24
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <__unpack_f+0x80>
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	44 1f       	adc	r20, r20
    1244:	55 1f       	adc	r21, r21
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	8d 91       	ld	r24, X+
    124a:	9c 91       	ld	r25, X
    124c:	13 97       	sbiw	r26, 0x03	; 3
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	13 96       	adiw	r26, 0x03	; 3
    1252:	9c 93       	st	X, r25
    1254:	8e 93       	st	-X, r24
    1256:	12 97       	sbiw	r26, 0x02	; 2
    1258:	20 30       	cpi	r18, 0x00	; 0
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	38 07       	cpc	r19, r24
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	48 07       	cpc	r20, r24
    1262:	80 e4       	ldi	r24, 0x40	; 64
    1264:	58 07       	cpc	r21, r24
    1266:	58 f3       	brcs	.-42     	; 0x123e <__unpack_f+0x66>
    1268:	14 96       	adiw	r26, 0x04	; 4
    126a:	2d 93       	st	X+, r18
    126c:	3d 93       	st	X+, r19
    126e:	4d 93       	st	X+, r20
    1270:	5c 93       	st	X, r21
    1272:	17 97       	sbiw	r26, 0x07	; 7
    1274:	08 95       	ret
    1276:	2f 3f       	cpi	r18, 0xFF	; 255
    1278:	31 05       	cpc	r19, r1
    127a:	79 f4       	brne	.+30     	; 0x129a <__unpack_f+0xc2>
    127c:	41 15       	cp	r20, r1
    127e:	51 05       	cpc	r21, r1
    1280:	61 05       	cpc	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	19 f4       	brne	.+6      	; 0x128c <__unpack_f+0xb4>
    1286:	84 e0       	ldi	r24, 0x04	; 4
    1288:	8c 93       	st	X, r24
    128a:	08 95       	ret
    128c:	64 ff       	sbrs	r22, 4
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <__unpack_f+0xbe>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8c 93       	st	X, r24
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <__unpack_f+0xe2>
    1296:	1c 92       	st	X, r1
    1298:	10 c0       	rjmp	.+32     	; 0x12ba <__unpack_f+0xe2>
    129a:	2f 57       	subi	r18, 0x7F	; 127
    129c:	30 40       	sbci	r19, 0x00	; 0
    129e:	13 96       	adiw	r26, 0x03	; 3
    12a0:	3c 93       	st	X, r19
    12a2:	2e 93       	st	-X, r18
    12a4:	12 97       	sbiw	r26, 0x02	; 2
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	8c 93       	st	X, r24
    12aa:	87 e0       	ldi	r24, 0x07	; 7
    12ac:	44 0f       	add	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	66 1f       	adc	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	8a 95       	dec	r24
    12b6:	d1 f7       	brne	.-12     	; 0x12ac <__unpack_f+0xd4>
    12b8:	70 64       	ori	r23, 0x40	; 64
    12ba:	14 96       	adiw	r26, 0x04	; 4
    12bc:	4d 93       	st	X+, r20
    12be:	5d 93       	st	X+, r21
    12c0:	6d 93       	st	X+, r22
    12c2:	7c 93       	st	X, r23
    12c4:	17 97       	sbiw	r26, 0x07	; 7
    12c6:	08 95       	ret

000012c8 <__fpcmp_parts_f>:
    12c8:	1f 93       	push	r17
    12ca:	dc 01       	movw	r26, r24
    12cc:	fb 01       	movw	r30, r22
    12ce:	9c 91       	ld	r25, X
    12d0:	92 30       	cpi	r25, 0x02	; 2
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__fpcmp_parts_f+0xe>
    12d4:	47 c0       	rjmp	.+142    	; 0x1364 <__fpcmp_parts_f+0x9c>
    12d6:	80 81       	ld	r24, Z
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	08 f4       	brcc	.+2      	; 0x12de <__fpcmp_parts_f+0x16>
    12dc:	43 c0       	rjmp	.+134    	; 0x1364 <__fpcmp_parts_f+0x9c>
    12de:	94 30       	cpi	r25, 0x04	; 4
    12e0:	51 f4       	brne	.+20     	; 0x12f6 <__fpcmp_parts_f+0x2e>
    12e2:	11 96       	adiw	r26, 0x01	; 1
    12e4:	1c 91       	ld	r17, X
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	99 f5       	brne	.+102    	; 0x1350 <__fpcmp_parts_f+0x88>
    12ea:	81 81       	ldd	r24, Z+1	; 0x01
    12ec:	68 2f       	mov	r22, r24
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	61 1b       	sub	r22, r17
    12f2:	71 09       	sbc	r23, r1
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <__fpcmp_parts_f+0xac>
    12f6:	84 30       	cpi	r24, 0x04	; 4
    12f8:	21 f0       	breq	.+8      	; 0x1302 <__fpcmp_parts_f+0x3a>
    12fa:	92 30       	cpi	r25, 0x02	; 2
    12fc:	31 f4       	brne	.+12     	; 0x130a <__fpcmp_parts_f+0x42>
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	b9 f1       	breq	.+110    	; 0x1370 <__fpcmp_parts_f+0xa8>
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	88 23       	and	r24, r24
    1306:	89 f1       	breq	.+98     	; 0x136a <__fpcmp_parts_f+0xa2>
    1308:	2d c0       	rjmp	.+90     	; 0x1364 <__fpcmp_parts_f+0x9c>
    130a:	11 96       	adiw	r26, 0x01	; 1
    130c:	1c 91       	ld	r17, X
    130e:	11 97       	sbiw	r26, 0x01	; 1
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	f1 f0       	breq	.+60     	; 0x1350 <__fpcmp_parts_f+0x88>
    1314:	81 81       	ldd	r24, Z+1	; 0x01
    1316:	18 17       	cp	r17, r24
    1318:	d9 f4       	brne	.+54     	; 0x1350 <__fpcmp_parts_f+0x88>
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	2d 91       	ld	r18, X+
    131e:	3c 91       	ld	r19, X
    1320:	13 97       	sbiw	r26, 0x03	; 3
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	82 17       	cp	r24, r18
    1328:	93 07       	cpc	r25, r19
    132a:	94 f0       	brlt	.+36     	; 0x1350 <__fpcmp_parts_f+0x88>
    132c:	28 17       	cp	r18, r24
    132e:	39 07       	cpc	r19, r25
    1330:	bc f0       	brlt	.+46     	; 0x1360 <__fpcmp_parts_f+0x98>
    1332:	14 96       	adiw	r26, 0x04	; 4
    1334:	8d 91       	ld	r24, X+
    1336:	9d 91       	ld	r25, X+
    1338:	0d 90       	ld	r0, X+
    133a:	bc 91       	ld	r27, X
    133c:	a0 2d       	mov	r26, r0
    133e:	24 81       	ldd	r18, Z+4	; 0x04
    1340:	35 81       	ldd	r19, Z+5	; 0x05
    1342:	46 81       	ldd	r20, Z+6	; 0x06
    1344:	57 81       	ldd	r21, Z+7	; 0x07
    1346:	28 17       	cp	r18, r24
    1348:	39 07       	cpc	r19, r25
    134a:	4a 07       	cpc	r20, r26
    134c:	5b 07       	cpc	r21, r27
    134e:	18 f4       	brcc	.+6      	; 0x1356 <__fpcmp_parts_f+0x8e>
    1350:	11 23       	and	r17, r17
    1352:	41 f0       	breq	.+16     	; 0x1364 <__fpcmp_parts_f+0x9c>
    1354:	0a c0       	rjmp	.+20     	; 0x136a <__fpcmp_parts_f+0xa2>
    1356:	82 17       	cp	r24, r18
    1358:	93 07       	cpc	r25, r19
    135a:	a4 07       	cpc	r26, r20
    135c:	b5 07       	cpc	r27, r21
    135e:	40 f4       	brcc	.+16     	; 0x1370 <__fpcmp_parts_f+0xa8>
    1360:	11 23       	and	r17, r17
    1362:	19 f0       	breq	.+6      	; 0x136a <__fpcmp_parts_f+0xa2>
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <__fpcmp_parts_f+0xac>
    136a:	6f ef       	ldi	r22, 0xFF	; 255
    136c:	7f ef       	ldi	r23, 0xFF	; 255
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <__fpcmp_parts_f+0xac>
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	cb 01       	movw	r24, r22
    1376:	1f 91       	pop	r17
    1378:	08 95       	ret

0000137a <__mulsi3>:
    137a:	62 9f       	mul	r22, r18
    137c:	d0 01       	movw	r26, r0
    137e:	73 9f       	mul	r23, r19
    1380:	f0 01       	movw	r30, r0
    1382:	82 9f       	mul	r24, r18
    1384:	e0 0d       	add	r30, r0
    1386:	f1 1d       	adc	r31, r1
    1388:	64 9f       	mul	r22, r20
    138a:	e0 0d       	add	r30, r0
    138c:	f1 1d       	adc	r31, r1
    138e:	92 9f       	mul	r25, r18
    1390:	f0 0d       	add	r31, r0
    1392:	83 9f       	mul	r24, r19
    1394:	f0 0d       	add	r31, r0
    1396:	74 9f       	mul	r23, r20
    1398:	f0 0d       	add	r31, r0
    139a:	65 9f       	mul	r22, r21
    139c:	f0 0d       	add	r31, r0
    139e:	99 27       	eor	r25, r25
    13a0:	72 9f       	mul	r23, r18
    13a2:	b0 0d       	add	r27, r0
    13a4:	e1 1d       	adc	r30, r1
    13a6:	f9 1f       	adc	r31, r25
    13a8:	63 9f       	mul	r22, r19
    13aa:	b0 0d       	add	r27, r0
    13ac:	e1 1d       	adc	r30, r1
    13ae:	f9 1f       	adc	r31, r25
    13b0:	bd 01       	movw	r22, r26
    13b2:	cf 01       	movw	r24, r30
    13b4:	11 24       	eor	r1, r1
    13b6:	08 95       	ret

000013b8 <__divmodhi4>:
    13b8:	97 fb       	bst	r25, 7
    13ba:	09 2e       	mov	r0, r25
    13bc:	07 26       	eor	r0, r23
    13be:	0a d0       	rcall	.+20     	; 0x13d4 <__divmodhi4_neg1>
    13c0:	77 fd       	sbrc	r23, 7
    13c2:	04 d0       	rcall	.+8      	; 0x13cc <__divmodhi4_neg2>
    13c4:	27 d0       	rcall	.+78     	; 0x1414 <__udivmodhi4>
    13c6:	06 d0       	rcall	.+12     	; 0x13d4 <__divmodhi4_neg1>
    13c8:	00 20       	and	r0, r0
    13ca:	1a f4       	brpl	.+6      	; 0x13d2 <__divmodhi4_exit>

000013cc <__divmodhi4_neg2>:
    13cc:	70 95       	com	r23
    13ce:	61 95       	neg	r22
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255

000013d2 <__divmodhi4_exit>:
    13d2:	08 95       	ret

000013d4 <__divmodhi4_neg1>:
    13d4:	f6 f7       	brtc	.-4      	; 0x13d2 <__divmodhi4_exit>
    13d6:	90 95       	com	r25
    13d8:	81 95       	neg	r24
    13da:	9f 4f       	sbci	r25, 0xFF	; 255
    13dc:	08 95       	ret

000013de <__divmodsi4>:
    13de:	97 fb       	bst	r25, 7
    13e0:	09 2e       	mov	r0, r25
    13e2:	05 26       	eor	r0, r21
    13e4:	0e d0       	rcall	.+28     	; 0x1402 <__divmodsi4_neg1>
    13e6:	57 fd       	sbrc	r21, 7
    13e8:	04 d0       	rcall	.+8      	; 0x13f2 <__divmodsi4_neg2>
    13ea:	28 d0       	rcall	.+80     	; 0x143c <__udivmodsi4>
    13ec:	0a d0       	rcall	.+20     	; 0x1402 <__divmodsi4_neg1>
    13ee:	00 1c       	adc	r0, r0
    13f0:	38 f4       	brcc	.+14     	; 0x1400 <__divmodsi4_exit>

000013f2 <__divmodsi4_neg2>:
    13f2:	50 95       	com	r21
    13f4:	40 95       	com	r20
    13f6:	30 95       	com	r19
    13f8:	21 95       	neg	r18
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	4f 4f       	sbci	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001400 <__divmodsi4_exit>:
    1400:	08 95       	ret

00001402 <__divmodsi4_neg1>:
    1402:	f6 f7       	brtc	.-4      	; 0x1400 <__divmodsi4_exit>
    1404:	90 95       	com	r25
    1406:	80 95       	com	r24
    1408:	70 95       	com	r23
    140a:	61 95       	neg	r22
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	8f 4f       	sbci	r24, 0xFF	; 255
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	08 95       	ret

00001414 <__udivmodhi4>:
    1414:	aa 1b       	sub	r26, r26
    1416:	bb 1b       	sub	r27, r27
    1418:	51 e1       	ldi	r21, 0x11	; 17
    141a:	07 c0       	rjmp	.+14     	; 0x142a <__udivmodhi4_ep>

0000141c <__udivmodhi4_loop>:
    141c:	aa 1f       	adc	r26, r26
    141e:	bb 1f       	adc	r27, r27
    1420:	a6 17       	cp	r26, r22
    1422:	b7 07       	cpc	r27, r23
    1424:	10 f0       	brcs	.+4      	; 0x142a <__udivmodhi4_ep>
    1426:	a6 1b       	sub	r26, r22
    1428:	b7 0b       	sbc	r27, r23

0000142a <__udivmodhi4_ep>:
    142a:	88 1f       	adc	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	5a 95       	dec	r21
    1430:	a9 f7       	brne	.-22     	; 0x141c <__udivmodhi4_loop>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	08 95       	ret

0000143c <__udivmodsi4>:
    143c:	a1 e2       	ldi	r26, 0x21	; 33
    143e:	1a 2e       	mov	r1, r26
    1440:	aa 1b       	sub	r26, r26
    1442:	bb 1b       	sub	r27, r27
    1444:	fd 01       	movw	r30, r26
    1446:	0d c0       	rjmp	.+26     	; 0x1462 <__udivmodsi4_ep>

00001448 <__udivmodsi4_loop>:
    1448:	aa 1f       	adc	r26, r26
    144a:	bb 1f       	adc	r27, r27
    144c:	ee 1f       	adc	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	a2 17       	cp	r26, r18
    1452:	b3 07       	cpc	r27, r19
    1454:	e4 07       	cpc	r30, r20
    1456:	f5 07       	cpc	r31, r21
    1458:	20 f0       	brcs	.+8      	; 0x1462 <__udivmodsi4_ep>
    145a:	a2 1b       	sub	r26, r18
    145c:	b3 0b       	sbc	r27, r19
    145e:	e4 0b       	sbc	r30, r20
    1460:	f5 0b       	sbc	r31, r21

00001462 <__udivmodsi4_ep>:
    1462:	66 1f       	adc	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	88 1f       	adc	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	1a 94       	dec	r1
    146c:	69 f7       	brne	.-38     	; 0x1448 <__udivmodsi4_loop>
    146e:	60 95       	com	r22
    1470:	70 95       	com	r23
    1472:	80 95       	com	r24
    1474:	90 95       	com	r25
    1476:	9b 01       	movw	r18, r22
    1478:	ac 01       	movw	r20, r24
    147a:	bd 01       	movw	r22, r26
    147c:	cf 01       	movw	r24, r30
    147e:	08 95       	ret

00001480 <__prologue_saves__>:
    1480:	2f 92       	push	r2
    1482:	3f 92       	push	r3
    1484:	4f 92       	push	r4
    1486:	5f 92       	push	r5
    1488:	6f 92       	push	r6
    148a:	7f 92       	push	r7
    148c:	8f 92       	push	r8
    148e:	9f 92       	push	r9
    1490:	af 92       	push	r10
    1492:	bf 92       	push	r11
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	ca 1b       	sub	r28, r26
    14aa:	db 0b       	sbc	r29, r27
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	09 94       	ijmp

000014b8 <__epilogue_restores__>:
    14b8:	2a 88       	ldd	r2, Y+18	; 0x12
    14ba:	39 88       	ldd	r3, Y+17	; 0x11
    14bc:	48 88       	ldd	r4, Y+16	; 0x10
    14be:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ca:	b9 84       	ldd	r11, Y+9	; 0x09
    14cc:	c8 84       	ldd	r12, Y+8	; 0x08
    14ce:	df 80       	ldd	r13, Y+7	; 0x07
    14d0:	ee 80       	ldd	r14, Y+6	; 0x06
    14d2:	fd 80       	ldd	r15, Y+5	; 0x05
    14d4:	0c 81       	ldd	r16, Y+4	; 0x04
    14d6:	1b 81       	ldd	r17, Y+3	; 0x03
    14d8:	aa 81       	ldd	r26, Y+2	; 0x02
    14da:	b9 81       	ldd	r27, Y+1	; 0x01
    14dc:	ce 0f       	add	r28, r30
    14de:	d1 1d       	adc	r29, r1
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	ed 01       	movw	r28, r26
    14ec:	08 95       	ret

000014ee <do_rand>:
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ec e7       	ldi	r30, 0x7C	; 124
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	cc cf       	rjmp	.-104    	; 0x1490 <__prologue_saves__+0x10>
    14f8:	ec 01       	movw	r28, r24
    14fa:	a8 80       	ld	r10, Y
    14fc:	b9 80       	ldd	r11, Y+1	; 0x01
    14fe:	ca 80       	ldd	r12, Y+2	; 0x02
    1500:	db 80       	ldd	r13, Y+3	; 0x03
    1502:	a1 14       	cp	r10, r1
    1504:	b1 04       	cpc	r11, r1
    1506:	c1 04       	cpc	r12, r1
    1508:	d1 04       	cpc	r13, r1
    150a:	41 f4       	brne	.+16     	; 0x151c <do_rand+0x2e>
    150c:	84 e2       	ldi	r24, 0x24	; 36
    150e:	a8 2e       	mov	r10, r24
    1510:	89 ed       	ldi	r24, 0xD9	; 217
    1512:	b8 2e       	mov	r11, r24
    1514:	8b e5       	ldi	r24, 0x5B	; 91
    1516:	c8 2e       	mov	r12, r24
    1518:	87 e0       	ldi	r24, 0x07	; 7
    151a:	d8 2e       	mov	r13, r24
    151c:	c6 01       	movw	r24, r12
    151e:	b5 01       	movw	r22, r10
    1520:	2d e1       	ldi	r18, 0x1D	; 29
    1522:	33 ef       	ldi	r19, 0xF3	; 243
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	5a df       	rcall	.-332    	; 0x13de <__divmodsi4>
    152a:	27 ea       	ldi	r18, 0xA7	; 167
    152c:	31 e4       	ldi	r19, 0x41	; 65
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	23 df       	rcall	.-442    	; 0x137a <__mulsi3>
    1534:	7b 01       	movw	r14, r22
    1536:	8c 01       	movw	r16, r24
    1538:	c6 01       	movw	r24, r12
    153a:	b5 01       	movw	r22, r10
    153c:	2d e1       	ldi	r18, 0x1D	; 29
    153e:	33 ef       	ldi	r19, 0xF3	; 243
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	4c df       	rcall	.-360    	; 0x13de <__divmodsi4>
    1546:	ca 01       	movw	r24, r20
    1548:	b9 01       	movw	r22, r18
    154a:	2c ee       	ldi	r18, 0xEC	; 236
    154c:	34 ef       	ldi	r19, 0xF4	; 244
    154e:	4f ef       	ldi	r20, 0xFF	; 255
    1550:	5f ef       	ldi	r21, 0xFF	; 255
    1552:	13 df       	rcall	.-474    	; 0x137a <__mulsi3>
    1554:	6e 0d       	add	r22, r14
    1556:	7f 1d       	adc	r23, r15
    1558:	80 1f       	adc	r24, r16
    155a:	91 1f       	adc	r25, r17
    155c:	97 ff       	sbrs	r25, 7
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <do_rand+0x7a>
    1560:	61 50       	subi	r22, 0x01	; 1
    1562:	70 40       	sbci	r23, 0x00	; 0
    1564:	80 40       	sbci	r24, 0x00	; 0
    1566:	90 48       	sbci	r25, 0x80	; 128
    1568:	68 83       	st	Y, r22
    156a:	79 83       	std	Y+1, r23	; 0x01
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	9b 83       	std	Y+3, r25	; 0x03
    1570:	9b 01       	movw	r18, r22
    1572:	3f 77       	andi	r19, 0x7F	; 127
    1574:	c9 01       	movw	r24, r18
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	ea e0       	ldi	r30, 0x0A	; 10
    157c:	a5 cf       	rjmp	.-182    	; 0x14c8 <__epilogue_restores__+0x10>

0000157e <rand_r>:
    157e:	b7 df       	rcall	.-146    	; 0x14ee <do_rand>
    1580:	08 95       	ret

00001582 <rand>:
    1582:	83 e7       	ldi	r24, 0x73	; 115
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	b3 df       	rcall	.-154    	; 0x14ee <do_rand>
    1588:	08 95       	ret

0000158a <srand>:
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	80 93 73 01 	sts	0x0173, r24
    1592:	90 93 74 01 	sts	0x0174, r25
    1596:	a0 93 75 01 	sts	0x0175, r26
    159a:	b0 93 76 01 	sts	0x0176, r27
    159e:	08 95       	ret

000015a0 <_exit>:
    15a0:	f8 94       	cli

000015a2 <__stop_program>:
    15a2:	ff cf       	rjmp	.-2      	; 0x15a2 <__stop_program>
