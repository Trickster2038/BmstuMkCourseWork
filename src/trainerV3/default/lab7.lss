
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000159c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000159c  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800178  00800178  00001748  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000500  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a32  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001643  00000000  00000000  000048da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019d1  00000000  00000000  00005f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  000078f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba3  00000000  00000000  000081c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00008d64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
       c:	2a c0       	rjmp	.+84     	; 0x62 <__vector_6>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
      12:	af c1       	rjmp	.+862    	; 0x372 <__vector_9>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	11 e0       	ldi	r17, 0x01	; 1
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	ec e9       	ldi	r30, 0x9C	; 156
      3e:	f5 e1       	ldi	r31, 0x15	; 21
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a8 37       	cpi	r26, 0x78	; 120
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a8 e7       	ldi	r26, 0x78	; 120
      50:	b1 e0       	ldi	r27, 0x01	; 1
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	af 3a       	cpi	r26, 0xAF	; 175
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	52 d0       	rcall	.+164    	; 0x102 <main>
      5e:	9c ca       	rjmp	.-2760   	; 0xfffff598 <__eeprom_end+0xff7ef598>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <__vector_6>:
long sum_timer_ms = 0;

long results[K];

ISR (TIMER1_COMPA_vect)
{
      62:	1f 92       	push	r1
      64:	0f 92       	push	r0
      66:	0f b6       	in	r0, 0x3f	; 63
      68:	0f 92       	push	r0
      6a:	11 24       	eor	r1, r1
      6c:	8f 93       	push	r24
      6e:	9f 93       	push	r25
      70:	af 93       	push	r26
      72:	bf 93       	push	r27
  timer_ms++;
      74:	80 91 7c 01 	lds	r24, 0x017C
      78:	90 91 7d 01 	lds	r25, 0x017D
      7c:	a0 91 7e 01 	lds	r26, 0x017E
      80:	b0 91 7f 01 	lds	r27, 0x017F
      84:	01 96       	adiw	r24, 0x01	; 1
      86:	a1 1d       	adc	r26, r1
      88:	b1 1d       	adc	r27, r1
      8a:	80 93 7c 01 	sts	0x017C, r24
      8e:	90 93 7d 01 	sts	0x017D, r25
      92:	a0 93 7e 01 	sts	0x017E, r26
      96:	b0 93 7f 01 	sts	0x017F, r27
  timer_control++; // for debug
      9a:	80 91 96 01 	lds	r24, 0x0196
      9e:	90 91 97 01 	lds	r25, 0x0197
      a2:	a0 91 98 01 	lds	r26, 0x0198
      a6:	b0 91 99 01 	lds	r27, 0x0199
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	a1 1d       	adc	r26, r1
      ae:	b1 1d       	adc	r27, r1
      b0:	80 93 96 01 	sts	0x0196, r24
      b4:	90 93 97 01 	sts	0x0197, r25
      b8:	a0 93 98 01 	sts	0x0198, r26
      bc:	b0 93 99 01 	sts	0x0199, r27
  TCNT1=0; //clear ticks
      c0:	1d bc       	out	0x2d, r1	; 45
      c2:	1c bc       	out	0x2c, r1	; 44
}
      c4:	bf 91       	pop	r27
      c6:	af 91       	pop	r26
      c8:	9f 91       	pop	r25
      ca:	8f 91       	pop	r24
      cc:	0f 90       	pop	r0
      ce:	0f be       	out	0x3f, r0	; 63
      d0:	0f 90       	pop	r0
      d2:	1f 90       	pop	r1
      d4:	18 95       	reti

000000d6 <init_main>:
		display_flash_once();
	}
}

void init_main(void){
	timer1_init();
      d6:	66 d3       	rcall	.+1740   	; 0x7a4 <timer1_init>
	DDRA=0xF0;
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F; // resistors on buttons
      dc:	8f e0       	ldi	r24, 0x0F	; 15
      de:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF; // PORTC - OUTPUT
      e0:	8f ef       	ldi	r24, 0xFF	; 255
      e2:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF; // PORTB - OUTPUT
      e4:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; // PORTD - OUTPUT
      e6:	81 bb       	out	0x11, r24	; 17
	display_init_timer0();
      e8:	d9 d2       	rcall	.+1458   	; 0x69c <display_init_timer0>
	uart_init();
      ea:	9b d1       	rcall	.+822    	; 0x422 <uart_init>
	sei();
      ec:	78 94       	sei

	display_off();
      ee:	c0 d2       	rcall	.+1408   	; 0x670 <display_off>
	led_line = leds_random_line();
      f0:	01 d3       	rcall	.+1538   	; 0x6f4 <leds_random_line>
      f2:	80 93 7a 01 	sts	0x017A, r24
	display_set_long(0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	57 d2       	rcall	.+1198   	; 0x5ae <display_set_long>
}
     100:	08 95       	ret

00000102 <main>:

int main(){
     102:	9f 92       	push	r9
     104:	af 92       	push	r10
     106:	bf 92       	push	r11
     108:	cf 92       	push	r12
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
	init_main();
     118:	de df       	rcall	.-68     	; 0xd6 <init_main>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     11a:	c4 e6       	ldi	r28, 0x64	; 100
     11c:	d0 e0       	ldi	r29, 0x00	; 0

			_delay_ms(delay_amount);	
		} else {
			if(key == 9){
				display_set_long(0);
				display_on = 1;
     11e:	99 24       	eor	r9, r9
     120:	93 94       	inc	r9

int main(){
	init_main();

	while(1){
		key = keyboard_get_state();
     122:	4e d1       	rcall	.+668    	; 0x3c0 <keyboard_get_state>
     124:	98 2f       	mov	r25, r24
     126:	80 93 79 01 	sts	0x0179, r24

		if(active == 1){
     12a:	80 91 7b 01 	lds	r24, 0x017B
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	09 f0       	breq	.+2      	; 0x134 <main+0x32>
     132:	de c0       	rjmp	.+444    	; 0x2f0 <__stack+0x91>
			leds_move_column();
     134:	b9 d2       	rcall	.+1394   	; 0x6a8 <leds_move_column>
			leds_update();
     136:	d1 d2       	rcall	.+1442   	; 0x6da <leds_update>

			if((key != 0) && (key <= 8)){
     138:	90 91 79 01 	lds	r25, 0x0179
     13c:	89 2f       	mov	r24, r25
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	88 30       	cpi	r24, 0x08	; 8
     142:	08 f0       	brcs	.+2      	; 0x146 <main+0x44>
     144:	53 c0       	rjmp	.+166    	; 0x1ec <main+0xea>
				if(key == led_line){
     146:	80 91 7a 01 	lds	r24, 0x017A
     14a:	98 17       	cp	r25, r24
     14c:	09 f0       	breq	.+2      	; 0x150 <main+0x4e>
     14e:	4b c0       	rjmp	.+150    	; 0x1e6 <main+0xe4>
					timer_ms_buff = timer_ms; // not really necessary
     150:	60 91 7c 01 	lds	r22, 0x017C
     154:	70 91 7d 01 	lds	r23, 0x017D
     158:	80 91 7e 01 	lds	r24, 0x017E
     15c:	90 91 7f 01 	lds	r25, 0x017F
     160:	60 93 9a 01 	sts	0x019A, r22
     164:	70 93 9b 01 	sts	0x019B, r23
     168:	80 93 9c 01 	sts	0x019C, r24
     16c:	90 93 9d 01 	sts	0x019D, r25
					display_set_long(timer_ms_buff);
     170:	1e d2       	rcall	.+1084   	; 0x5ae <display_set_long>
					results[(int) tries_counter] = timer_ms_buff;
     172:	60 91 80 01 	lds	r22, 0x0180
     176:	20 91 9a 01 	lds	r18, 0x019A
     17a:	30 91 9b 01 	lds	r19, 0x019B
     17e:	40 91 9c 01 	lds	r20, 0x019C
     182:	50 91 9d 01 	lds	r21, 0x019D
     186:	e6 2f       	mov	r30, r22
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	ee 0f       	add	r30, r30
     18c:	ff 1f       	adc	r31, r31
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	e6 57       	subi	r30, 0x76	; 118
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	20 83       	st	Z, r18
     198:	31 83       	std	Z+1, r19	; 0x01
     19a:	42 83       	std	Z+2, r20	; 0x02
     19c:	53 83       	std	Z+3, r21	; 0x03
					sum_timer_ms += timer_ms_buff;
     19e:	80 91 81 01 	lds	r24, 0x0181
     1a2:	90 91 82 01 	lds	r25, 0x0182
     1a6:	a0 91 83 01 	lds	r26, 0x0183
     1aa:	b0 91 84 01 	lds	r27, 0x0184
     1ae:	82 0f       	add	r24, r18
     1b0:	93 1f       	adc	r25, r19
     1b2:	a4 1f       	adc	r26, r20
     1b4:	b5 1f       	adc	r27, r21
     1b6:	80 93 81 01 	sts	0x0181, r24
     1ba:	90 93 82 01 	sts	0x0182, r25
     1be:	a0 93 83 01 	sts	0x0183, r26
     1c2:	b0 93 84 01 	sts	0x0184, r27
					tries_counter++;
     1c6:	6f 5f       	subi	r22, 0xFF	; 255
     1c8:	60 93 80 01 	sts	0x0180, r22
					timer_ms = 0;
     1cc:	10 92 7c 01 	sts	0x017C, r1
     1d0:	10 92 7d 01 	sts	0x017D, r1
     1d4:	10 92 7e 01 	sts	0x017E, r1
     1d8:	10 92 7f 01 	sts	0x017F, r1
					led_line = leds_random_line();
     1dc:	8b d2       	rcall	.+1302   	; 0x6f4 <leds_random_line>
     1de:	80 93 7a 01 	sts	0x017A, r24
					leds_update(); // why necessary here?
     1e2:	7b d2       	rcall	.+1270   	; 0x6da <leds_update>
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <main+0xea>
				} else {
					buzzer_beep(BUZZER_DELAY);
     1e6:	82 e3       	ldi	r24, 0x32	; 50
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	8c d2       	rcall	.+1304   	; 0x704 <buzzer_beep>
				}
			} 

			if(key == 9){
     1ec:	80 91 79 01 	lds	r24, 0x0179
     1f0:	89 30       	cpi	r24, 0x09	; 9
     1f2:	69 f4       	brne	.+26     	; 0x20e <main+0x10c>
				display_on = 0;
     1f4:	10 92 78 01 	sts	0x0178, r1
				display_off();
     1f8:	3b d2       	rcall	.+1142   	; 0x670 <display_off>
				active = 0;
     1fa:	10 92 7b 01 	sts	0x017B, r1

				leds_off();
     1fe:	78 d2       	rcall	.+1264   	; 0x6f0 <leds_off>
     200:	88 eb       	ldi	r24, 0xB8	; 184
     202:	9b e0       	ldi	r25, 0x0B	; 11
     204:	fe 01       	movw	r30, r28
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <main+0x104>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x102>
				_delay_ms(OTHER_KEYS_DELAY);
			} 

			if((key == 10) && (delay_amount > MIN_DELAY)){
     20e:	80 91 79 01 	lds	r24, 0x0179
     212:	8a 30       	cpi	r24, 0x0A	; 10
     214:	49 f4       	brne	.+18     	; 0x228 <main+0x126>
     216:	80 91 60 00 	lds	r24, 0x0060
     21a:	90 91 61 00 	lds	r25, 0x0061
     21e:	85 36       	cpi	r24, 0x65	; 101
     220:	91 05       	cpc	r25, r1
     222:	8c f0       	brlt	.+34     	; 0x246 <main+0x144>
				delay_amount -= DELAY_STEP;
     224:	0a 97       	sbiw	r24, 0x0a	; 10
     226:	0b c0       	rjmp	.+22     	; 0x23e <main+0x13c>
			}

			if((key == 11) && (delay_amount < MAX_DELAY)){
     228:	8b 30       	cpi	r24, 0x0B	; 11
     22a:	69 f4       	brne	.+26     	; 0x246 <main+0x144>
     22c:	80 91 60 00 	lds	r24, 0x0060
     230:	90 91 61 00 	lds	r25, 0x0061
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	84 3f       	cpi	r24, 0xF4	; 244
     238:	92 07       	cpc	r25, r18
     23a:	2c f4       	brge	.+10     	; 0x246 <main+0x144>
				delay_amount += DELAY_STEP;
     23c:	0a 96       	adiw	r24, 0x0a	; 10
     23e:	90 93 61 00 	sts	0x0061, r25
     242:	80 93 60 00 	sts	0x0060, r24
			}
			
			if(tries_counter == K){
     246:	80 91 80 01 	lds	r24, 0x0180
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	99 f4       	brne	.+38     	; 0x274 <__stack+0x15>
				display_set_long(sum_timer_ms / K);
     24e:	60 91 81 01 	lds	r22, 0x0181
     252:	70 91 82 01 	lds	r23, 0x0182
     256:	80 91 83 01 	lds	r24, 0x0183
     25a:	90 91 84 01 	lds	r25, 0x0184
     25e:	23 e0       	ldi	r18, 0x03	; 3
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	b7 d8       	rcall	.-3730   	; 0xfffff3d6 <__eeprom_end+0xff7ef3d6>
     268:	ca 01       	movw	r24, r20
     26a:	b9 01       	movw	r22, r18
     26c:	a0 d1       	rcall	.+832    	; 0x5ae <display_set_long>
				leds_off();
     26e:	40 d2       	rcall	.+1152   	; 0x6f0 <leds_off>
				active = 0;
     270:	10 92 7b 01 	sts	0x017B, r1
			}			

			_delay_ms(delay_amount);	
     274:	60 91 60 00 	lds	r22, 0x0060
     278:	70 91 61 00 	lds	r23, 0x0061
     27c:	88 27       	eor	r24, r24
     27e:	77 fd       	sbrc	r23, 7
     280:	80 95       	com	r24
     282:	98 2f       	mov	r25, r24
     284:	d6 d5       	rcall	.+2988   	; 0xe32 <__floatsisf>
     286:	5b 01       	movw	r10, r22
     288:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	4a e7       	ldi	r20, 0x7A	; 122
     290:	54 e4       	ldi	r21, 0x44	; 68
     292:	59 d4       	rcall	.+2226   	; 0xb46 <__mulsf3>
     294:	7b 01       	movw	r14, r22
     296:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e8       	ldi	r20, 0x80	; 128
     29e:	5f e3       	ldi	r21, 0x3F	; 63
     2a0:	9d d5       	rcall	.+2874   	; 0xddc <__ltsf2>
     2a2:	88 23       	and	r24, r24
     2a4:	1c f4       	brge	.+6      	; 0x2ac <__stack+0x4d>
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	1e c0       	rjmp	.+60     	; 0x2e8 <__stack+0x89>
		__ticks = 1;
	else if (__tmp > 65535)
     2ac:	c8 01       	movw	r24, r16
     2ae:	b7 01       	movw	r22, r14
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	3f ef       	ldi	r19, 0xFF	; 255
     2b4:	4f e7       	ldi	r20, 0x7F	; 127
     2b6:	57 e4       	ldi	r21, 0x47	; 71
     2b8:	3b d5       	rcall	.+2678   	; 0xd30 <__gtsf2>
     2ba:	18 16       	cp	r1, r24
     2bc:	94 f4       	brge	.+36     	; 0x2e2 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2be:	c6 01       	movw	r24, r12
     2c0:	b5 01       	movw	r22, r10
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e2       	ldi	r20, 0x20	; 32
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	3d d4       	rcall	.+2170   	; 0xb46 <__mulsf3>
     2cc:	78 d2       	rcall	.+1264   	; 0x7be <__fixunssfsi>
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <__stack+0x7b>
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <__stack+0x73>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d6:	61 50       	subi	r22, 0x01	; 1
     2d8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2da:	61 15       	cp	r22, r1
     2dc:	71 05       	cpc	r23, r1
     2de:	c1 f7       	brne	.-16     	; 0x2d0 <__stack+0x71>
     2e0:	20 cf       	rjmp	.-448    	; 0x122 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e2:	c8 01       	movw	r24, r16
     2e4:	b7 01       	movw	r22, r14
     2e6:	6b d2       	rcall	.+1238   	; 0x7be <__fixunssfsi>
     2e8:	cb 01       	movw	r24, r22
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__stack+0x8b>
     2ee:	19 cf       	rjmp	.-462    	; 0x122 <main+0x20>
		} else {
			if(key == 9){
     2f0:	99 30       	cpi	r25, 0x09	; 9
     2f2:	f1 f4       	brne	.+60     	; 0x330 <__stack+0xd1>
				display_set_long(0);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	58 d1       	rcall	.+688    	; 0x5ae <display_set_long>
				display_on = 1;
     2fe:	90 92 78 01 	sts	0x0178, r9
				active = 1;
     302:	90 92 7b 01 	sts	0x017B, r9

				tries_counter = 0;
     306:	10 92 80 01 	sts	0x0180, r1
				sum_timer_ms = 0;
     30a:	10 92 81 01 	sts	0x0181, r1
     30e:	10 92 82 01 	sts	0x0182, r1
     312:	10 92 83 01 	sts	0x0183, r1
     316:	10 92 84 01 	sts	0x0184, r1
				timer_ms = 0;
     31a:	10 92 7c 01 	sts	0x017C, r1
     31e:	10 92 7d 01 	sts	0x017D, r1
     322:	10 92 7e 01 	sts	0x017E, r1
     326:	10 92 7f 01 	sts	0x017F, r1
				led_line = leds_random_line(); // refresh line after reset
     32a:	e4 d1       	rcall	.+968    	; 0x6f4 <leds_random_line>
     32c:	80 93 7a 01 	sts	0x017A, r24
			} 

			if(key == 12){
     330:	80 91 79 01 	lds	r24, 0x0179
     334:	8c 30       	cpi	r24, 0x0C	; 12
     336:	a9 f4       	brne	.+42     	; 0x362 <__stack+0x103>
				if(tries_counter == K){
     338:	80 91 80 01 	lds	r24, 0x0180
     33c:	83 30       	cpi	r24, 0x03	; 3
     33e:	89 f4       	brne	.+34     	; 0x362 <__stack+0x103>
					uart_send_data(results, K, sum_timer_ms / K);
     340:	60 91 81 01 	lds	r22, 0x0181
     344:	70 91 82 01 	lds	r23, 0x0182
     348:	80 91 83 01 	lds	r24, 0x0183
     34c:	90 91 84 01 	lds	r25, 0x0184
     350:	23 e0       	ldi	r18, 0x03	; 3
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	3e d8       	rcall	.-3972   	; 0xfffff3d6 <__eeprom_end+0xff7ef3d6>
     35a:	8a e8       	ldi	r24, 0x8A	; 138
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	63 e0       	ldi	r22, 0x03	; 3
     360:	c0 d0       	rcall	.+384    	; 0x4e2 <uart_send_data>
     362:	88 eb       	ldi	r24, 0xB8	; 184
     364:	9b e0       	ldi	r25, 0x0B	; 11
     366:	fe 01       	movw	r30, r28
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <__stack+0x109>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     36e:	d9 f7       	brne	.-10     	; 0x366 <__stack+0x107>
     370:	d8 ce       	rjmp	.-592    	; 0x122 <main+0x20>

00000372 <__vector_9>:
  timer_ms++;
  timer_control++; // for debug
  TCNT1=0; //clear ticks
}

ISR (TIMER0_OVF_vect){
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
	if(display_on == 1){
     394:	80 91 78 01 	lds	r24, 0x0178
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	09 f4       	brne	.+2      	; 0x39e <__vector_9+0x2c>
		display_flash_once();
     39c:	6d d1       	rcall	.+730    	; 0x678 <display_flash_once>
	}
}
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <keyboard_get_state>:
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     3c0:	10 92 85 01 	sts	0x0185, r1
     3c4:	40 91 86 01 	lds	r20, 0x0186
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	23 c0       	rjmp	.+70     	; 0x412 <keyboard_get_state+0x52>
    { 
       PORTA=portState[(int) i];
     3cc:	e5 2f       	mov	r30, r21
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	ee 59       	subi	r30, 0x9E	; 158
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	80 81       	ld	r24, Z
     3d6:	8b bb       	out	0x1b, r24	; 27
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	18 c0       	rjmp	.+48     	; 0x40c <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[(int) j])==0))
     3dc:	89 b3       	in	r24, 0x19	; 25
     3de:	24 2f       	mov	r18, r20
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	64 2f       	mov	r22, r20
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	f9 01       	movw	r30, r18
     3e8:	ea 59       	subi	r30, 0x9A	; 154
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	90 81       	ld	r25, Z
     3ee:	89 23       	and	r24, r25
     3f0:	61 f4       	brne	.+24     	; 0x40a <keyboard_get_state+0x4a>
     3f2:	40 93 86 01 	sts	0x0186, r20
     3f6:	50 93 85 01 	sts	0x0185, r21
          {
		  	return (j*4 + i + 1);
     3fa:	85 2f       	mov	r24, r21
     3fc:	8f 5f       	subi	r24, 0xFF	; 255
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	82 0f       	add	r24, r18
     408:	08 95       	ret
     40a:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[(int) i];
       for(j=0; j<4; j++)
     40c:	44 30       	cpi	r20, 0x04	; 4
     40e:	31 f7       	brne	.-52     	; 0x3dc <keyboard_get_state+0x1c>
     410:	5f 5f       	subi	r21, 0xFF	; 255
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     412:	54 30       	cpi	r21, 0x04	; 4
     414:	d8 f2       	brcs	.-74     	; 0x3cc <keyboard_get_state+0xc>
     416:	40 93 86 01 	sts	0x0186, r20
     41a:	50 93 85 01 	sts	0x0185, r21
     41e:	80 e0       	ldi	r24, 0x00	; 0
		  	return (j*4 + i + 1);
          }
       }                          
    }
	return 0;  
}
     420:	08 95       	ret

00000422 <uart_init>:
long divider;
char cnt;
char i;

void uart_init() {
    UBRRH = UBRRH_VALUE;
     422:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
     424:	89 e1       	ldi	r24, 0x19	; 25
     426:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= (1 << U2X);
#else
    UCSRA &= ~(1 << U2X);
     428:	59 98       	cbi	0x0b, 1	; 11
#endif

    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	80 bd       	out	0x20, r24	; 32
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	8a b9       	out	0x0a, r24	; 10
}
     432:	08 95       	ret

00000434 <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     434:	5d 9b       	sbis	0x0b, 5	; 11
     436:	fe cf       	rjmp	.-4      	; 0x434 <uart_send_byte>
   UDR = c;
     438:	8c b9       	out	0x0c, r24	; 12
}
     43a:	08 95       	ret

0000043c <uart_send_long>:

void uart_send_long(long data) {
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	5b 01       	movw	r10, r22
     44e:	6c 01       	movw	r12, r24
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	e8 2e       	mov	r14, r24
     454:	f1 2c       	mov	r15, r1
     456:	01 2d       	mov	r16, r1
     458:	11 2d       	mov	r17, r1
	divider = 1; 
	while((divider*10) < data){
     45a:	c8 01       	movw	r24, r16
     45c:	b7 01       	movw	r22, r14
     45e:	2a e0       	ldi	r18, 0x0A	; 10
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	85 d7       	rcall	.+3850   	; 0x1372 <__mulsi3>
     468:	6a 15       	cp	r22, r10
     46a:	7b 05       	cpc	r23, r11
     46c:	8c 05       	cpc	r24, r12
     46e:	9d 05       	cpc	r25, r13
     470:	f4 f4       	brge	.+60     	; 0x4ae <uart_send_long+0x72>
     472:	7b 01       	movw	r14, r22
     474:	8c 01       	movw	r16, r24
     476:	f1 cf       	rjmp	.-30     	; 0x45a <uart_send_long+0x1e>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     478:	5d 9b       	sbis	0x0b, 5	; 11
     47a:	fe cf       	rjmp	.-4      	; 0x478 <uart_send_long+0x3c>
	divider = 1; 
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
     47c:	c6 01       	movw	r24, r12
     47e:	b5 01       	movw	r22, r10
     480:	a8 01       	movw	r20, r16
     482:	97 01       	movw	r18, r14
     484:	a8 d7       	rcall	.+3920   	; 0x13d6 <__divmodsi4>
     486:	ca 01       	movw	r24, r20
     488:	b9 01       	movw	r22, r18
     48a:	2a e0       	ldi	r18, 0x0A	; 10
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	a1 d7       	rcall	.+3906   	; 0x13d6 <__divmodsi4>
     494:	60 5d       	subi	r22, 0xD0	; 208
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     496:	6c b9       	out	0x0c, r22	; 12
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;	
     498:	c8 01       	movw	r24, r16
     49a:	b7 01       	movw	r22, r14
     49c:	2a e0       	ldi	r18, 0x0A	; 10
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	98 d7       	rcall	.+3888   	; 0x13d6 <__divmodsi4>
     4a6:	c9 01       	movw	r24, r18
     4a8:	da 01       	movw	r26, r20
     4aa:	7c 01       	movw	r14, r24
     4ac:	8d 01       	movw	r16, r26
void uart_send_long(long data) {
	divider = 1; 
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
     4ae:	1e 14       	cp	r1, r14
     4b0:	1f 04       	cpc	r1, r15
     4b2:	10 06       	cpc	r1, r16
     4b4:	11 06       	cpc	r1, r17
     4b6:	04 f3       	brlt	.-64     	; 0x478 <uart_send_long+0x3c>
     4b8:	e0 92 a3 01 	sts	0x01A3, r14
     4bc:	f0 92 a4 01 	sts	0x01A4, r15
     4c0:	00 93 a5 01 	sts	0x01A5, r16
     4c4:	10 93 a6 01 	sts	0x01A6, r17
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     4c8:	5d 9b       	sbis	0x0b, 5	; 11
     4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <uart_send_long+0x8c>
   UDR = c;
     4cc:	80 e2       	ldi	r24, 0x20	; 32
     4ce:	8c b9       	out	0x0c, r24	; 12
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;	
	}
	uart_send_byte(' ');
}
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	bf 90       	pop	r11
     4de:	af 90       	pop	r10
     4e0:	08 95       	ret

000004e2 <uart_send_data>:

void uart_send_data(long* res_array, char range, long average) {
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ec 01       	movw	r28, r24
     4f6:	d6 2e       	mov	r13, r22
     4f8:	79 01       	movw	r14, r18
     4fa:	8a 01       	movw	r16, r20
	for(i=0; i<range; i++){
     4fc:	10 92 85 01 	sts	0x0185, r1
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     500:	3a e3       	ldi	r19, 0x3A	; 58
     502:	b3 2e       	mov	r11, r19
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     504:	2a e0       	ldi	r18, 0x0A	; 10
     506:	c2 2e       	mov	r12, r18
     508:	1c c0       	rjmp	.+56     	; 0x542 <uart_send_data+0x60>
     50a:	5d 9b       	sbis	0x0b, 5	; 11
     50c:	fe cf       	rjmp	.-4      	; 0x50a <uart_send_data+0x28>
	uart_send_byte(' ');
}

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
     50e:	ef 5c       	subi	r30, 0xCF	; 207
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     510:	ec b9       	out	0x0c, r30	; 12
     512:	e1 53       	subi	r30, 0x31	; 49
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     514:	5d 9b       	sbis	0x0b, 5	; 11
     516:	fe cf       	rjmp	.-4      	; 0x514 <uart_send_data+0x32>
   UDR = c;
     518:	bc b8       	out	0x0c, r11	; 12

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
		uart_send_byte(':');
		uart_send_long(res_array[(int) i]);
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	ec 0f       	add	r30, r28
     526:	fd 1f       	adc	r31, r29
     528:	60 81       	ld	r22, Z
     52a:	71 81       	ldd	r23, Z+1	; 0x01
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	93 81       	ldd	r25, Z+3	; 0x03
     530:	85 df       	rcall	.-246    	; 0x43c <uart_send_long>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     532:	5d 9b       	sbis	0x0b, 5	; 11
     534:	fe cf       	rjmp	.-4      	; 0x532 <uart_send_data+0x50>
   UDR = c;
     536:	cc b8       	out	0x0c, r12	; 12
	}
	uart_send_byte(' ');
}

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
     538:	80 91 85 01 	lds	r24, 0x0185
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	80 93 85 01 	sts	0x0185, r24
     542:	e0 91 85 01 	lds	r30, 0x0185
     546:	ed 15       	cp	r30, r13
     548:	00 f3       	brcs	.-64     	; 0x50a <uart_send_data+0x28>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     54a:	5d 9b       	sbis	0x0b, 5	; 11
     54c:	fe cf       	rjmp	.-4      	; 0x54a <uart_send_data+0x68>
   UDR = c;
     54e:	81 e4       	ldi	r24, 0x41	; 65
     550:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     552:	5d 9b       	sbis	0x0b, 5	; 11
     554:	fe cf       	rjmp	.-4      	; 0x552 <uart_send_data+0x70>
   UDR = c;
     556:	86 e5       	ldi	r24, 0x56	; 86
     558:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     55a:	5d 9b       	sbis	0x0b, 5	; 11
     55c:	fe cf       	rjmp	.-4      	; 0x55a <uart_send_data+0x78>
   UDR = c;
     55e:	87 e4       	ldi	r24, 0x47	; 71
     560:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     562:	5d 9b       	sbis	0x0b, 5	; 11
     564:	fe cf       	rjmp	.-4      	; 0x562 <uart_send_data+0x80>
   UDR = c;
     566:	8a e3       	ldi	r24, 0x3A	; 58
     568:	8c b9       	out	0x0c, r24	; 12
	}
	uart_send_byte('A');
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_long(average);
     56a:	c8 01       	movw	r24, r16
     56c:	b7 01       	movw	r22, r14
     56e:	66 df       	rcall	.-308    	; 0x43c <uart_send_long>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     570:	5d 9b       	sbis	0x0b, 5	; 11
     572:	fe cf       	rjmp	.-4      	; 0x570 <uart_send_data+0x8e>
   UDR = c;
     574:	8a e0       	ldi	r24, 0x0A	; 10
     576:	8c b9       	out	0x0c, r24	; 12
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_long(average);
	uart_send_byte('\n');
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	08 95       	ret

0000058c <display_set_bytes>:
char d1, d2, d3, d4;
char display_pos = 0;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c[0] = ~0x1F | (0x0F & t1);
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	80 6e       	ori	r24, 0xE0	; 224
     590:	80 93 a8 01 	sts	0x01A8, r24
	c[1] = ~0x2F | (0x0F & t2);
     594:	6f 70       	andi	r22, 0x0F	; 15
     596:	60 6d       	ori	r22, 0xD0	; 208
     598:	60 93 a9 01 	sts	0x01A9, r22
	c[2] = ~0x4F | (0x0F & t3);
     59c:	4f 70       	andi	r20, 0x0F	; 15
     59e:	40 6b       	ori	r20, 0xB0	; 176
     5a0:	40 93 aa 01 	sts	0x01AA, r20
	c[3] = ~0x8F | (0x0F & t4);
     5a4:	2f 70       	andi	r18, 0x0F	; 15
     5a6:	20 67       	ori	r18, 0x70	; 112
     5a8:	20 93 ab 01 	sts	0x01AB, r18
}
     5ac:	08 95       	ret

000005ae <display_set_long>:

void display_set_long(long target){
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	5b 01       	movw	r10, r22
     5be:	6c 01       	movw	r12, r24
	if(target < 10000){
     5c0:	80 e1       	ldi	r24, 0x10	; 16
     5c2:	a8 16       	cp	r10, r24
     5c4:	87 e2       	ldi	r24, 0x27	; 39
     5c6:	b8 06       	cpc	r11, r24
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	c8 06       	cpc	r12, r24
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	d8 06       	cpc	r13, r24
     5d0:	0c f0       	brlt	.+2      	; 0x5d4 <display_set_long+0x26>
     5d2:	41 c0       	rjmp	.+130    	; 0x656 <display_set_long+0xa8>
		d4 = target % 10;
     5d4:	c6 01       	movw	r24, r12
     5d6:	b5 01       	movw	r22, r10
     5d8:	2a e0       	ldi	r18, 0x0A	; 10
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	fa d6       	rcall	.+3572   	; 0x13d6 <__divmodsi4>
     5e2:	f6 2e       	mov	r15, r22
     5e4:	60 93 ad 01 	sts	0x01AD, r22
		d3 = (target / 10) % 10;
     5e8:	c6 01       	movw	r24, r12
     5ea:	b5 01       	movw	r22, r10
     5ec:	2a e0       	ldi	r18, 0x0A	; 10
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	f0 d6       	rcall	.+3552   	; 0x13d6 <__divmodsi4>
     5f6:	ca 01       	movw	r24, r20
     5f8:	b9 01       	movw	r22, r18
     5fa:	2a e0       	ldi	r18, 0x0A	; 10
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	e9 d6       	rcall	.+3538   	; 0x13d6 <__divmodsi4>
     604:	06 2f       	mov	r16, r22
     606:	60 93 ae 01 	sts	0x01AE, r22
		d2 = (target / 100) % 10;
     60a:	c6 01       	movw	r24, r12
     60c:	b5 01       	movw	r22, r10
     60e:	24 e6       	ldi	r18, 0x64	; 100
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	df d6       	rcall	.+3518   	; 0x13d6 <__divmodsi4>
     618:	ca 01       	movw	r24, r20
     61a:	b9 01       	movw	r22, r18
     61c:	2a e0       	ldi	r18, 0x0A	; 10
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	d8 d6       	rcall	.+3504   	; 0x13d6 <__divmodsi4>
     626:	16 2f       	mov	r17, r22
     628:	60 93 ac 01 	sts	0x01AC, r22
		d1 = (target / 1000) % 10;
     62c:	c6 01       	movw	r24, r12
     62e:	b5 01       	movw	r22, r10
     630:	28 ee       	ldi	r18, 0xE8	; 232
     632:	33 e0       	ldi	r19, 0x03	; 3
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	ce d6       	rcall	.+3484   	; 0x13d6 <__divmodsi4>
     63a:	ca 01       	movw	r24, r20
     63c:	b9 01       	movw	r22, r18
     63e:	2a e0       	ldi	r18, 0x0A	; 10
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	c7 d6       	rcall	.+3470   	; 0x13d6 <__divmodsi4>
     648:	86 2f       	mov	r24, r22
     64a:	60 93 a7 01 	sts	0x01A7, r22
		display_set_bytes(d1, d2, d3, d4);
     64e:	61 2f       	mov	r22, r17
     650:	40 2f       	mov	r20, r16
     652:	2f 2d       	mov	r18, r15
     654:	04 c0       	rjmp	.+8      	; 0x65e <display_set_long+0xb0>
	} else {
		display_set_bytes(0x0E, 0x0E, 0x0E, 0x0E);
     656:	8e e0       	ldi	r24, 0x0E	; 14
     658:	6e e0       	ldi	r22, 0x0E	; 14
     65a:	4e e0       	ldi	r20, 0x0E	; 14
     65c:	2e e0       	ldi	r18, 0x0E	; 14
     65e:	96 df       	rcall	.-212    	; 0x58c <display_set_bytes>
	}
}
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	08 95       	ret

00000670 <display_off>:

void display_off(){
	PORTB |= 0xFF;
     670:	88 b3       	in	r24, 0x18	; 24
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	88 bb       	out	0x18, r24	; 24
}
     676:	08 95       	ret

00000678 <display_flash_once>:

void display_flash_once(){
	display_pos++;
     678:	80 91 87 01 	lds	r24, 0x0187
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	80 93 87 01 	sts	0x0187, r24
	if(display_pos > 3){
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	18 f0       	brcs	.+6      	; 0x68c <display_flash_once+0x14>
		display_pos = display_pos % 4;
     686:	83 70       	andi	r24, 0x03	; 3
     688:	80 93 87 01 	sts	0x0187, r24
	}
	PORTB = c[(int) display_pos];
     68c:	e0 91 87 01 	lds	r30, 0x0187
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	e8 55       	subi	r30, 0x58	; 88
     694:	fe 4f       	sbci	r31, 0xFE	; 254
     696:	80 81       	ld	r24, Z
     698:	88 bb       	out	0x18, r24	; 24
}
     69a:	08 95       	ret

0000069c <display_init_timer0>:

void display_init_timer0(){
	//TCCR0 = (1<<CS01) | (1 << CS00); // K = 64
	TCCR0 = (1<<CS01); // K = 8
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // allow interrupt
     6a0:	89 b7       	in	r24, 0x39	; 57
     6a2:	81 60       	ori	r24, 0x01	; 1
     6a4:	89 bf       	out	0x39, r24	; 57
}
     6a6:	08 95       	ret

000006a8 <leds_move_column>:
	line = rand() % 8;
	return (line + 1);
}

void leds_move_column(){
	if(direction == 1){
     6a8:	80 91 6a 00 	lds	r24, 0x006A
     6ac:	90 91 89 01 	lds	r25, 0x0189
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	39 f4       	brne	.+14     	; 0x6c2 <leds_move_column+0x1a>
		if(column < 3){
     6b4:	93 30       	cpi	r25, 0x03	; 3
     6b6:	10 f4       	brcc	.+4      	; 0x6bc <leds_move_column+0x14>
			column++;
     6b8:	9f 5f       	subi	r25, 0xFF	; 255
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <leds_move_column+0x20>
		} else {
			direction = 0;
     6bc:	10 92 6a 00 	sts	0x006A, r1
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
     6c2:	99 23       	and	r25, r25
     6c4:	21 f0       	breq	.+8      	; 0x6ce <leds_move_column+0x26>
			column--;
     6c6:	91 50       	subi	r25, 0x01	; 1
     6c8:	90 93 89 01 	sts	0x0189, r25
     6cc:	08 95       	ret
		} else {
			direction = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 6a 00 	sts	0x006A, r24
			column++;
     6d4:	80 93 89 01 	sts	0x0189, r24
     6d8:	08 95       	ret

000006da <leds_update>:
		}
	}
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
     6da:	90 91 88 01 	lds	r25, 0x0188
     6de:	90 68       	ori	r25, 0x80	; 128
     6e0:	80 91 89 01 	lds	r24, 0x0189
     6e4:	88 0f       	add	r24, r24
     6e6:	88 0f       	add	r24, r24
     6e8:	88 0f       	add	r24, r24
     6ea:	89 2b       	or	r24, r25
     6ec:	85 bb       	out	0x15, r24	; 21
}
     6ee:	08 95       	ret

000006f0 <leds_off>:

void leds_off(){
	PORTC &= 0x7F;
     6f0:	af 98       	cbi	0x15, 7	; 21
}
     6f2:	08 95       	ret

000006f4 <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 8;
     6f4:	42 d7       	rcall	.+3716   	; 0x157a <rand>
     6f6:	68 e0       	ldi	r22, 0x08	; 8
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	5a d6       	rcall	.+3252   	; 0x13b0 <__divmodhi4>
     6fc:	80 93 88 01 	sts	0x0188, r24
	return (line + 1);
}
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	08 95       	ret

00000704 <buzzer_beep>:
#include <avr/io.h>
#include <util/delay.h>

void buzzer_beep(int time_amount_ms){
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
	PORTD |= 0x80;
     714:	97 9a       	sbi	0x12, 7	; 18
	_delay_ms(time_amount_ms);
     716:	aa 27       	eor	r26, r26
     718:	97 fd       	sbrc	r25, 7
     71a:	a0 95       	com	r26
     71c:	ba 2f       	mov	r27, r26
     71e:	bc 01       	movw	r22, r24
     720:	cd 01       	movw	r24, r26
     722:	87 d3       	rcall	.+1806   	; 0xe32 <__floatsisf>
     724:	5b 01       	movw	r10, r22
     726:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	4a e7       	ldi	r20, 0x7A	; 122
     72e:	54 e4       	ldi	r21, 0x44	; 68
     730:	0a d2       	rcall	.+1044   	; 0xb46 <__mulsf3>
     732:	7b 01       	movw	r14, r22
     734:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5f e3       	ldi	r21, 0x3F	; 63
     73e:	4e d3       	rcall	.+1692   	; 0xddc <__ltsf2>
     740:	88 23       	and	r24, r24
     742:	1c f4       	brge	.+6      	; 0x74a <buzzer_beep+0x46>
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	20 c0       	rjmp	.+64     	; 0x78a <buzzer_beep+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     74a:	c8 01       	movw	r24, r16
     74c:	b7 01       	movw	r22, r14
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	3f ef       	ldi	r19, 0xFF	; 255
     752:	4f e7       	ldi	r20, 0x7F	; 127
     754:	57 e4       	ldi	r21, 0x47	; 71
     756:	ec d2       	rcall	.+1496   	; 0xd30 <__gtsf2>
     758:	18 16       	cp	r1, r24
     75a:	a4 f4       	brge	.+40     	; 0x784 <buzzer_beep+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     75c:	c6 01       	movw	r24, r12
     75e:	b5 01       	movw	r22, r10
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e2       	ldi	r20, 0x20	; 32
     766:	51 e4       	ldi	r21, 0x41	; 65
     768:	ee d1       	rcall	.+988    	; 0xb46 <__mulsf3>
     76a:	29 d0       	rcall	.+82     	; 0x7be <__fixunssfsi>
     76c:	84 e6       	ldi	r24, 0x64	; 100
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	05 c0       	rjmp	.+10     	; 0x77c <buzzer_beep+0x78>
     772:	fc 01       	movw	r30, r24
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <buzzer_beep+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     778:	61 50       	subi	r22, 0x01	; 1
     77a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     77c:	61 15       	cp	r22, r1
     77e:	71 05       	cpc	r23, r1
     780:	c1 f7       	brne	.-16     	; 0x772 <buzzer_beep+0x6e>
     782:	06 c0       	rjmp	.+12     	; 0x790 <buzzer_beep+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     784:	c8 01       	movw	r24, r16
     786:	b7 01       	movw	r22, r14
     788:	1a d0       	rcall	.+52     	; 0x7be <__fixunssfsi>
     78a:	cb 01       	movw	r24, r22
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <buzzer_beep+0x88>
	PORTD &= 0x7F;
     790:	97 98       	cbi	0x12, 7	; 18
}
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	08 95       	ret

000007a4 <timer1_init>:
#include <avr/io.h>

void timer1_init(){
	TCNT1=0x00; // ticks
     7a4:	1d bc       	out	0x2d, r1	; 45
     7a6:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS10); // K = 0
     7a8:	8e b5       	in	r24, 0x2e	; 46
     7aa:	81 60       	ori	r24, 0x01	; 1
     7ac:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (unsigned int) (F_CPU / 1000); // compare num
     7ae:	80 ea       	ldi	r24, 0xA0	; 160
     7b0:	9f e0       	ldi	r25, 0x0F	; 15
     7b2:	9b bd       	out	0x2b, r25	; 43
     7b4:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A); // launch timer	
     7b6:	89 b7       	in	r24, 0x39	; 57
     7b8:	80 61       	ori	r24, 0x10	; 16
     7ba:	89 bf       	out	0x39, r24	; 57
}
     7bc:	08 95       	ret

000007be <__fixunssfsi>:
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	7b 01       	movw	r14, r22
     7c8:	8c 01       	movw	r16, r24
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	5f e4       	ldi	r21, 0x4F	; 79
     7d2:	d9 d2       	rcall	.+1458   	; 0xd86 <__gesf2>
     7d4:	88 23       	and	r24, r24
     7d6:	7c f0       	brlt	.+30     	; 0x7f6 <__fixunssfsi+0x38>
     7d8:	c8 01       	movw	r24, r16
     7da:	b7 01       	movw	r22, r14
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	5f e4       	ldi	r21, 0x4F	; 79
     7e4:	5e d1       	rcall	.+700    	; 0xaa2 <__subsf3>
     7e6:	7f d3       	rcall	.+1790   	; 0xee6 <__fixsfsi>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	20 50       	subi	r18, 0x00	; 0
     7ee:	30 40       	sbci	r19, 0x00	; 0
     7f0:	40 40       	sbci	r20, 0x00	; 0
     7f2:	50 48       	sbci	r21, 0x80	; 128
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <__fixunssfsi+0x42>
     7f6:	c8 01       	movw	r24, r16
     7f8:	b7 01       	movw	r22, r14
     7fa:	75 d3       	rcall	.+1770   	; 0xee6 <__fixsfsi>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	b9 01       	movw	r22, r18
     802:	ca 01       	movw	r24, r20
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

0000080e <_fpadd_parts>:
     80e:	a0 e0       	ldi	r26, 0x00	; 0
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ec e0       	ldi	r30, 0x0C	; 12
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	30 c6       	rjmp	.+3168   	; 0x1478 <__prologue_saves__>
     818:	dc 01       	movw	r26, r24
     81a:	2b 01       	movw	r4, r22
     81c:	fa 01       	movw	r30, r20
     81e:	9c 91       	ld	r25, X
     820:	92 30       	cpi	r25, 0x02	; 2
     822:	08 f4       	brcc	.+2      	; 0x826 <_fpadd_parts+0x18>
     824:	39 c1       	rjmp	.+626    	; 0xa98 <_fpadd_parts+0x28a>
     826:	eb 01       	movw	r28, r22
     828:	88 81       	ld	r24, Y
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	08 f4       	brcc	.+2      	; 0x830 <_fpadd_parts+0x22>
     82e:	33 c1       	rjmp	.+614    	; 0xa96 <_fpadd_parts+0x288>
     830:	94 30       	cpi	r25, 0x04	; 4
     832:	69 f4       	brne	.+26     	; 0x84e <_fpadd_parts+0x40>
     834:	84 30       	cpi	r24, 0x04	; 4
     836:	09 f0       	breq	.+2      	; 0x83a <_fpadd_parts+0x2c>
     838:	2f c1       	rjmp	.+606    	; 0xa98 <_fpadd_parts+0x28a>
     83a:	11 96       	adiw	r26, 0x01	; 1
     83c:	9c 91       	ld	r25, X
     83e:	11 97       	sbiw	r26, 0x01	; 1
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	98 17       	cp	r25, r24
     844:	09 f4       	brne	.+2      	; 0x848 <_fpadd_parts+0x3a>
     846:	28 c1       	rjmp	.+592    	; 0xa98 <_fpadd_parts+0x28a>
     848:	ab e6       	ldi	r26, 0x6B	; 107
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	25 c1       	rjmp	.+586    	; 0xa98 <_fpadd_parts+0x28a>
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	09 f4       	brne	.+2      	; 0x854 <_fpadd_parts+0x46>
     852:	21 c1       	rjmp	.+578    	; 0xa96 <_fpadd_parts+0x288>
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	a9 f4       	brne	.+42     	; 0x882 <_fpadd_parts+0x74>
     858:	92 30       	cpi	r25, 0x02	; 2
     85a:	09 f0       	breq	.+2      	; 0x85e <_fpadd_parts+0x50>
     85c:	1d c1       	rjmp	.+570    	; 0xa98 <_fpadd_parts+0x28a>
     85e:	9a 01       	movw	r18, r20
     860:	ad 01       	movw	r20, r26
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	ea 01       	movw	r28, r20
     866:	09 90       	ld	r0, Y+
     868:	ae 01       	movw	r20, r28
     86a:	e9 01       	movw	r28, r18
     86c:	09 92       	st	Y+, r0
     86e:	9e 01       	movw	r18, r28
     870:	81 50       	subi	r24, 0x01	; 1
     872:	c1 f7       	brne	.-16     	; 0x864 <_fpadd_parts+0x56>
     874:	e2 01       	movw	r28, r4
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	11 96       	adiw	r26, 0x01	; 1
     87a:	9c 91       	ld	r25, X
     87c:	89 23       	and	r24, r25
     87e:	81 83       	std	Z+1, r24	; 0x01
     880:	08 c1       	rjmp	.+528    	; 0xa92 <_fpadd_parts+0x284>
     882:	92 30       	cpi	r25, 0x02	; 2
     884:	09 f4       	brne	.+2      	; 0x888 <_fpadd_parts+0x7a>
     886:	07 c1       	rjmp	.+526    	; 0xa96 <_fpadd_parts+0x288>
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	2d 90       	ld	r2, X+
     88c:	3c 90       	ld	r3, X
     88e:	13 97       	sbiw	r26, 0x03	; 3
     890:	eb 01       	movw	r28, r22
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	9b 81       	ldd	r25, Y+3	; 0x03
     896:	14 96       	adiw	r26, 0x04	; 4
     898:	ad 90       	ld	r10, X+
     89a:	bd 90       	ld	r11, X+
     89c:	cd 90       	ld	r12, X+
     89e:	dc 90       	ld	r13, X
     8a0:	17 97       	sbiw	r26, 0x07	; 7
     8a2:	ec 80       	ldd	r14, Y+4	; 0x04
     8a4:	fd 80       	ldd	r15, Y+5	; 0x05
     8a6:	0e 81       	ldd	r16, Y+6	; 0x06
     8a8:	1f 81       	ldd	r17, Y+7	; 0x07
     8aa:	91 01       	movw	r18, r2
     8ac:	28 1b       	sub	r18, r24
     8ae:	39 0b       	sbc	r19, r25
     8b0:	b9 01       	movw	r22, r18
     8b2:	37 ff       	sbrs	r19, 7
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <_fpadd_parts+0xb0>
     8b6:	66 27       	eor	r22, r22
     8b8:	77 27       	eor	r23, r23
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	60 32       	cpi	r22, 0x20	; 32
     8c0:	71 05       	cpc	r23, r1
     8c2:	0c f0       	brlt	.+2      	; 0x8c6 <_fpadd_parts+0xb8>
     8c4:	61 c0       	rjmp	.+194    	; 0x988 <_fpadd_parts+0x17a>
     8c6:	12 16       	cp	r1, r18
     8c8:	13 06       	cpc	r1, r19
     8ca:	6c f5       	brge	.+90     	; 0x926 <_fpadd_parts+0x118>
     8cc:	37 01       	movw	r6, r14
     8ce:	48 01       	movw	r8, r16
     8d0:	06 2e       	mov	r0, r22
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <_fpadd_parts+0xce>
     8d4:	96 94       	lsr	r9
     8d6:	87 94       	ror	r8
     8d8:	77 94       	ror	r7
     8da:	67 94       	ror	r6
     8dc:	0a 94       	dec	r0
     8de:	d2 f7       	brpl	.-12     	; 0x8d4 <_fpadd_parts+0xc6>
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <_fpadd_parts+0xe4>
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	44 1f       	adc	r20, r20
     8f0:	55 1f       	adc	r21, r21
     8f2:	6a 95       	dec	r22
     8f4:	d2 f7       	brpl	.-12     	; 0x8ea <_fpadd_parts+0xdc>
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	30 40       	sbci	r19, 0x00	; 0
     8fa:	40 40       	sbci	r20, 0x00	; 0
     8fc:	50 40       	sbci	r21, 0x00	; 0
     8fe:	2e 21       	and	r18, r14
     900:	3f 21       	and	r19, r15
     902:	40 23       	and	r20, r16
     904:	51 23       	and	r21, r17
     906:	21 15       	cp	r18, r1
     908:	31 05       	cpc	r19, r1
     90a:	41 05       	cpc	r20, r1
     90c:	51 05       	cpc	r21, r1
     90e:	21 f0       	breq	.+8      	; 0x918 <_fpadd_parts+0x10a>
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	79 01       	movw	r14, r18
     91a:	8a 01       	movw	r16, r20
     91c:	e6 28       	or	r14, r6
     91e:	f7 28       	or	r15, r7
     920:	08 29       	or	r16, r8
     922:	19 29       	or	r17, r9
     924:	3c c0       	rjmp	.+120    	; 0x99e <_fpadd_parts+0x190>
     926:	23 2b       	or	r18, r19
     928:	d1 f1       	breq	.+116    	; 0x99e <_fpadd_parts+0x190>
     92a:	26 0e       	add	r2, r22
     92c:	37 1e       	adc	r3, r23
     92e:	35 01       	movw	r6, r10
     930:	46 01       	movw	r8, r12
     932:	06 2e       	mov	r0, r22
     934:	04 c0       	rjmp	.+8      	; 0x93e <_fpadd_parts+0x130>
     936:	96 94       	lsr	r9
     938:	87 94       	ror	r8
     93a:	77 94       	ror	r7
     93c:	67 94       	ror	r6
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <_fpadd_parts+0x128>
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	04 c0       	rjmp	.+8      	; 0x954 <_fpadd_parts+0x146>
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	44 1f       	adc	r20, r20
     952:	55 1f       	adc	r21, r21
     954:	6a 95       	dec	r22
     956:	d2 f7       	brpl	.-12     	; 0x94c <_fpadd_parts+0x13e>
     958:	21 50       	subi	r18, 0x01	; 1
     95a:	30 40       	sbci	r19, 0x00	; 0
     95c:	40 40       	sbci	r20, 0x00	; 0
     95e:	50 40       	sbci	r21, 0x00	; 0
     960:	2a 21       	and	r18, r10
     962:	3b 21       	and	r19, r11
     964:	4c 21       	and	r20, r12
     966:	5d 21       	and	r21, r13
     968:	21 15       	cp	r18, r1
     96a:	31 05       	cpc	r19, r1
     96c:	41 05       	cpc	r20, r1
     96e:	51 05       	cpc	r21, r1
     970:	21 f0       	breq	.+8      	; 0x97a <_fpadd_parts+0x16c>
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	59 01       	movw	r10, r18
     97c:	6a 01       	movw	r12, r20
     97e:	a6 28       	or	r10, r6
     980:	b7 28       	or	r11, r7
     982:	c8 28       	or	r12, r8
     984:	d9 28       	or	r13, r9
     986:	0b c0       	rjmp	.+22     	; 0x99e <_fpadd_parts+0x190>
     988:	82 15       	cp	r24, r2
     98a:	93 05       	cpc	r25, r3
     98c:	2c f0       	brlt	.+10     	; 0x998 <_fpadd_parts+0x18a>
     98e:	1c 01       	movw	r2, r24
     990:	aa 24       	eor	r10, r10
     992:	bb 24       	eor	r11, r11
     994:	65 01       	movw	r12, r10
     996:	03 c0       	rjmp	.+6      	; 0x99e <_fpadd_parts+0x190>
     998:	ee 24       	eor	r14, r14
     99a:	ff 24       	eor	r15, r15
     99c:	87 01       	movw	r16, r14
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	9c 91       	ld	r25, X
     9a2:	d2 01       	movw	r26, r4
     9a4:	11 96       	adiw	r26, 0x01	; 1
     9a6:	8c 91       	ld	r24, X
     9a8:	98 17       	cp	r25, r24
     9aa:	09 f4       	brne	.+2      	; 0x9ae <_fpadd_parts+0x1a0>
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <_fpadd_parts+0x22a>
     9ae:	99 23       	and	r25, r25
     9b0:	39 f0       	breq	.+14     	; 0x9c0 <_fpadd_parts+0x1b2>
     9b2:	a8 01       	movw	r20, r16
     9b4:	97 01       	movw	r18, r14
     9b6:	2a 19       	sub	r18, r10
     9b8:	3b 09       	sbc	r19, r11
     9ba:	4c 09       	sbc	r20, r12
     9bc:	5d 09       	sbc	r21, r13
     9be:	06 c0       	rjmp	.+12     	; 0x9cc <_fpadd_parts+0x1be>
     9c0:	a6 01       	movw	r20, r12
     9c2:	95 01       	movw	r18, r10
     9c4:	2e 19       	sub	r18, r14
     9c6:	3f 09       	sbc	r19, r15
     9c8:	40 0b       	sbc	r20, r16
     9ca:	51 0b       	sbc	r21, r17
     9cc:	57 fd       	sbrc	r21, 7
     9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <_fpadd_parts+0x1d2>
     9d0:	11 82       	std	Z+1, r1	; 0x01
     9d2:	33 82       	std	Z+3, r3	; 0x03
     9d4:	22 82       	std	Z+2, r2	; 0x02
     9d6:	24 83       	std	Z+4, r18	; 0x04
     9d8:	35 83       	std	Z+5, r19	; 0x05
     9da:	46 83       	std	Z+6, r20	; 0x06
     9dc:	57 83       	std	Z+7, r21	; 0x07
     9de:	1d c0       	rjmp	.+58     	; 0xa1a <_fpadd_parts+0x20c>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	81 83       	std	Z+1, r24	; 0x01
     9e4:	33 82       	std	Z+3, r3	; 0x03
     9e6:	22 82       	std	Z+2, r2	; 0x02
     9e8:	88 27       	eor	r24, r24
     9ea:	99 27       	eor	r25, r25
     9ec:	dc 01       	movw	r26, r24
     9ee:	82 1b       	sub	r24, r18
     9f0:	93 0b       	sbc	r25, r19
     9f2:	a4 0b       	sbc	r26, r20
     9f4:	b5 0b       	sbc	r27, r21
     9f6:	84 83       	std	Z+4, r24	; 0x04
     9f8:	95 83       	std	Z+5, r25	; 0x05
     9fa:	a6 83       	std	Z+6, r26	; 0x06
     9fc:	b7 83       	std	Z+7, r27	; 0x07
     9fe:	0d c0       	rjmp	.+26     	; 0xa1a <_fpadd_parts+0x20c>
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	44 1f       	adc	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	24 83       	std	Z+4, r18	; 0x04
     a0a:	35 83       	std	Z+5, r19	; 0x05
     a0c:	46 83       	std	Z+6, r20	; 0x06
     a0e:	57 83       	std	Z+7, r21	; 0x07
     a10:	82 81       	ldd	r24, Z+2	; 0x02
     a12:	93 81       	ldd	r25, Z+3	; 0x03
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	93 83       	std	Z+3, r25	; 0x03
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	24 81       	ldd	r18, Z+4	; 0x04
     a1c:	35 81       	ldd	r19, Z+5	; 0x05
     a1e:	46 81       	ldd	r20, Z+6	; 0x06
     a20:	57 81       	ldd	r21, Z+7	; 0x07
     a22:	da 01       	movw	r26, r20
     a24:	c9 01       	movw	r24, r18
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	a1 09       	sbc	r26, r1
     a2a:	b1 09       	sbc	r27, r1
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	af 4f       	sbci	r26, 0xFF	; 255
     a32:	bf 43       	sbci	r27, 0x3F	; 63
     a34:	28 f3       	brcs	.-54     	; 0xa00 <_fpadd_parts+0x1f2>
     a36:	0b c0       	rjmp	.+22     	; 0xa4e <_fpadd_parts+0x240>
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	33 82       	std	Z+3, r3	; 0x03
     a3c:	22 82       	std	Z+2, r2	; 0x02
     a3e:	ea 0c       	add	r14, r10
     a40:	fb 1c       	adc	r15, r11
     a42:	0c 1d       	adc	r16, r12
     a44:	1d 1d       	adc	r17, r13
     a46:	e4 82       	std	Z+4, r14	; 0x04
     a48:	f5 82       	std	Z+5, r15	; 0x05
     a4a:	06 83       	std	Z+6, r16	; 0x06
     a4c:	17 83       	std	Z+7, r17	; 0x07
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	80 83       	st	Z, r24
     a52:	24 81       	ldd	r18, Z+4	; 0x04
     a54:	35 81       	ldd	r19, Z+5	; 0x05
     a56:	46 81       	ldd	r20, Z+6	; 0x06
     a58:	57 81       	ldd	r21, Z+7	; 0x07
     a5a:	57 ff       	sbrs	r21, 7
     a5c:	1a c0       	rjmp	.+52     	; 0xa92 <_fpadd_parts+0x284>
     a5e:	c9 01       	movw	r24, r18
     a60:	aa 27       	eor	r26, r26
     a62:	97 fd       	sbrc	r25, 7
     a64:	a0 95       	com	r26
     a66:	ba 2f       	mov	r27, r26
     a68:	81 70       	andi	r24, 0x01	; 1
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	56 95       	lsr	r21
     a72:	47 95       	ror	r20
     a74:	37 95       	ror	r19
     a76:	27 95       	ror	r18
     a78:	82 2b       	or	r24, r18
     a7a:	93 2b       	or	r25, r19
     a7c:	a4 2b       	or	r26, r20
     a7e:	b5 2b       	or	r27, r21
     a80:	84 83       	std	Z+4, r24	; 0x04
     a82:	95 83       	std	Z+5, r25	; 0x05
     a84:	a6 83       	std	Z+6, r26	; 0x06
     a86:	b7 83       	std	Z+7, r27	; 0x07
     a88:	82 81       	ldd	r24, Z+2	; 0x02
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	93 83       	std	Z+3, r25	; 0x03
     a90:	82 83       	std	Z+2, r24	; 0x02
     a92:	df 01       	movw	r26, r30
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <_fpadd_parts+0x28a>
     a96:	d2 01       	movw	r26, r4
     a98:	cd 01       	movw	r24, r26
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	e2 e1       	ldi	r30, 0x12	; 18
     aa0:	07 c5       	rjmp	.+2574   	; 0x14b0 <__epilogue_restores__>

00000aa2 <__subsf3>:
     aa2:	a0 e2       	ldi	r26, 0x20	; 32
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e6 e5       	ldi	r30, 0x56	; 86
     aa8:	f5 e0       	ldi	r31, 0x05	; 5
     aaa:	f2 c4       	rjmp	.+2532   	; 0x1490 <__prologue_saves__+0x18>
     aac:	69 83       	std	Y+1, r22	; 0x01
     aae:	7a 83       	std	Y+2, r23	; 0x02
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	2d 83       	std	Y+5, r18	; 0x05
     ab6:	3e 83       	std	Y+6, r19	; 0x06
     ab8:	4f 83       	std	Y+7, r20	; 0x07
     aba:	58 87       	std	Y+8, r21	; 0x08
     abc:	e9 e0       	ldi	r30, 0x09	; 9
     abe:	ee 2e       	mov	r14, r30
     ac0:	f1 2c       	mov	r15, r1
     ac2:	ec 0e       	add	r14, r28
     ac4:	fd 1e       	adc	r15, r29
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	b7 01       	movw	r22, r14
     acc:	81 d3       	rcall	.+1794   	; 0x11d0 <__unpack_f>
     ace:	8e 01       	movw	r16, r28
     ad0:	0f 5e       	subi	r16, 0xEF	; 239
     ad2:	1f 4f       	sbci	r17, 0xFF	; 255
     ad4:	ce 01       	movw	r24, r28
     ad6:	05 96       	adiw	r24, 0x05	; 5
     ad8:	b8 01       	movw	r22, r16
     ada:	7a d3       	rcall	.+1780   	; 0x11d0 <__unpack_f>
     adc:	8a 89       	ldd	r24, Y+18	; 0x12
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	89 27       	eor	r24, r25
     ae2:	8a 8b       	std	Y+18, r24	; 0x12
     ae4:	c7 01       	movw	r24, r14
     ae6:	b8 01       	movw	r22, r16
     ae8:	ae 01       	movw	r20, r28
     aea:	47 5e       	subi	r20, 0xE7	; 231
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	8f de       	rcall	.-738    	; 0x80e <_fpadd_parts>
     af0:	9a d2       	rcall	.+1332   	; 0x1026 <__pack_f>
     af2:	a0 96       	adiw	r28, 0x20	; 32
     af4:	e6 e0       	ldi	r30, 0x06	; 6
     af6:	e8 c4       	rjmp	.+2512   	; 0x14c8 <__epilogue_restores__+0x18>

00000af8 <__addsf3>:
     af8:	a0 e2       	ldi	r26, 0x20	; 32
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e1 e8       	ldi	r30, 0x81	; 129
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	c7 c4       	rjmp	.+2446   	; 0x1490 <__prologue_saves__+0x18>
     b02:	69 83       	std	Y+1, r22	; 0x01
     b04:	7a 83       	std	Y+2, r23	; 0x02
     b06:	8b 83       	std	Y+3, r24	; 0x03
     b08:	9c 83       	std	Y+4, r25	; 0x04
     b0a:	2d 83       	std	Y+5, r18	; 0x05
     b0c:	3e 83       	std	Y+6, r19	; 0x06
     b0e:	4f 83       	std	Y+7, r20	; 0x07
     b10:	58 87       	std	Y+8, r21	; 0x08
     b12:	f9 e0       	ldi	r31, 0x09	; 9
     b14:	ef 2e       	mov	r14, r31
     b16:	f1 2c       	mov	r15, r1
     b18:	ec 0e       	add	r14, r28
     b1a:	fd 1e       	adc	r15, r29
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	b7 01       	movw	r22, r14
     b22:	56 d3       	rcall	.+1708   	; 0x11d0 <__unpack_f>
     b24:	8e 01       	movw	r16, r28
     b26:	0f 5e       	subi	r16, 0xEF	; 239
     b28:	1f 4f       	sbci	r17, 0xFF	; 255
     b2a:	ce 01       	movw	r24, r28
     b2c:	05 96       	adiw	r24, 0x05	; 5
     b2e:	b8 01       	movw	r22, r16
     b30:	4f d3       	rcall	.+1694   	; 0x11d0 <__unpack_f>
     b32:	c7 01       	movw	r24, r14
     b34:	b8 01       	movw	r22, r16
     b36:	ae 01       	movw	r20, r28
     b38:	47 5e       	subi	r20, 0xE7	; 231
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	68 de       	rcall	.-816    	; 0x80e <_fpadd_parts>
     b3e:	73 d2       	rcall	.+1254   	; 0x1026 <__pack_f>
     b40:	a0 96       	adiw	r28, 0x20	; 32
     b42:	e6 e0       	ldi	r30, 0x06	; 6
     b44:	c1 c4       	rjmp	.+2434   	; 0x14c8 <__epilogue_restores__+0x18>

00000b46 <__mulsf3>:
     b46:	a0 e2       	ldi	r26, 0x20	; 32
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	e8 ea       	ldi	r30, 0xA8	; 168
     b4c:	f5 e0       	ldi	r31, 0x05	; 5
     b4e:	94 c4       	rjmp	.+2344   	; 0x1478 <__prologue_saves__>
     b50:	69 83       	std	Y+1, r22	; 0x01
     b52:	7a 83       	std	Y+2, r23	; 0x02
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	2d 83       	std	Y+5, r18	; 0x05
     b5a:	3e 83       	std	Y+6, r19	; 0x06
     b5c:	4f 83       	std	Y+7, r20	; 0x07
     b5e:	58 87       	std	Y+8, r21	; 0x08
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	be 01       	movw	r22, r28
     b66:	67 5f       	subi	r22, 0xF7	; 247
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	32 d3       	rcall	.+1636   	; 0x11d0 <__unpack_f>
     b6c:	ce 01       	movw	r24, r28
     b6e:	05 96       	adiw	r24, 0x05	; 5
     b70:	be 01       	movw	r22, r28
     b72:	6f 5e       	subi	r22, 0xEF	; 239
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	2c d3       	rcall	.+1624   	; 0x11d0 <__unpack_f>
     b78:	99 85       	ldd	r25, Y+9	; 0x09
     b7a:	92 30       	cpi	r25, 0x02	; 2
     b7c:	88 f0       	brcs	.+34     	; 0xba0 <__mulsf3+0x5a>
     b7e:	89 89       	ldd	r24, Y+17	; 0x11
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	c8 f0       	brcs	.+50     	; 0xbb6 <__mulsf3+0x70>
     b84:	94 30       	cpi	r25, 0x04	; 4
     b86:	19 f4       	brne	.+6      	; 0xb8e <__mulsf3+0x48>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	51 f4       	brne	.+20     	; 0xba0 <__mulsf3+0x5a>
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__mulsf3+0x50>
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	29 f4       	brne	.+10     	; 0xb9c <__mulsf3+0x56>
     b92:	92 30       	cpi	r25, 0x02	; 2
     b94:	81 f4       	brne	.+32     	; 0xbb6 <__mulsf3+0x70>
     b96:	8b e6       	ldi	r24, 0x6B	; 107
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	c6 c0       	rjmp	.+396    	; 0xd28 <__mulsf3+0x1e2>
     b9c:	92 30       	cpi	r25, 0x02	; 2
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <__mulsf3+0x6c>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	8a 89       	ldd	r24, Y+18	; 0x12
     ba6:	98 13       	cpse	r25, r24
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	2a 87       	std	Y+10, r18	; 0x0a
     bac:	ce 01       	movw	r24, r28
     bae:	09 96       	adiw	r24, 0x09	; 9
     bb0:	bb c0       	rjmp	.+374    	; 0xd28 <__mulsf3+0x1e2>
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	49 f4       	brne	.+18     	; 0xbc8 <__mulsf3+0x82>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	8a 89       	ldd	r24, Y+18	; 0x12
     bbc:	98 13       	cpse	r25, r24
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	2a 8b       	std	Y+18, r18	; 0x12
     bc2:	ce 01       	movw	r24, r28
     bc4:	41 96       	adiw	r24, 0x11	; 17
     bc6:	b0 c0       	rjmp	.+352    	; 0xd28 <__mulsf3+0x1e2>
     bc8:	2d 84       	ldd	r2, Y+13	; 0x0d
     bca:	3e 84       	ldd	r3, Y+14	; 0x0e
     bcc:	4f 84       	ldd	r4, Y+15	; 0x0f
     bce:	58 88       	ldd	r5, Y+16	; 0x10
     bd0:	6d 88       	ldd	r6, Y+21	; 0x15
     bd2:	7e 88       	ldd	r7, Y+22	; 0x16
     bd4:	8f 88       	ldd	r8, Y+23	; 0x17
     bd6:	98 8c       	ldd	r9, Y+24	; 0x18
     bd8:	ee 24       	eor	r14, r14
     bda:	ff 24       	eor	r15, r15
     bdc:	87 01       	movw	r16, r14
     bde:	aa 24       	eor	r10, r10
     be0:	bb 24       	eor	r11, r11
     be2:	65 01       	movw	r12, r10
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	c1 01       	movw	r24, r2
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	89 2b       	or	r24, r25
     bf8:	e9 f0       	breq	.+58     	; 0xc34 <__mulsf3+0xee>
     bfa:	e6 0c       	add	r14, r6
     bfc:	f7 1c       	adc	r15, r7
     bfe:	08 1d       	adc	r16, r8
     c00:	19 1d       	adc	r17, r9
     c02:	9a 01       	movw	r18, r20
     c04:	ab 01       	movw	r20, r22
     c06:	2a 0d       	add	r18, r10
     c08:	3b 1d       	adc	r19, r11
     c0a:	4c 1d       	adc	r20, r12
     c0c:	5d 1d       	adc	r21, r13
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	a0 e0       	ldi	r26, 0x00	; 0
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 14       	cp	r14, r6
     c18:	f7 04       	cpc	r15, r7
     c1a:	08 05       	cpc	r16, r8
     c1c:	19 05       	cpc	r17, r9
     c1e:	20 f4       	brcc	.+8      	; 0xc28 <__mulsf3+0xe2>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ba 01       	movw	r22, r20
     c2a:	a9 01       	movw	r20, r18
     c2c:	48 0f       	add	r20, r24
     c2e:	59 1f       	adc	r21, r25
     c30:	6a 1f       	adc	r22, r26
     c32:	7b 1f       	adc	r23, r27
     c34:	aa 0c       	add	r10, r10
     c36:	bb 1c       	adc	r11, r11
     c38:	cc 1c       	adc	r12, r12
     c3a:	dd 1c       	adc	r13, r13
     c3c:	97 fe       	sbrs	r9, 7
     c3e:	08 c0       	rjmp	.+16     	; 0xc50 <__mulsf3+0x10a>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	a8 2a       	or	r10, r24
     c4a:	b9 2a       	or	r11, r25
     c4c:	ca 2a       	or	r12, r26
     c4e:	db 2a       	or	r13, r27
     c50:	31 96       	adiw	r30, 0x01	; 1
     c52:	e0 32       	cpi	r30, 0x20	; 32
     c54:	f1 05       	cpc	r31, r1
     c56:	49 f0       	breq	.+18     	; 0xc6a <__mulsf3+0x124>
     c58:	66 0c       	add	r6, r6
     c5a:	77 1c       	adc	r7, r7
     c5c:	88 1c       	adc	r8, r8
     c5e:	99 1c       	adc	r9, r9
     c60:	56 94       	lsr	r5
     c62:	47 94       	ror	r4
     c64:	37 94       	ror	r3
     c66:	27 94       	ror	r2
     c68:	c3 cf       	rjmp	.-122    	; 0xbf0 <__mulsf3+0xaa>
     c6a:	fa 85       	ldd	r31, Y+10	; 0x0a
     c6c:	ea 89       	ldd	r30, Y+18	; 0x12
     c6e:	2b 89       	ldd	r18, Y+19	; 0x13
     c70:	3c 89       	ldd	r19, Y+20	; 0x14
     c72:	8b 85       	ldd	r24, Y+11	; 0x0b
     c74:	9c 85       	ldd	r25, Y+12	; 0x0c
     c76:	28 0f       	add	r18, r24
     c78:	39 1f       	adc	r19, r25
     c7a:	2e 5f       	subi	r18, 0xFE	; 254
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	17 c0       	rjmp	.+46     	; 0xcae <__mulsf3+0x168>
     c80:	ca 01       	movw	r24, r20
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	89 2b       	or	r24, r25
     c88:	61 f0       	breq	.+24     	; 0xca2 <__mulsf3+0x15c>
     c8a:	16 95       	lsr	r17
     c8c:	07 95       	ror	r16
     c8e:	f7 94       	ror	r15
     c90:	e7 94       	ror	r14
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e8       	ldi	r27, 0x80	; 128
     c9a:	e8 2a       	or	r14, r24
     c9c:	f9 2a       	or	r15, r25
     c9e:	0a 2b       	or	r16, r26
     ca0:	1b 2b       	or	r17, r27
     ca2:	76 95       	lsr	r23
     ca4:	67 95       	ror	r22
     ca6:	57 95       	ror	r21
     ca8:	47 95       	ror	r20
     caa:	2f 5f       	subi	r18, 0xFF	; 255
     cac:	3f 4f       	sbci	r19, 0xFF	; 255
     cae:	77 fd       	sbrc	r23, 7
     cb0:	e7 cf       	rjmp	.-50     	; 0xc80 <__mulsf3+0x13a>
     cb2:	0c c0       	rjmp	.+24     	; 0xccc <__mulsf3+0x186>
     cb4:	44 0f       	add	r20, r20
     cb6:	55 1f       	adc	r21, r21
     cb8:	66 1f       	adc	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	17 fd       	sbrc	r17, 7
     cbe:	41 60       	ori	r20, 0x01	; 1
     cc0:	ee 0c       	add	r14, r14
     cc2:	ff 1c       	adc	r15, r15
     cc4:	00 1f       	adc	r16, r16
     cc6:	11 1f       	adc	r17, r17
     cc8:	21 50       	subi	r18, 0x01	; 1
     cca:	30 40       	sbci	r19, 0x00	; 0
     ccc:	40 30       	cpi	r20, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	59 07       	cpc	r21, r25
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	69 07       	cpc	r22, r25
     cd6:	90 e4       	ldi	r25, 0x40	; 64
     cd8:	79 07       	cpc	r23, r25
     cda:	60 f3       	brcs	.-40     	; 0xcb4 <__mulsf3+0x16e>
     cdc:	2b 8f       	std	Y+27, r18	; 0x1b
     cde:	3c 8f       	std	Y+28, r19	; 0x1c
     ce0:	db 01       	movw	r26, r22
     ce2:	ca 01       	movw	r24, r20
     ce4:	8f 77       	andi	r24, 0x7F	; 127
     ce6:	90 70       	andi	r25, 0x00	; 0
     ce8:	a0 70       	andi	r26, 0x00	; 0
     cea:	b0 70       	andi	r27, 0x00	; 0
     cec:	80 34       	cpi	r24, 0x40	; 64
     cee:	91 05       	cpc	r25, r1
     cf0:	a1 05       	cpc	r26, r1
     cf2:	b1 05       	cpc	r27, r1
     cf4:	61 f4       	brne	.+24     	; 0xd0e <__mulsf3+0x1c8>
     cf6:	47 fd       	sbrc	r20, 7
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <__mulsf3+0x1c8>
     cfa:	e1 14       	cp	r14, r1
     cfc:	f1 04       	cpc	r15, r1
     cfe:	01 05       	cpc	r16, r1
     d00:	11 05       	cpc	r17, r1
     d02:	29 f0       	breq	.+10     	; 0xd0e <__mulsf3+0x1c8>
     d04:	40 5c       	subi	r20, 0xC0	; 192
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	6f 4f       	sbci	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	40 78       	andi	r20, 0x80	; 128
     d0e:	1a 8e       	std	Y+26, r1	; 0x1a
     d10:	fe 17       	cp	r31, r30
     d12:	11 f0       	breq	.+4      	; 0xd18 <__mulsf3+0x1d2>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	8a 8f       	std	Y+26, r24	; 0x1a
     d18:	4d 8f       	std	Y+29, r20	; 0x1d
     d1a:	5e 8f       	std	Y+30, r21	; 0x1e
     d1c:	6f 8f       	std	Y+31, r22	; 0x1f
     d1e:	78 a3       	std	Y+32, r23	; 0x20
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	89 8f       	std	Y+25, r24	; 0x19
     d24:	ce 01       	movw	r24, r28
     d26:	49 96       	adiw	r24, 0x19	; 25
     d28:	7e d1       	rcall	.+764    	; 0x1026 <__pack_f>
     d2a:	a0 96       	adiw	r28, 0x20	; 32
     d2c:	e2 e1       	ldi	r30, 0x12	; 18
     d2e:	c0 c3       	rjmp	.+1920   	; 0x14b0 <__epilogue_restores__>

00000d30 <__gtsf2>:
     d30:	a8 e1       	ldi	r26, 0x18	; 24
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ed e9       	ldi	r30, 0x9D	; 157
     d36:	f6 e0       	ldi	r31, 0x06	; 6
     d38:	ab c3       	rjmp	.+1878   	; 0x1490 <__prologue_saves__+0x18>
     d3a:	69 83       	std	Y+1, r22	; 0x01
     d3c:	7a 83       	std	Y+2, r23	; 0x02
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	2d 83       	std	Y+5, r18	; 0x05
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	4f 83       	std	Y+7, r20	; 0x07
     d48:	58 87       	std	Y+8, r21	; 0x08
     d4a:	89 e0       	ldi	r24, 0x09	; 9
     d4c:	e8 2e       	mov	r14, r24
     d4e:	f1 2c       	mov	r15, r1
     d50:	ec 0e       	add	r14, r28
     d52:	fd 1e       	adc	r15, r29
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	b7 01       	movw	r22, r14
     d5a:	3a d2       	rcall	.+1140   	; 0x11d0 <__unpack_f>
     d5c:	8e 01       	movw	r16, r28
     d5e:	0f 5e       	subi	r16, 0xEF	; 239
     d60:	1f 4f       	sbci	r17, 0xFF	; 255
     d62:	ce 01       	movw	r24, r28
     d64:	05 96       	adiw	r24, 0x05	; 5
     d66:	b8 01       	movw	r22, r16
     d68:	33 d2       	rcall	.+1126   	; 0x11d0 <__unpack_f>
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	38 f0       	brcs	.+14     	; 0xd7e <__gtsf2+0x4e>
     d70:	89 89       	ldd	r24, Y+17	; 0x11
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	20 f0       	brcs	.+8      	; 0xd7e <__gtsf2+0x4e>
     d76:	c7 01       	movw	r24, r14
     d78:	b8 01       	movw	r22, r16
     d7a:	a2 d2       	rcall	.+1348   	; 0x12c0 <__fpcmp_parts_f>
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <__gtsf2+0x50>
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	68 96       	adiw	r28, 0x18	; 24
     d82:	e6 e0       	ldi	r30, 0x06	; 6
     d84:	a1 c3       	rjmp	.+1858   	; 0x14c8 <__epilogue_restores__+0x18>

00000d86 <__gesf2>:
     d86:	a8 e1       	ldi	r26, 0x18	; 24
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e8 ec       	ldi	r30, 0xC8	; 200
     d8c:	f6 e0       	ldi	r31, 0x06	; 6
     d8e:	80 c3       	rjmp	.+1792   	; 0x1490 <__prologue_saves__+0x18>
     d90:	69 83       	std	Y+1, r22	; 0x01
     d92:	7a 83       	std	Y+2, r23	; 0x02
     d94:	8b 83       	std	Y+3, r24	; 0x03
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	2d 83       	std	Y+5, r18	; 0x05
     d9a:	3e 83       	std	Y+6, r19	; 0x06
     d9c:	4f 83       	std	Y+7, r20	; 0x07
     d9e:	58 87       	std	Y+8, r21	; 0x08
     da0:	89 e0       	ldi	r24, 0x09	; 9
     da2:	e8 2e       	mov	r14, r24
     da4:	f1 2c       	mov	r15, r1
     da6:	ec 0e       	add	r14, r28
     da8:	fd 1e       	adc	r15, r29
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	b7 01       	movw	r22, r14
     db0:	0f d2       	rcall	.+1054   	; 0x11d0 <__unpack_f>
     db2:	8e 01       	movw	r16, r28
     db4:	0f 5e       	subi	r16, 0xEF	; 239
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	ce 01       	movw	r24, r28
     dba:	05 96       	adiw	r24, 0x05	; 5
     dbc:	b8 01       	movw	r22, r16
     dbe:	08 d2       	rcall	.+1040   	; 0x11d0 <__unpack_f>
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	38 f0       	brcs	.+14     	; 0xdd4 <__gesf2+0x4e>
     dc6:	89 89       	ldd	r24, Y+17	; 0x11
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <__gesf2+0x4e>
     dcc:	c7 01       	movw	r24, r14
     dce:	b8 01       	movw	r22, r16
     dd0:	77 d2       	rcall	.+1262   	; 0x12c0 <__fpcmp_parts_f>
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <__gesf2+0x50>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	68 96       	adiw	r28, 0x18	; 24
     dd8:	e6 e0       	ldi	r30, 0x06	; 6
     dda:	76 c3       	rjmp	.+1772   	; 0x14c8 <__epilogue_restores__+0x18>

00000ddc <__ltsf2>:
     ddc:	a8 e1       	ldi	r26, 0x18	; 24
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e3 ef       	ldi	r30, 0xF3	; 243
     de2:	f6 e0       	ldi	r31, 0x06	; 6
     de4:	55 c3       	rjmp	.+1706   	; 0x1490 <__prologue_saves__+0x18>
     de6:	69 83       	std	Y+1, r22	; 0x01
     de8:	7a 83       	std	Y+2, r23	; 0x02
     dea:	8b 83       	std	Y+3, r24	; 0x03
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	2d 83       	std	Y+5, r18	; 0x05
     df0:	3e 83       	std	Y+6, r19	; 0x06
     df2:	4f 83       	std	Y+7, r20	; 0x07
     df4:	58 87       	std	Y+8, r21	; 0x08
     df6:	89 e0       	ldi	r24, 0x09	; 9
     df8:	e8 2e       	mov	r14, r24
     dfa:	f1 2c       	mov	r15, r1
     dfc:	ec 0e       	add	r14, r28
     dfe:	fd 1e       	adc	r15, r29
     e00:	ce 01       	movw	r24, r28
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	b7 01       	movw	r22, r14
     e06:	e4 d1       	rcall	.+968    	; 0x11d0 <__unpack_f>
     e08:	8e 01       	movw	r16, r28
     e0a:	0f 5e       	subi	r16, 0xEF	; 239
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	ce 01       	movw	r24, r28
     e10:	05 96       	adiw	r24, 0x05	; 5
     e12:	b8 01       	movw	r22, r16
     e14:	dd d1       	rcall	.+954    	; 0x11d0 <__unpack_f>
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	38 f0       	brcs	.+14     	; 0xe2a <__ltsf2+0x4e>
     e1c:	89 89       	ldd	r24, Y+17	; 0x11
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__ltsf2+0x4e>
     e22:	c7 01       	movw	r24, r14
     e24:	b8 01       	movw	r22, r16
     e26:	4c d2       	rcall	.+1176   	; 0x12c0 <__fpcmp_parts_f>
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <__ltsf2+0x50>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	68 96       	adiw	r28, 0x18	; 24
     e2e:	e6 e0       	ldi	r30, 0x06	; 6
     e30:	4b c3       	rjmp	.+1686   	; 0x14c8 <__epilogue_restores__+0x18>

00000e32 <__floatsisf>:
     e32:	a8 e0       	ldi	r26, 0x08	; 8
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ee e1       	ldi	r30, 0x1E	; 30
     e38:	f7 e0       	ldi	r31, 0x07	; 7
     e3a:	27 c3       	rjmp	.+1614   	; 0x148a <__prologue_saves__+0x12>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	da 01       	movw	r26, r20
     e46:	c9 01       	movw	r24, r18
     e48:	88 27       	eor	r24, r24
     e4a:	b7 fd       	sbrc	r27, 7
     e4c:	83 95       	inc	r24
     e4e:	99 27       	eor	r25, r25
     e50:	aa 27       	eor	r26, r26
     e52:	bb 27       	eor	r27, r27
     e54:	b8 2e       	mov	r11, r24
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	41 05       	cpc	r20, r1
     e5c:	51 05       	cpc	r21, r1
     e5e:	19 f4       	brne	.+6      	; 0xe66 <__floatsisf+0x34>
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	39 c0       	rjmp	.+114    	; 0xed8 <__floatsisf+0xa6>
     e66:	88 23       	and	r24, r24
     e68:	a9 f0       	breq	.+42     	; 0xe94 <__floatsisf+0x62>
     e6a:	20 30       	cpi	r18, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	38 07       	cpc	r19, r24
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	48 07       	cpc	r20, r24
     e74:	80 e8       	ldi	r24, 0x80	; 128
     e76:	58 07       	cpc	r21, r24
     e78:	29 f4       	brne	.+10     	; 0xe84 <__floatsisf+0x52>
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	9f ec       	ldi	r25, 0xCF	; 207
     e82:	2e c0       	rjmp	.+92     	; 0xee0 <__floatsisf+0xae>
     e84:	ee 24       	eor	r14, r14
     e86:	ff 24       	eor	r15, r15
     e88:	87 01       	movw	r16, r14
     e8a:	e2 1a       	sub	r14, r18
     e8c:	f3 0a       	sbc	r15, r19
     e8e:	04 0b       	sbc	r16, r20
     e90:	15 0b       	sbc	r17, r21
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <__floatsisf+0x66>
     e94:	79 01       	movw	r14, r18
     e96:	8a 01       	movw	r16, r20
     e98:	8e e1       	ldi	r24, 0x1E	; 30
     e9a:	c8 2e       	mov	r12, r24
     e9c:	d1 2c       	mov	r13, r1
     e9e:	dc 82       	std	Y+4, r13	; 0x04
     ea0:	cb 82       	std	Y+3, r12	; 0x03
     ea2:	ed 82       	std	Y+5, r14	; 0x05
     ea4:	fe 82       	std	Y+6, r15	; 0x06
     ea6:	0f 83       	std	Y+7, r16	; 0x07
     ea8:	18 87       	std	Y+8, r17	; 0x08
     eaa:	c8 01       	movw	r24, r16
     eac:	b7 01       	movw	r22, r14
     eae:	6c d0       	rcall	.+216    	; 0xf88 <__clzsi2>
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	18 16       	cp	r1, r24
     eb4:	19 06       	cpc	r1, r25
     eb6:	84 f4       	brge	.+32     	; 0xed8 <__floatsisf+0xa6>
     eb8:	08 2e       	mov	r0, r24
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <__floatsisf+0x92>
     ebc:	ee 0c       	add	r14, r14
     ebe:	ff 1c       	adc	r15, r15
     ec0:	00 1f       	adc	r16, r16
     ec2:	11 1f       	adc	r17, r17
     ec4:	0a 94       	dec	r0
     ec6:	d2 f7       	brpl	.-12     	; 0xebc <__floatsisf+0x8a>
     ec8:	ed 82       	std	Y+5, r14	; 0x05
     eca:	fe 82       	std	Y+6, r15	; 0x06
     ecc:	0f 83       	std	Y+7, r16	; 0x07
     ece:	18 87       	std	Y+8, r17	; 0x08
     ed0:	c8 1a       	sub	r12, r24
     ed2:	d9 0a       	sbc	r13, r25
     ed4:	dc 82       	std	Y+4, r13	; 0x04
     ed6:	cb 82       	std	Y+3, r12	; 0x03
     ed8:	ba 82       	std	Y+2, r11	; 0x02
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	a3 d0       	rcall	.+326    	; 0x1026 <__pack_f>
     ee0:	28 96       	adiw	r28, 0x08	; 8
     ee2:	e9 e0       	ldi	r30, 0x09	; 9
     ee4:	ee c2       	rjmp	.+1500   	; 0x14c2 <__epilogue_restores__+0x12>

00000ee6 <__fixsfsi>:
     ee6:	ac e0       	ldi	r26, 0x0C	; 12
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e7       	ldi	r30, 0x78	; 120
     eec:	f7 e0       	ldi	r31, 0x07	; 7
     eee:	d4 c2       	rjmp	.+1448   	; 0x1498 <__prologue_saves__+0x20>
     ef0:	69 83       	std	Y+1, r22	; 0x01
     ef2:	7a 83       	std	Y+2, r23	; 0x02
     ef4:	8b 83       	std	Y+3, r24	; 0x03
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	be 01       	movw	r22, r28
     efe:	6b 5f       	subi	r22, 0xFB	; 251
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	66 d1       	rcall	.+716    	; 0x11d0 <__unpack_f>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	61 f1       	breq	.+88     	; 0xf62 <__fixsfsi+0x7c>
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	50 f1       	brcs	.+84     	; 0xf62 <__fixsfsi+0x7c>
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	21 f4       	brne	.+8      	; 0xf1a <__fixsfsi+0x34>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	88 23       	and	r24, r24
     f16:	51 f1       	breq	.+84     	; 0xf6c <__fixsfsi+0x86>
     f18:	2e c0       	rjmp	.+92     	; 0xf76 <__fixsfsi+0x90>
     f1a:	2f 81       	ldd	r18, Y+7	; 0x07
     f1c:	38 85       	ldd	r19, Y+8	; 0x08
     f1e:	37 fd       	sbrc	r19, 7
     f20:	20 c0       	rjmp	.+64     	; 0xf62 <__fixsfsi+0x7c>
     f22:	6e 81       	ldd	r22, Y+6	; 0x06
     f24:	2f 31       	cpi	r18, 0x1F	; 31
     f26:	31 05       	cpc	r19, r1
     f28:	1c f0       	brlt	.+6      	; 0xf30 <__fixsfsi+0x4a>
     f2a:	66 23       	and	r22, r22
     f2c:	f9 f0       	breq	.+62     	; 0xf6c <__fixsfsi+0x86>
     f2e:	23 c0       	rjmp	.+70     	; 0xf76 <__fixsfsi+0x90>
     f30:	8e e1       	ldi	r24, 0x1E	; 30
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	82 1b       	sub	r24, r18
     f36:	93 0b       	sbc	r25, r19
     f38:	29 85       	ldd	r18, Y+9	; 0x09
     f3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f3c:	4b 85       	ldd	r20, Y+11	; 0x0b
     f3e:	5c 85       	ldd	r21, Y+12	; 0x0c
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <__fixsfsi+0x64>
     f42:	56 95       	lsr	r21
     f44:	47 95       	ror	r20
     f46:	37 95       	ror	r19
     f48:	27 95       	ror	r18
     f4a:	8a 95       	dec	r24
     f4c:	d2 f7       	brpl	.-12     	; 0xf42 <__fixsfsi+0x5c>
     f4e:	66 23       	and	r22, r22
     f50:	b1 f0       	breq	.+44     	; 0xf7e <__fixsfsi+0x98>
     f52:	50 95       	com	r21
     f54:	40 95       	com	r20
     f56:	30 95       	com	r19
     f58:	21 95       	neg	r18
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	4f 4f       	sbci	r20, 0xFF	; 255
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <__fixsfsi+0x98>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <__fixsfsi+0x98>
     f6c:	2f ef       	ldi	r18, 0xFF	; 255
     f6e:	3f ef       	ldi	r19, 0xFF	; 255
     f70:	4f ef       	ldi	r20, 0xFF	; 255
     f72:	5f e7       	ldi	r21, 0x7F	; 127
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <__fixsfsi+0x98>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e8       	ldi	r21, 0x80	; 128
     f7e:	b9 01       	movw	r22, r18
     f80:	ca 01       	movw	r24, r20
     f82:	2c 96       	adiw	r28, 0x0c	; 12
     f84:	e2 e0       	ldi	r30, 0x02	; 2
     f86:	a4 c2       	rjmp	.+1352   	; 0x14d0 <__epilogue_restores__+0x20>

00000f88 <__clzsi2>:
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	7b 01       	movw	r14, r22
     f92:	8c 01       	movw	r16, r24
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	e8 16       	cp	r14, r24
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	f8 06       	cpc	r15, r24
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	08 07       	cpc	r16, r24
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	18 07       	cpc	r17, r24
     fa4:	88 f4       	brcc	.+34     	; 0xfc8 <__clzsi2+0x40>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	e8 16       	cp	r14, r24
     faa:	f1 04       	cpc	r15, r1
     fac:	01 05       	cpc	r16, r1
     fae:	11 05       	cpc	r17, r1
     fb0:	31 f0       	breq	.+12     	; 0xfbe <__clzsi2+0x36>
     fb2:	28 f0       	brcs	.+10     	; 0xfbe <__clzsi2+0x36>
     fb4:	88 e0       	ldi	r24, 0x08	; 8
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	17 c0       	rjmp	.+46     	; 0xfec <__clzsi2+0x64>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__clzsi2+0x64>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	e8 16       	cp	r14, r24
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	f8 06       	cpc	r15, r24
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 07       	cpc	r16, r24
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	18 07       	cpc	r17, r24
     fd8:	28 f0       	brcs	.+10     	; 0xfe4 <__clzsi2+0x5c>
     fda:	88 e1       	ldi	r24, 0x18	; 24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__clzsi2+0x64>
     fe4:	80 e1       	ldi	r24, 0x10	; 16
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	20 e2       	ldi	r18, 0x20	; 32
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	28 1b       	sub	r18, r24
     ff6:	39 0b       	sbc	r19, r25
     ff8:	4a 0b       	sbc	r20, r26
     ffa:	5b 0b       	sbc	r21, r27
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__clzsi2+0x7e>
     ffe:	16 95       	lsr	r17
    1000:	07 95       	ror	r16
    1002:	f7 94       	ror	r15
    1004:	e7 94       	ror	r14
    1006:	8a 95       	dec	r24
    1008:	d2 f7       	brpl	.-12     	; 0xffe <__clzsi2+0x76>
    100a:	f7 01       	movw	r30, r14
    100c:	ed 58       	subi	r30, 0x8D	; 141
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	28 1b       	sub	r18, r24
    1014:	31 09       	sbc	r19, r1
    1016:	41 09       	sbc	r20, r1
    1018:	51 09       	sbc	r21, r1
    101a:	c9 01       	movw	r24, r18
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	08 95       	ret

00001026 <__pack_f>:
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	fc 01       	movw	r30, r24
    1032:	e4 80       	ldd	r14, Z+4	; 0x04
    1034:	f5 80       	ldd	r15, Z+5	; 0x05
    1036:	06 81       	ldd	r16, Z+6	; 0x06
    1038:	17 81       	ldd	r17, Z+7	; 0x07
    103a:	d1 80       	ldd	r13, Z+1	; 0x01
    103c:	80 81       	ld	r24, Z
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	48 f4       	brcc	.+18     	; 0x1054 <__pack_f+0x2e>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 e1       	ldi	r26, 0x10	; 16
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 2a       	or	r14, r24
    104c:	f9 2a       	or	r15, r25
    104e:	0a 2b       	or	r16, r26
    1050:	1b 2b       	or	r17, r27
    1052:	a5 c0       	rjmp	.+330    	; 0x119e <__pack_f+0x178>
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	09 f4       	brne	.+2      	; 0x105a <__pack_f+0x34>
    1058:	9f c0       	rjmp	.+318    	; 0x1198 <__pack_f+0x172>
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	21 f4       	brne	.+8      	; 0x1066 <__pack_f+0x40>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <__pack_f+0x4a>
    1066:	e1 14       	cp	r14, r1
    1068:	f1 04       	cpc	r15, r1
    106a:	01 05       	cpc	r16, r1
    106c:	11 05       	cpc	r17, r1
    106e:	19 f4       	brne	.+6      	; 0x1076 <__pack_f+0x50>
    1070:	e0 e0       	ldi	r30, 0x00	; 0
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	96 c0       	rjmp	.+300    	; 0x11a2 <__pack_f+0x17c>
    1076:	62 81       	ldd	r22, Z+2	; 0x02
    1078:	73 81       	ldd	r23, Z+3	; 0x03
    107a:	9f ef       	ldi	r25, 0xFF	; 255
    107c:	62 38       	cpi	r22, 0x82	; 130
    107e:	79 07       	cpc	r23, r25
    1080:	0c f0       	brlt	.+2      	; 0x1084 <__pack_f+0x5e>
    1082:	5b c0       	rjmp	.+182    	; 0x113a <__pack_f+0x114>
    1084:	22 e8       	ldi	r18, 0x82	; 130
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	26 1b       	sub	r18, r22
    108a:	37 0b       	sbc	r19, r23
    108c:	2a 31       	cpi	r18, 0x1A	; 26
    108e:	31 05       	cpc	r19, r1
    1090:	2c f0       	brlt	.+10     	; 0x109c <__pack_f+0x76>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	2a c0       	rjmp	.+84     	; 0x10f0 <__pack_f+0xca>
    109c:	b8 01       	movw	r22, r16
    109e:	a7 01       	movw	r20, r14
    10a0:	02 2e       	mov	r0, r18
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <__pack_f+0x86>
    10a4:	76 95       	lsr	r23
    10a6:	67 95       	ror	r22
    10a8:	57 95       	ror	r21
    10aa:	47 95       	ror	r20
    10ac:	0a 94       	dec	r0
    10ae:	d2 f7       	brpl	.-12     	; 0x10a4 <__pack_f+0x7e>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <__pack_f+0x9c>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	aa 1f       	adc	r26, r26
    10c0:	bb 1f       	adc	r27, r27
    10c2:	2a 95       	dec	r18
    10c4:	d2 f7       	brpl	.-12     	; 0x10ba <__pack_f+0x94>
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	a1 09       	sbc	r26, r1
    10ca:	b1 09       	sbc	r27, r1
    10cc:	8e 21       	and	r24, r14
    10ce:	9f 21       	and	r25, r15
    10d0:	a0 23       	and	r26, r16
    10d2:	b1 23       	and	r27, r17
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	a1 05       	cpc	r26, r1
    10d8:	b1 05       	cpc	r27, r1
    10da:	21 f0       	breq	.+8      	; 0x10e4 <__pack_f+0xbe>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	9a 01       	movw	r18, r20
    10e6:	ab 01       	movw	r20, r22
    10e8:	28 2b       	or	r18, r24
    10ea:	39 2b       	or	r19, r25
    10ec:	4a 2b       	or	r20, r26
    10ee:	5b 2b       	or	r21, r27
    10f0:	da 01       	movw	r26, r20
    10f2:	c9 01       	movw	r24, r18
    10f4:	8f 77       	andi	r24, 0x7F	; 127
    10f6:	90 70       	andi	r25, 0x00	; 0
    10f8:	a0 70       	andi	r26, 0x00	; 0
    10fa:	b0 70       	andi	r27, 0x00	; 0
    10fc:	80 34       	cpi	r24, 0x40	; 64
    10fe:	91 05       	cpc	r25, r1
    1100:	a1 05       	cpc	r26, r1
    1102:	b1 05       	cpc	r27, r1
    1104:	39 f4       	brne	.+14     	; 0x1114 <__pack_f+0xee>
    1106:	27 ff       	sbrs	r18, 7
    1108:	09 c0       	rjmp	.+18     	; 0x111c <__pack_f+0xf6>
    110a:	20 5c       	subi	r18, 0xC0	; 192
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	4f 4f       	sbci	r20, 0xFF	; 255
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	04 c0       	rjmp	.+8      	; 0x111c <__pack_f+0xf6>
    1114:	21 5c       	subi	r18, 0xC1	; 193
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	4f 4f       	sbci	r20, 0xFF	; 255
    111a:	5f 4f       	sbci	r21, 0xFF	; 255
    111c:	e0 e0       	ldi	r30, 0x00	; 0
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	20 30       	cpi	r18, 0x00	; 0
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	3a 07       	cpc	r19, r26
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	4a 07       	cpc	r20, r26
    112a:	a0 e4       	ldi	r26, 0x40	; 64
    112c:	5a 07       	cpc	r21, r26
    112e:	10 f0       	brcs	.+4      	; 0x1134 <__pack_f+0x10e>
    1130:	e1 e0       	ldi	r30, 0x01	; 1
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	79 01       	movw	r14, r18
    1136:	8a 01       	movw	r16, r20
    1138:	27 c0       	rjmp	.+78     	; 0x1188 <__pack_f+0x162>
    113a:	60 38       	cpi	r22, 0x80	; 128
    113c:	71 05       	cpc	r23, r1
    113e:	64 f5       	brge	.+88     	; 0x1198 <__pack_f+0x172>
    1140:	fb 01       	movw	r30, r22
    1142:	e1 58       	subi	r30, 0x81	; 129
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	d8 01       	movw	r26, r16
    1148:	c7 01       	movw	r24, r14
    114a:	8f 77       	andi	r24, 0x7F	; 127
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	a0 70       	andi	r26, 0x00	; 0
    1150:	b0 70       	andi	r27, 0x00	; 0
    1152:	80 34       	cpi	r24, 0x40	; 64
    1154:	91 05       	cpc	r25, r1
    1156:	a1 05       	cpc	r26, r1
    1158:	b1 05       	cpc	r27, r1
    115a:	39 f4       	brne	.+14     	; 0x116a <__pack_f+0x144>
    115c:	e7 fe       	sbrs	r14, 7
    115e:	0d c0       	rjmp	.+26     	; 0x117a <__pack_f+0x154>
    1160:	80 e4       	ldi	r24, 0x40	; 64
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <__pack_f+0x14c>
    116a:	8f e3       	ldi	r24, 0x3F	; 63
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e0       	ldi	r26, 0x00	; 0
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e8 0e       	add	r14, r24
    1174:	f9 1e       	adc	r15, r25
    1176:	0a 1f       	adc	r16, r26
    1178:	1b 1f       	adc	r17, r27
    117a:	17 ff       	sbrs	r17, 7
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <__pack_f+0x162>
    117e:	16 95       	lsr	r17
    1180:	07 95       	ror	r16
    1182:	f7 94       	ror	r15
    1184:	e7 94       	ror	r14
    1186:	31 96       	adiw	r30, 0x01	; 1
    1188:	87 e0       	ldi	r24, 0x07	; 7
    118a:	16 95       	lsr	r17
    118c:	07 95       	ror	r16
    118e:	f7 94       	ror	r15
    1190:	e7 94       	ror	r14
    1192:	8a 95       	dec	r24
    1194:	d1 f7       	brne	.-12     	; 0x118a <__pack_f+0x164>
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <__pack_f+0x17c>
    1198:	ee 24       	eor	r14, r14
    119a:	ff 24       	eor	r15, r15
    119c:	87 01       	movw	r16, r14
    119e:	ef ef       	ldi	r30, 0xFF	; 255
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	6e 2f       	mov	r22, r30
    11a4:	67 95       	ror	r22
    11a6:	66 27       	eor	r22, r22
    11a8:	67 95       	ror	r22
    11aa:	90 2f       	mov	r25, r16
    11ac:	9f 77       	andi	r25, 0x7F	; 127
    11ae:	d7 94       	ror	r13
    11b0:	dd 24       	eor	r13, r13
    11b2:	d7 94       	ror	r13
    11b4:	8e 2f       	mov	r24, r30
    11b6:	86 95       	lsr	r24
    11b8:	49 2f       	mov	r20, r25
    11ba:	46 2b       	or	r20, r22
    11bc:	58 2f       	mov	r21, r24
    11be:	5d 29       	or	r21, r13
    11c0:	b7 01       	movw	r22, r14
    11c2:	ca 01       	movw	r24, r20
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	08 95       	ret

000011d0 <__unpack_f>:
    11d0:	fc 01       	movw	r30, r24
    11d2:	db 01       	movw	r26, r22
    11d4:	40 81       	ld	r20, Z
    11d6:	51 81       	ldd	r21, Z+1	; 0x01
    11d8:	22 81       	ldd	r18, Z+2	; 0x02
    11da:	62 2f       	mov	r22, r18
    11dc:	6f 77       	andi	r22, 0x7F	; 127
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	22 1f       	adc	r18, r18
    11e2:	22 27       	eor	r18, r18
    11e4:	22 1f       	adc	r18, r18
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	89 2f       	mov	r24, r25
    11ea:	88 0f       	add	r24, r24
    11ec:	82 2b       	or	r24, r18
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	99 1f       	adc	r25, r25
    11f4:	99 27       	eor	r25, r25
    11f6:	99 1f       	adc	r25, r25
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	9c 93       	st	X, r25
    11fc:	11 97       	sbiw	r26, 0x01	; 1
    11fe:	21 15       	cp	r18, r1
    1200:	31 05       	cpc	r19, r1
    1202:	a9 f5       	brne	.+106    	; 0x126e <__unpack_f+0x9e>
    1204:	41 15       	cp	r20, r1
    1206:	51 05       	cpc	r21, r1
    1208:	61 05       	cpc	r22, r1
    120a:	71 05       	cpc	r23, r1
    120c:	11 f4       	brne	.+4      	; 0x1212 <__unpack_f+0x42>
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	37 c0       	rjmp	.+110    	; 0x1280 <__unpack_f+0xb0>
    1212:	82 e8       	ldi	r24, 0x82	; 130
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	13 96       	adiw	r26, 0x03	; 3
    1218:	9c 93       	st	X, r25
    121a:	8e 93       	st	-X, r24
    121c:	12 97       	sbiw	r26, 0x02	; 2
    121e:	9a 01       	movw	r18, r20
    1220:	ab 01       	movw	r20, r22
    1222:	67 e0       	ldi	r22, 0x07	; 7
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	44 1f       	adc	r20, r20
    122a:	55 1f       	adc	r21, r21
    122c:	6a 95       	dec	r22
    122e:	d1 f7       	brne	.-12     	; 0x1224 <__unpack_f+0x54>
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	8c 93       	st	X, r24
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <__unpack_f+0x80>
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	44 1f       	adc	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	8d 91       	ld	r24, X+
    1242:	9c 91       	ld	r25, X
    1244:	13 97       	sbiw	r26, 0x03	; 3
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	13 96       	adiw	r26, 0x03	; 3
    124a:	9c 93       	st	X, r25
    124c:	8e 93       	st	-X, r24
    124e:	12 97       	sbiw	r26, 0x02	; 2
    1250:	20 30       	cpi	r18, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	38 07       	cpc	r19, r24
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	48 07       	cpc	r20, r24
    125a:	80 e4       	ldi	r24, 0x40	; 64
    125c:	58 07       	cpc	r21, r24
    125e:	58 f3       	brcs	.-42     	; 0x1236 <__unpack_f+0x66>
    1260:	14 96       	adiw	r26, 0x04	; 4
    1262:	2d 93       	st	X+, r18
    1264:	3d 93       	st	X+, r19
    1266:	4d 93       	st	X+, r20
    1268:	5c 93       	st	X, r21
    126a:	17 97       	sbiw	r26, 0x07	; 7
    126c:	08 95       	ret
    126e:	2f 3f       	cpi	r18, 0xFF	; 255
    1270:	31 05       	cpc	r19, r1
    1272:	79 f4       	brne	.+30     	; 0x1292 <__unpack_f+0xc2>
    1274:	41 15       	cp	r20, r1
    1276:	51 05       	cpc	r21, r1
    1278:	61 05       	cpc	r22, r1
    127a:	71 05       	cpc	r23, r1
    127c:	19 f4       	brne	.+6      	; 0x1284 <__unpack_f+0xb4>
    127e:	84 e0       	ldi	r24, 0x04	; 4
    1280:	8c 93       	st	X, r24
    1282:	08 95       	ret
    1284:	64 ff       	sbrs	r22, 4
    1286:	03 c0       	rjmp	.+6      	; 0x128e <__unpack_f+0xbe>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	8c 93       	st	X, r24
    128c:	12 c0       	rjmp	.+36     	; 0x12b2 <__unpack_f+0xe2>
    128e:	1c 92       	st	X, r1
    1290:	10 c0       	rjmp	.+32     	; 0x12b2 <__unpack_f+0xe2>
    1292:	2f 57       	subi	r18, 0x7F	; 127
    1294:	30 40       	sbci	r19, 0x00	; 0
    1296:	13 96       	adiw	r26, 0x03	; 3
    1298:	3c 93       	st	X, r19
    129a:	2e 93       	st	-X, r18
    129c:	12 97       	sbiw	r26, 0x02	; 2
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	8c 93       	st	X, r24
    12a2:	87 e0       	ldi	r24, 0x07	; 7
    12a4:	44 0f       	add	r20, r20
    12a6:	55 1f       	adc	r21, r21
    12a8:	66 1f       	adc	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	8a 95       	dec	r24
    12ae:	d1 f7       	brne	.-12     	; 0x12a4 <__unpack_f+0xd4>
    12b0:	70 64       	ori	r23, 0x40	; 64
    12b2:	14 96       	adiw	r26, 0x04	; 4
    12b4:	4d 93       	st	X+, r20
    12b6:	5d 93       	st	X+, r21
    12b8:	6d 93       	st	X+, r22
    12ba:	7c 93       	st	X, r23
    12bc:	17 97       	sbiw	r26, 0x07	; 7
    12be:	08 95       	ret

000012c0 <__fpcmp_parts_f>:
    12c0:	1f 93       	push	r17
    12c2:	dc 01       	movw	r26, r24
    12c4:	fb 01       	movw	r30, r22
    12c6:	9c 91       	ld	r25, X
    12c8:	92 30       	cpi	r25, 0x02	; 2
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <__fpcmp_parts_f+0xe>
    12cc:	47 c0       	rjmp	.+142    	; 0x135c <__fpcmp_parts_f+0x9c>
    12ce:	80 81       	ld	r24, Z
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__fpcmp_parts_f+0x16>
    12d4:	43 c0       	rjmp	.+134    	; 0x135c <__fpcmp_parts_f+0x9c>
    12d6:	94 30       	cpi	r25, 0x04	; 4
    12d8:	51 f4       	brne	.+20     	; 0x12ee <__fpcmp_parts_f+0x2e>
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	1c 91       	ld	r17, X
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	99 f5       	brne	.+102    	; 0x1348 <__fpcmp_parts_f+0x88>
    12e2:	81 81       	ldd	r24, Z+1	; 0x01
    12e4:	68 2f       	mov	r22, r24
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	61 1b       	sub	r22, r17
    12ea:	71 09       	sbc	r23, r1
    12ec:	3f c0       	rjmp	.+126    	; 0x136c <__fpcmp_parts_f+0xac>
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	21 f0       	breq	.+8      	; 0x12fa <__fpcmp_parts_f+0x3a>
    12f2:	92 30       	cpi	r25, 0x02	; 2
    12f4:	31 f4       	brne	.+12     	; 0x1302 <__fpcmp_parts_f+0x42>
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	b9 f1       	breq	.+110    	; 0x1368 <__fpcmp_parts_f+0xa8>
    12fa:	81 81       	ldd	r24, Z+1	; 0x01
    12fc:	88 23       	and	r24, r24
    12fe:	89 f1       	breq	.+98     	; 0x1362 <__fpcmp_parts_f+0xa2>
    1300:	2d c0       	rjmp	.+90     	; 0x135c <__fpcmp_parts_f+0x9c>
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	1c 91       	ld	r17, X
    1306:	11 97       	sbiw	r26, 0x01	; 1
    1308:	82 30       	cpi	r24, 0x02	; 2
    130a:	f1 f0       	breq	.+60     	; 0x1348 <__fpcmp_parts_f+0x88>
    130c:	81 81       	ldd	r24, Z+1	; 0x01
    130e:	18 17       	cp	r17, r24
    1310:	d9 f4       	brne	.+54     	; 0x1348 <__fpcmp_parts_f+0x88>
    1312:	12 96       	adiw	r26, 0x02	; 2
    1314:	2d 91       	ld	r18, X+
    1316:	3c 91       	ld	r19, X
    1318:	13 97       	sbiw	r26, 0x03	; 3
    131a:	82 81       	ldd	r24, Z+2	; 0x02
    131c:	93 81       	ldd	r25, Z+3	; 0x03
    131e:	82 17       	cp	r24, r18
    1320:	93 07       	cpc	r25, r19
    1322:	94 f0       	brlt	.+36     	; 0x1348 <__fpcmp_parts_f+0x88>
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	bc f0       	brlt	.+46     	; 0x1358 <__fpcmp_parts_f+0x98>
    132a:	14 96       	adiw	r26, 0x04	; 4
    132c:	8d 91       	ld	r24, X+
    132e:	9d 91       	ld	r25, X+
    1330:	0d 90       	ld	r0, X+
    1332:	bc 91       	ld	r27, X
    1334:	a0 2d       	mov	r26, r0
    1336:	24 81       	ldd	r18, Z+4	; 0x04
    1338:	35 81       	ldd	r19, Z+5	; 0x05
    133a:	46 81       	ldd	r20, Z+6	; 0x06
    133c:	57 81       	ldd	r21, Z+7	; 0x07
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	4a 07       	cpc	r20, r26
    1344:	5b 07       	cpc	r21, r27
    1346:	18 f4       	brcc	.+6      	; 0x134e <__fpcmp_parts_f+0x8e>
    1348:	11 23       	and	r17, r17
    134a:	41 f0       	breq	.+16     	; 0x135c <__fpcmp_parts_f+0x9c>
    134c:	0a c0       	rjmp	.+20     	; 0x1362 <__fpcmp_parts_f+0xa2>
    134e:	82 17       	cp	r24, r18
    1350:	93 07       	cpc	r25, r19
    1352:	a4 07       	cpc	r26, r20
    1354:	b5 07       	cpc	r27, r21
    1356:	40 f4       	brcc	.+16     	; 0x1368 <__fpcmp_parts_f+0xa8>
    1358:	11 23       	and	r17, r17
    135a:	19 f0       	breq	.+6      	; 0x1362 <__fpcmp_parts_f+0xa2>
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	05 c0       	rjmp	.+10     	; 0x136c <__fpcmp_parts_f+0xac>
    1362:	6f ef       	ldi	r22, 0xFF	; 255
    1364:	7f ef       	ldi	r23, 0xFF	; 255
    1366:	02 c0       	rjmp	.+4      	; 0x136c <__fpcmp_parts_f+0xac>
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	cb 01       	movw	r24, r22
    136e:	1f 91       	pop	r17
    1370:	08 95       	ret

00001372 <__mulsi3>:
    1372:	62 9f       	mul	r22, r18
    1374:	d0 01       	movw	r26, r0
    1376:	73 9f       	mul	r23, r19
    1378:	f0 01       	movw	r30, r0
    137a:	82 9f       	mul	r24, r18
    137c:	e0 0d       	add	r30, r0
    137e:	f1 1d       	adc	r31, r1
    1380:	64 9f       	mul	r22, r20
    1382:	e0 0d       	add	r30, r0
    1384:	f1 1d       	adc	r31, r1
    1386:	92 9f       	mul	r25, r18
    1388:	f0 0d       	add	r31, r0
    138a:	83 9f       	mul	r24, r19
    138c:	f0 0d       	add	r31, r0
    138e:	74 9f       	mul	r23, r20
    1390:	f0 0d       	add	r31, r0
    1392:	65 9f       	mul	r22, r21
    1394:	f0 0d       	add	r31, r0
    1396:	99 27       	eor	r25, r25
    1398:	72 9f       	mul	r23, r18
    139a:	b0 0d       	add	r27, r0
    139c:	e1 1d       	adc	r30, r1
    139e:	f9 1f       	adc	r31, r25
    13a0:	63 9f       	mul	r22, r19
    13a2:	b0 0d       	add	r27, r0
    13a4:	e1 1d       	adc	r30, r1
    13a6:	f9 1f       	adc	r31, r25
    13a8:	bd 01       	movw	r22, r26
    13aa:	cf 01       	movw	r24, r30
    13ac:	11 24       	eor	r1, r1
    13ae:	08 95       	ret

000013b0 <__divmodhi4>:
    13b0:	97 fb       	bst	r25, 7
    13b2:	09 2e       	mov	r0, r25
    13b4:	07 26       	eor	r0, r23
    13b6:	0a d0       	rcall	.+20     	; 0x13cc <__divmodhi4_neg1>
    13b8:	77 fd       	sbrc	r23, 7
    13ba:	04 d0       	rcall	.+8      	; 0x13c4 <__divmodhi4_neg2>
    13bc:	27 d0       	rcall	.+78     	; 0x140c <__udivmodhi4>
    13be:	06 d0       	rcall	.+12     	; 0x13cc <__divmodhi4_neg1>
    13c0:	00 20       	and	r0, r0
    13c2:	1a f4       	brpl	.+6      	; 0x13ca <__divmodhi4_exit>

000013c4 <__divmodhi4_neg2>:
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255

000013ca <__divmodhi4_exit>:
    13ca:	08 95       	ret

000013cc <__divmodhi4_neg1>:
    13cc:	f6 f7       	brtc	.-4      	; 0x13ca <__divmodhi4_exit>
    13ce:	90 95       	com	r25
    13d0:	81 95       	neg	r24
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	08 95       	ret

000013d6 <__divmodsi4>:
    13d6:	97 fb       	bst	r25, 7
    13d8:	09 2e       	mov	r0, r25
    13da:	05 26       	eor	r0, r21
    13dc:	0e d0       	rcall	.+28     	; 0x13fa <__divmodsi4_neg1>
    13de:	57 fd       	sbrc	r21, 7
    13e0:	04 d0       	rcall	.+8      	; 0x13ea <__divmodsi4_neg2>
    13e2:	28 d0       	rcall	.+80     	; 0x1434 <__udivmodsi4>
    13e4:	0a d0       	rcall	.+20     	; 0x13fa <__divmodsi4_neg1>
    13e6:	00 1c       	adc	r0, r0
    13e8:	38 f4       	brcc	.+14     	; 0x13f8 <__divmodsi4_exit>

000013ea <__divmodsi4_neg2>:
    13ea:	50 95       	com	r21
    13ec:	40 95       	com	r20
    13ee:	30 95       	com	r19
    13f0:	21 95       	neg	r18
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	4f 4f       	sbci	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255

000013f8 <__divmodsi4_exit>:
    13f8:	08 95       	ret

000013fa <__divmodsi4_neg1>:
    13fa:	f6 f7       	brtc	.-4      	; 0x13f8 <__divmodsi4_exit>
    13fc:	90 95       	com	r25
    13fe:	80 95       	com	r24
    1400:	70 95       	com	r23
    1402:	61 95       	neg	r22
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__udivmodhi4>:
    140c:	aa 1b       	sub	r26, r26
    140e:	bb 1b       	sub	r27, r27
    1410:	51 e1       	ldi	r21, 0x11	; 17
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <__udivmodhi4_ep>

00001414 <__udivmodhi4_loop>:
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	a6 17       	cp	r26, r22
    141a:	b7 07       	cpc	r27, r23
    141c:	10 f0       	brcs	.+4      	; 0x1422 <__udivmodhi4_ep>
    141e:	a6 1b       	sub	r26, r22
    1420:	b7 0b       	sbc	r27, r23

00001422 <__udivmodhi4_ep>:
    1422:	88 1f       	adc	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	5a 95       	dec	r21
    1428:	a9 f7       	brne	.-22     	; 0x1414 <__udivmodhi4_loop>
    142a:	80 95       	com	r24
    142c:	90 95       	com	r25
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	08 95       	ret

00001434 <__udivmodsi4>:
    1434:	a1 e2       	ldi	r26, 0x21	; 33
    1436:	1a 2e       	mov	r1, r26
    1438:	aa 1b       	sub	r26, r26
    143a:	bb 1b       	sub	r27, r27
    143c:	fd 01       	movw	r30, r26
    143e:	0d c0       	rjmp	.+26     	; 0x145a <__udivmodsi4_ep>

00001440 <__udivmodsi4_loop>:
    1440:	aa 1f       	adc	r26, r26
    1442:	bb 1f       	adc	r27, r27
    1444:	ee 1f       	adc	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	a2 17       	cp	r26, r18
    144a:	b3 07       	cpc	r27, r19
    144c:	e4 07       	cpc	r30, r20
    144e:	f5 07       	cpc	r31, r21
    1450:	20 f0       	brcs	.+8      	; 0x145a <__udivmodsi4_ep>
    1452:	a2 1b       	sub	r26, r18
    1454:	b3 0b       	sbc	r27, r19
    1456:	e4 0b       	sbc	r30, r20
    1458:	f5 0b       	sbc	r31, r21

0000145a <__udivmodsi4_ep>:
    145a:	66 1f       	adc	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	1a 94       	dec	r1
    1464:	69 f7       	brne	.-38     	; 0x1440 <__udivmodsi4_loop>
    1466:	60 95       	com	r22
    1468:	70 95       	com	r23
    146a:	80 95       	com	r24
    146c:	90 95       	com	r25
    146e:	9b 01       	movw	r18, r22
    1470:	ac 01       	movw	r20, r24
    1472:	bd 01       	movw	r22, r26
    1474:	cf 01       	movw	r24, r30
    1476:	08 95       	ret

00001478 <__prologue_saves__>:
    1478:	2f 92       	push	r2
    147a:	3f 92       	push	r3
    147c:	4f 92       	push	r4
    147e:	5f 92       	push	r5
    1480:	6f 92       	push	r6
    1482:	7f 92       	push	r7
    1484:	8f 92       	push	r8
    1486:	9f 92       	push	r9
    1488:	af 92       	push	r10
    148a:	bf 92       	push	r11
    148c:	cf 92       	push	r12
    148e:	df 92       	push	r13
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	ca 1b       	sub	r28, r26
    14a2:	db 0b       	sbc	r29, r27
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	09 94       	ijmp

000014b0 <__epilogue_restores__>:
    14b0:	2a 88       	ldd	r2, Y+18	; 0x12
    14b2:	39 88       	ldd	r3, Y+17	; 0x11
    14b4:	48 88       	ldd	r4, Y+16	; 0x10
    14b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    14ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    14bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    14be:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c2:	b9 84       	ldd	r11, Y+9	; 0x09
    14c4:	c8 84       	ldd	r12, Y+8	; 0x08
    14c6:	df 80       	ldd	r13, Y+7	; 0x07
    14c8:	ee 80       	ldd	r14, Y+6	; 0x06
    14ca:	fd 80       	ldd	r15, Y+5	; 0x05
    14cc:	0c 81       	ldd	r16, Y+4	; 0x04
    14ce:	1b 81       	ldd	r17, Y+3	; 0x03
    14d0:	aa 81       	ldd	r26, Y+2	; 0x02
    14d2:	b9 81       	ldd	r27, Y+1	; 0x01
    14d4:	ce 0f       	add	r28, r30
    14d6:	d1 1d       	adc	r29, r1
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	ed 01       	movw	r28, r26
    14e4:	08 95       	ret

000014e6 <do_rand>:
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e8 e7       	ldi	r30, 0x78	; 120
    14ec:	fa e0       	ldi	r31, 0x0A	; 10
    14ee:	cc cf       	rjmp	.-104    	; 0x1488 <__prologue_saves__+0x10>
    14f0:	ec 01       	movw	r28, r24
    14f2:	a8 80       	ld	r10, Y
    14f4:	b9 80       	ldd	r11, Y+1	; 0x01
    14f6:	ca 80       	ldd	r12, Y+2	; 0x02
    14f8:	db 80       	ldd	r13, Y+3	; 0x03
    14fa:	a1 14       	cp	r10, r1
    14fc:	b1 04       	cpc	r11, r1
    14fe:	c1 04       	cpc	r12, r1
    1500:	d1 04       	cpc	r13, r1
    1502:	41 f4       	brne	.+16     	; 0x1514 <do_rand+0x2e>
    1504:	84 e2       	ldi	r24, 0x24	; 36
    1506:	a8 2e       	mov	r10, r24
    1508:	89 ed       	ldi	r24, 0xD9	; 217
    150a:	b8 2e       	mov	r11, r24
    150c:	8b e5       	ldi	r24, 0x5B	; 91
    150e:	c8 2e       	mov	r12, r24
    1510:	87 e0       	ldi	r24, 0x07	; 7
    1512:	d8 2e       	mov	r13, r24
    1514:	c6 01       	movw	r24, r12
    1516:	b5 01       	movw	r22, r10
    1518:	2d e1       	ldi	r18, 0x1D	; 29
    151a:	33 ef       	ldi	r19, 0xF3	; 243
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	5a df       	rcall	.-332    	; 0x13d6 <__divmodsi4>
    1522:	27 ea       	ldi	r18, 0xA7	; 167
    1524:	31 e4       	ldi	r19, 0x41	; 65
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	23 df       	rcall	.-442    	; 0x1372 <__mulsi3>
    152c:	7b 01       	movw	r14, r22
    152e:	8c 01       	movw	r16, r24
    1530:	c6 01       	movw	r24, r12
    1532:	b5 01       	movw	r22, r10
    1534:	2d e1       	ldi	r18, 0x1D	; 29
    1536:	33 ef       	ldi	r19, 0xF3	; 243
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	4c df       	rcall	.-360    	; 0x13d6 <__divmodsi4>
    153e:	ca 01       	movw	r24, r20
    1540:	b9 01       	movw	r22, r18
    1542:	2c ee       	ldi	r18, 0xEC	; 236
    1544:	34 ef       	ldi	r19, 0xF4	; 244
    1546:	4f ef       	ldi	r20, 0xFF	; 255
    1548:	5f ef       	ldi	r21, 0xFF	; 255
    154a:	13 df       	rcall	.-474    	; 0x1372 <__mulsi3>
    154c:	6e 0d       	add	r22, r14
    154e:	7f 1d       	adc	r23, r15
    1550:	80 1f       	adc	r24, r16
    1552:	91 1f       	adc	r25, r17
    1554:	97 ff       	sbrs	r25, 7
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <do_rand+0x7a>
    1558:	61 50       	subi	r22, 0x01	; 1
    155a:	70 40       	sbci	r23, 0x00	; 0
    155c:	80 40       	sbci	r24, 0x00	; 0
    155e:	90 48       	sbci	r25, 0x80	; 128
    1560:	68 83       	st	Y, r22
    1562:	79 83       	std	Y+1, r23	; 0x01
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	9b 83       	std	Y+3, r25	; 0x03
    1568:	9b 01       	movw	r18, r22
    156a:	3f 77       	andi	r19, 0x7F	; 127
    156c:	c9 01       	movw	r24, r18
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	ea e0       	ldi	r30, 0x0A	; 10
    1574:	a5 cf       	rjmp	.-182    	; 0x14c0 <__epilogue_restores__+0x10>

00001576 <rand_r>:
    1576:	b7 df       	rcall	.-146    	; 0x14e6 <do_rand>
    1578:	08 95       	ret

0000157a <rand>:
    157a:	83 e7       	ldi	r24, 0x73	; 115
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	b3 df       	rcall	.-154    	; 0x14e6 <do_rand>
    1580:	08 95       	ret

00001582 <srand>:
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	80 93 73 01 	sts	0x0173, r24
    158a:	90 93 74 01 	sts	0x0174, r25
    158e:	a0 93 75 01 	sts	0x0175, r26
    1592:	b0 93 76 01 	sts	0x0176, r27
    1596:	08 95       	ret

00001598 <_exit>:
    1598:	f8 94       	cli

0000159a <__stop_program>:
    159a:	ff cf       	rjmp	.-2      	; 0x159a <__stop_program>
