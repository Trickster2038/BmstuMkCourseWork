
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00001598  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800178  00800178  00001744  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004f8  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029ac  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001627  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019a2  00000000  00000000  00005e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00007814  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057e  00000000  00000000  00007b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000af3  00000000  00000000  000080e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00008bd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
       4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
       6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
       8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
       a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
       c:	6e c1       	rjmp	.+732    	; 0x2ea <__vector_6>
       e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
      10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
      12:	27 c0       	rjmp	.+78     	; 0x62 <__vector_9>
      14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
      16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
      18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
      1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
      1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
      1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
      20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
      22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
      24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
      26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
      28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	11 e0       	ldi	r17, 0x01	; 1
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e8 e9       	ldi	r30, 0x98	; 152
      3e:	f5 e1       	ldi	r31, 0x15	; 21
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a8 37       	cpi	r26, 0x78	; 120
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a8 e7       	ldi	r26, 0x78	; 120
      50:	b1 e0       	ldi	r27, 0x01	; 1
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	af 3a       	cpi	r26, 0xAF	; 175
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	29 d0       	rcall	.+82     	; 0xb0 <main>
      5e:	9a ca       	rjmp	.-2764   	; 0xfffff594 <__eeprom_end+0xff7ef594>

00000060 <__bad_interrupt>:
      60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <__vector_9>:
  }
  TCNT1=0; //clear ticks
  timer_control++; // for debug
}

ISR (TIMER0_OVF_vect){
      62:	1f 92       	push	r1
      64:	0f 92       	push	r0
      66:	0f b6       	in	r0, 0x3f	; 63
      68:	0f 92       	push	r0
      6a:	11 24       	eor	r1, r1
      6c:	2f 93       	push	r18
      6e:	3f 93       	push	r19
      70:	4f 93       	push	r20
      72:	5f 93       	push	r21
      74:	6f 93       	push	r22
      76:	7f 93       	push	r23
      78:	8f 93       	push	r24
      7a:	9f 93       	push	r25
      7c:	af 93       	push	r26
      7e:	bf 93       	push	r27
      80:	ef 93       	push	r30
      82:	ff 93       	push	r31
	if(display_on == 1){
      84:	80 91 78 01 	lds	r24, 0x0178
      88:	81 30       	cpi	r24, 0x01	; 1
      8a:	09 f4       	brne	.+2      	; 0x8e <__vector_9+0x2c>
		display_flash_once();
      8c:	f4 d2       	rcall	.+1512   	; 0x676 <display_flash_once>
	}
}
      8e:	ff 91       	pop	r31
      90:	ef 91       	pop	r30
      92:	bf 91       	pop	r27
      94:	af 91       	pop	r26
      96:	9f 91       	pop	r25
      98:	8f 91       	pop	r24
      9a:	7f 91       	pop	r23
      9c:	6f 91       	pop	r22
      9e:	5f 91       	pop	r21
      a0:	4f 91       	pop	r20
      a2:	3f 91       	pop	r19
      a4:	2f 91       	pop	r18
      a6:	0f 90       	pop	r0
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	0f 90       	pop	r0
      ac:	1f 90       	pop	r1
      ae:	18 95       	reti

000000b0 <main>:
	display_off();
	led_line = leds_random_line();
	display_set_long(0);
}

int main(){
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
	//init_main();
	uart_init();
      ba:	b2 d1       	rcall	.+868    	; 0x420 <uart_init>
	sei();
      bc:	78 94       	sei

	uart_send_byte(1);
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	b8 d1       	rcall	.+880    	; 0x432 <uart_send_byte>

	uart_send_long(123456);
      c2:	80 e4       	ldi	r24, 0x40	; 64
      c4:	92 ee       	ldi	r25, 0xE2	; 226
      c6:	b9 d1       	rcall	.+882    	; 0x43a <uart_send_long>

	display_set_long(1234);
      c8:	62 ed       	ldi	r22, 0xD2	; 210
      ca:	74 e0       	ldi	r23, 0x04	; 4
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	6d d2       	rcall	.+1242   	; 0x5ac <display_set_long>

	display_flash_once();
      d2:	d1 d2       	rcall	.+1442   	; 0x676 <display_flash_once>

	leds_random_line();
      d4:	08 d3       	rcall	.+1552   	; 0x6e6 <leds_random_line>

	leds_move_column();
      d6:	ec d2       	rcall	.+1496   	; 0x6b0 <leds_move_column>

	keyboard_get_state();
      d8:	72 d1       	rcall	.+740    	; 0x3be <keyboard_get_state>

		} else {

			if(key == 9){
				display_set_long(0);
				display_on = 1;
      da:	ff 24       	eor	r15, r15
      dc:	f3 94       	inc	r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      de:	00 e1       	ldi	r16, 0x10	; 16
      e0:	17 e2       	ldi	r17, 0x27	; 39

	keyboard_get_state();


	while(1){
		key = keyboard_get_state();
      e2:	c4 e6       	ldi	r28, 0x64	; 100
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	6b d1       	rcall	.+726    	; 0x3be <keyboard_get_state>
      e8:	28 2f       	mov	r18, r24
      ea:	80 93 79 01 	sts	0x0179, r24

		if(active == 1){
      ee:	80 91 7b 01 	lds	r24, 0x017B
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	09 f0       	breq	.+2      	; 0xf8 <main+0x48>
      f6:	9a c0       	rjmp	.+308    	; 0x22c <main+0x17c>

			if((key != 0) && (key <= 8)){
      f8:	82 2f       	mov	r24, r18
      fa:	81 50       	subi	r24, 0x01	; 1
      fc:	88 30       	cpi	r24, 0x08	; 8
      fe:	08 f0       	brcs	.+2      	; 0x102 <main+0x52>
     100:	56 c0       	rjmp	.+172    	; 0x1ae <main+0xfe>
				if(key == (led_line + 1)){
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	80 91 7a 01 	lds	r24, 0x017A
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	28 17       	cp	r18, r24
     10e:	39 07       	cpc	r19, r25
     110:	09 f0       	breq	.+2      	; 0x114 <main+0x64>
     112:	4a c0       	rjmp	.+148    	; 0x1a8 <main+0xf8>
					timer_ms_buff = timer_ms; 
     114:	60 91 7c 01 	lds	r22, 0x017C
     118:	70 91 7d 01 	lds	r23, 0x017D
     11c:	80 91 7e 01 	lds	r24, 0x017E
     120:	90 91 7f 01 	lds	r25, 0x017F
     124:	60 93 9a 01 	sts	0x019A, r22
     128:	70 93 9b 01 	sts	0x019B, r23
     12c:	80 93 9c 01 	sts	0x019C, r24
     130:	90 93 9d 01 	sts	0x019D, r25
					display_set_long(timer_ms_buff);
     134:	3b d2       	rcall	.+1142   	; 0x5ac <display_set_long>
					results[(int) tries_counter] = timer_ms_buff;
     136:	60 91 80 01 	lds	r22, 0x0180
     13a:	20 91 9a 01 	lds	r18, 0x019A
     13e:	30 91 9b 01 	lds	r19, 0x019B
     142:	40 91 9c 01 	lds	r20, 0x019C
     146:	50 91 9d 01 	lds	r21, 0x019D
     14a:	e6 2f       	mov	r30, r22
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	ee 0f       	add	r30, r30
     154:	ff 1f       	adc	r31, r31
     156:	e6 57       	subi	r30, 0x76	; 118
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	20 83       	st	Z, r18
     15c:	31 83       	std	Z+1, r19	; 0x01
     15e:	42 83       	std	Z+2, r20	; 0x02
     160:	53 83       	std	Z+3, r21	; 0x03
					sum_timer_ms += timer_ms_buff;
     162:	80 91 81 01 	lds	r24, 0x0181
     166:	90 91 82 01 	lds	r25, 0x0182
     16a:	a0 91 83 01 	lds	r26, 0x0183
     16e:	b0 91 84 01 	lds	r27, 0x0184
     172:	82 0f       	add	r24, r18
     174:	93 1f       	adc	r25, r19
     176:	a4 1f       	adc	r26, r20
     178:	b5 1f       	adc	r27, r21
     17a:	80 93 81 01 	sts	0x0181, r24
     17e:	90 93 82 01 	sts	0x0182, r25
     182:	a0 93 83 01 	sts	0x0183, r26
     186:	b0 93 84 01 	sts	0x0184, r27
					tries_counter++;
     18a:	6f 5f       	subi	r22, 0xFF	; 255
     18c:	60 93 80 01 	sts	0x0180, r22
					timer_ms = 0;
     190:	10 92 7c 01 	sts	0x017C, r1
     194:	10 92 7d 01 	sts	0x017D, r1
     198:	10 92 7e 01 	sts	0x017E, r1
     19c:	10 92 7f 01 	sts	0x017F, r1
					led_line = leds_random_line();
     1a0:	a2 d2       	rcall	.+1348   	; 0x6e6 <leds_random_line>
     1a2:	80 93 7a 01 	sts	0x017A, r24
     1a6:	03 c0       	rjmp	.+6      	; 0x1ae <main+0xfe>
				} else {
					buzzer_beep(BUZZER_DELAY);
     1a8:	82 e3       	ldi	r24, 0x32	; 50
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	a3 d2       	rcall	.+1350   	; 0x6f4 <buzzer_beep>
				}
			} 

			if(key == 9){
     1ae:	80 91 79 01 	lds	r24, 0x0179
     1b2:	89 30       	cpi	r24, 0x09	; 9
     1b4:	31 f4       	brne	.+12     	; 0x1c2 <main+0x112>
				display_on = 0;
     1b6:	10 92 78 01 	sts	0x0178, r1
				display_off();
     1ba:	59 d2       	rcall	.+1202   	; 0x66e <display_off>
				active = 0;
     1bc:	10 92 7b 01 	sts	0x017B, r1

				leds_off();
     1c0:	90 d2       	rcall	.+1312   	; 0x6e2 <leds_off>
			} 

			if((key == 10) && (delay_amount > MIN_DELAY)){
     1c2:	80 91 79 01 	lds	r24, 0x0179
     1c6:	8a 30       	cpi	r24, 0x0A	; 10
     1c8:	49 f4       	brne	.+18     	; 0x1dc <main+0x12c>
     1ca:	80 91 60 00 	lds	r24, 0x0060
     1ce:	90 91 61 00 	lds	r25, 0x0061
     1d2:	85 36       	cpi	r24, 0x65	; 101
     1d4:	91 05       	cpc	r25, r1
     1d6:	8c f0       	brlt	.+34     	; 0x1fa <main+0x14a>
				delay_amount -= DELAY_STEP;
     1d8:	0a 97       	sbiw	r24, 0x0a	; 10
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <main+0x142>
			}

			if((key == 11) && (delay_amount < MAX_DELAY)){
     1dc:	8b 30       	cpi	r24, 0x0B	; 11
     1de:	69 f4       	brne	.+26     	; 0x1fa <main+0x14a>
     1e0:	80 91 60 00 	lds	r24, 0x0060
     1e4:	90 91 61 00 	lds	r25, 0x0061
     1e8:	21 e0       	ldi	r18, 0x01	; 1
     1ea:	84 3f       	cpi	r24, 0xF4	; 244
     1ec:	92 07       	cpc	r25, r18
     1ee:	2c f4       	brge	.+10     	; 0x1fa <main+0x14a>
				delay_amount += DELAY_STEP;
     1f0:	0a 96       	adiw	r24, 0x0a	; 10
     1f2:	90 93 61 00 	sts	0x0061, r25
     1f6:	80 93 60 00 	sts	0x0060, r24
			}
			
			if(tries_counter == K){
     1fa:	80 91 80 01 	lds	r24, 0x0180
     1fe:	83 30       	cpi	r24, 0x03	; 3
     200:	09 f0       	breq	.+2      	; 0x204 <main+0x154>
     202:	4d c0       	rjmp	.+154    	; 0x29e <__stack+0x3f>
				display_set_long(sum_timer_ms / K);
     204:	60 91 81 01 	lds	r22, 0x0181
     208:	70 91 82 01 	lds	r23, 0x0182
     20c:	80 91 83 01 	lds	r24, 0x0183
     210:	90 91 84 01 	lds	r25, 0x0184
     214:	23 e0       	ldi	r18, 0x03	; 3
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	da d8       	rcall	.-3660   	; 0xfffff3d2 <__eeprom_end+0xff7ef3d2>
     21e:	ca 01       	movw	r24, r20
     220:	b9 01       	movw	r22, r18
     222:	c4 d1       	rcall	.+904    	; 0x5ac <display_set_long>
				leds_off();
     224:	5e d2       	rcall	.+1212   	; 0x6e2 <leds_off>
				active = 0;
     226:	10 92 7b 01 	sts	0x017B, r1
     22a:	39 c0       	rjmp	.+114    	; 0x29e <__stack+0x3f>
			}			

		} else {

			if(key == 9){
     22c:	29 30       	cpi	r18, 0x09	; 9
     22e:	f1 f4       	brne	.+60     	; 0x26c <__stack+0xd>
				display_set_long(0);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	b9 d1       	rcall	.+882    	; 0x5ac <display_set_long>
				display_on = 1;
     23a:	f0 92 78 01 	sts	0x0178, r15
				active = 1;
     23e:	f0 92 7b 01 	sts	0x017B, r15

				tries_counter = 0;
     242:	10 92 80 01 	sts	0x0180, r1
				sum_timer_ms = 0;
     246:	10 92 81 01 	sts	0x0181, r1
     24a:	10 92 82 01 	sts	0x0182, r1
     24e:	10 92 83 01 	sts	0x0183, r1
     252:	10 92 84 01 	sts	0x0184, r1
				timer_ms = 0;
     256:	10 92 7c 01 	sts	0x017C, r1
     25a:	10 92 7d 01 	sts	0x017D, r1
     25e:	10 92 7e 01 	sts	0x017E, r1
     262:	10 92 7f 01 	sts	0x017F, r1
				led_line = leds_random_line(); // refresh line after reset
     266:	3f d2       	rcall	.+1150   	; 0x6e6 <leds_random_line>
     268:	80 93 7a 01 	sts	0x017A, r24
			} 

			if((key == 12)&&(tries_counter == K)){
     26c:	80 91 79 01 	lds	r24, 0x0179
     270:	8c 30       	cpi	r24, 0x0C	; 12
     272:	a9 f4       	brne	.+42     	; 0x29e <__stack+0x3f>
     274:	80 91 80 01 	lds	r24, 0x0180
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	89 f4       	brne	.+34     	; 0x29e <__stack+0x3f>
					uart_send_data(results, K, sum_timer_ms / K);
     27c:	60 91 81 01 	lds	r22, 0x0181
     280:	70 91 82 01 	lds	r23, 0x0182
     284:	80 91 83 01 	lds	r24, 0x0183
     288:	90 91 84 01 	lds	r25, 0x0184
     28c:	23 e0       	ldi	r18, 0x03	; 3
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	9e d8       	rcall	.-3780   	; 0xfffff3d2 <__eeprom_end+0xff7ef3d2>
     296:	8a e8       	ldi	r24, 0x8A	; 138
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	63 e0       	ldi	r22, 0x03	; 3
     29c:	21 d1       	rcall	.+578    	; 0x4e0 <uart_send_data>
				}
		}

		if(key != 0){
     29e:	80 91 79 01 	lds	r24, 0x0179
     2a2:	88 23       	and	r24, r24
     2a4:	41 f0       	breq	.+16     	; 0x2b6 <__stack+0x57>
     2a6:	88 e8       	ldi	r24, 0x88	; 136
     2a8:	93 e1       	ldi	r25, 0x13	; 19
     2aa:	fe 01       	movw	r30, r28
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <__stack+0x4d>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b2:	d9 f7       	brne	.-10     	; 0x2aa <__stack+0x4b>
     2b4:	18 cf       	rjmp	.-464    	; 0xe6 <main+0x36>
     2b6:	c8 01       	movw	r24, r16
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <__stack+0x59>
     2bc:	14 cf       	rjmp	.-472    	; 0xe6 <main+0x36>

000002be <init_main>:
		display_flash_once();
	}
}

void init_main(void){
	timer0_init();
     2be:	6a d2       	rcall	.+1236   	; 0x794 <timer0_init>
	timer1_init();
     2c0:	6f d2       	rcall	.+1246   	; 0x7a0 <timer1_init>
	DDRA=0xF0;
     2c2:	80 ef       	ldi	r24, 0xF0	; 240
     2c4:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F; // resistors on buttons
     2c6:	8f e0       	ldi	r24, 0x0F	; 15
     2c8:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF; // PORTC - OUTPUT
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF; // PORTB - OUTPUT
     2ce:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; // PORTD - OUTPUT
     2d0:	81 bb       	out	0x11, r24	; 17
	uart_init();
     2d2:	a6 d0       	rcall	.+332    	; 0x420 <uart_init>
	sei();
     2d4:	78 94       	sei

	display_off();
     2d6:	cb d1       	rcall	.+918    	; 0x66e <display_off>
	led_line = leds_random_line();
     2d8:	06 d2       	rcall	.+1036   	; 0x6e6 <leds_random_line>
     2da:	80 93 7a 01 	sts	0x017A, r24
	display_set_long(0);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	62 d1       	rcall	.+708    	; 0x5ac <display_set_long>
}
     2e8:	08 95       	ret

000002ea <__vector_6>:
long sum_timer_ms = 0;

long results[K];

ISR (TIMER1_COMPA_vect)
{
     2ea:	1f 92       	push	r1
     2ec:	0f 92       	push	r0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	2f 93       	push	r18
     2fe:	3f 93       	push	r19
     300:	4f 93       	push	r20
     302:	5f 93       	push	r21
     304:	6f 93       	push	r22
     306:	7f 93       	push	r23
     308:	8f 93       	push	r24
     30a:	9f 93       	push	r25
     30c:	af 93       	push	r26
     30e:	bf 93       	push	r27
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
  timer_ms++;
     314:	e0 90 7c 01 	lds	r14, 0x017C
     318:	f0 90 7d 01 	lds	r15, 0x017D
     31c:	00 91 7e 01 	lds	r16, 0x017E
     320:	10 91 7f 01 	lds	r17, 0x017F
     324:	08 94       	sec
     326:	e1 1c       	adc	r14, r1
     328:	f1 1c       	adc	r15, r1
     32a:	01 1d       	adc	r16, r1
     32c:	11 1d       	adc	r17, r1
     32e:	e0 92 7c 01 	sts	0x017C, r14
     332:	f0 92 7d 01 	sts	0x017D, r15
     336:	00 93 7e 01 	sts	0x017E, r16
     33a:	10 93 7f 01 	sts	0x017F, r17
  if((active == 1) && (timer_ms % delay_amount == 0)){
     33e:	80 91 7b 01 	lds	r24, 0x017B
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	91 f4       	brne	.+36     	; 0x36a <__vector_6+0x80>
     346:	20 91 60 00 	lds	r18, 0x0060
     34a:	30 91 61 00 	lds	r19, 0x0061
     34e:	44 27       	eor	r20, r20
     350:	37 fd       	sbrc	r19, 7
     352:	40 95       	com	r20
     354:	54 2f       	mov	r21, r20
     356:	c8 01       	movw	r24, r16
     358:	b7 01       	movw	r22, r14
     35a:	3b d8       	rcall	.-3978   	; 0xfffff3d2 <__eeprom_end+0xff7ef3d2>
     35c:	61 15       	cp	r22, r1
     35e:	71 05       	cpc	r23, r1
     360:	81 05       	cpc	r24, r1
     362:	91 05       	cpc	r25, r1
     364:	11 f4       	brne	.+4      	; 0x36a <__vector_6+0x80>
 	leds_move_column();
     366:	a4 d1       	rcall	.+840    	; 0x6b0 <leds_move_column>
	leds_update();
     368:	98 d1       	rcall	.+816    	; 0x69a <leds_update>
  }
  TCNT1=0; //clear ticks
     36a:	1d bc       	out	0x2d, r1	; 45
     36c:	1c bc       	out	0x2c, r1	; 44
  timer_control++; // for debug
     36e:	80 91 96 01 	lds	r24, 0x0196
     372:	90 91 97 01 	lds	r25, 0x0197
     376:	a0 91 98 01 	lds	r26, 0x0198
     37a:	b0 91 99 01 	lds	r27, 0x0199
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	a1 1d       	adc	r26, r1
     382:	b1 1d       	adc	r27, r1
     384:	80 93 96 01 	sts	0x0196, r24
     388:	90 93 97 01 	sts	0x0197, r25
     38c:	a0 93 98 01 	sts	0x0198, r26
     390:	b0 93 99 01 	sts	0x0199, r27
}
     394:	ff 91       	pop	r31
     396:	ef 91       	pop	r30
     398:	bf 91       	pop	r27
     39a:	af 91       	pop	r26
     39c:	9f 91       	pop	r25
     39e:	8f 91       	pop	r24
     3a0:	7f 91       	pop	r23
     3a2:	6f 91       	pop	r22
     3a4:	5f 91       	pop	r21
     3a6:	4f 91       	pop	r20
     3a8:	3f 91       	pop	r19
     3aa:	2f 91       	pop	r18
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <keyboard_get_state>:
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     3be:	10 92 85 01 	sts	0x0185, r1
     3c2:	40 91 86 01 	lds	r20, 0x0186
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	23 c0       	rjmp	.+70     	; 0x410 <keyboard_get_state+0x52>
    { 
       PORTA=portState[(int) i];
     3ca:	e5 2f       	mov	r30, r21
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 59       	subi	r30, 0x9E	; 158
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	80 81       	ld	r24, Z
     3d4:	8b bb       	out	0x1b, r24	; 27
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	18 c0       	rjmp	.+48     	; 0x40a <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[(int) j])==0))
     3da:	89 b3       	in	r24, 0x19	; 25
     3dc:	24 2f       	mov	r18, r20
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	64 2f       	mov	r22, r20
     3e2:	6f 5f       	subi	r22, 0xFF	; 255
     3e4:	f9 01       	movw	r30, r18
     3e6:	ea 59       	subi	r30, 0x9A	; 154
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	90 81       	ld	r25, Z
     3ec:	89 23       	and	r24, r25
     3ee:	61 f4       	brne	.+24     	; 0x408 <keyboard_get_state+0x4a>
     3f0:	40 93 86 01 	sts	0x0186, r20
     3f4:	50 93 85 01 	sts	0x0185, r21
          {
		  	return (j*4 + i + 1);
     3f8:	85 2f       	mov	r24, r21
     3fa:	8f 5f       	subi	r24, 0xFF	; 255
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	82 0f       	add	r24, r18
     406:	08 95       	ret
     408:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[(int) i];
       for(j=0; j<4; j++)
     40a:	44 30       	cpi	r20, 0x04	; 4
     40c:	31 f7       	brne	.-52     	; 0x3da <keyboard_get_state+0x1c>
     40e:	5f 5f       	subi	r21, 0xFF	; 255
	no idea why they swap
	j - line
	i - column
*/
char keyboard_get_state(){
 	for(i=0; i<4; i++)
     410:	54 30       	cpi	r21, 0x04	; 4
     412:	d8 f2       	brcs	.-74     	; 0x3ca <keyboard_get_state+0xc>
     414:	40 93 86 01 	sts	0x0186, r20
     418:	50 93 85 01 	sts	0x0185, r21
     41c:	80 e0       	ldi	r24, 0x00	; 0
		  	return (j*4 + i + 1);
          }
       }                          
    }
	return 0;  
}
     41e:	08 95       	ret

00000420 <uart_init>:
long divider;
char cnt;
char i;

void uart_init() {
    UBRRH = UBRRH_VALUE;
     420:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
     422:	89 e1       	ldi	r24, 0x19	; 25
     424:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= (1 << U2X);
#else
    UCSRA &= ~(1 << U2X);
     426:	59 98       	cbi	0x0b, 1	; 11
#endif

    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	80 bd       	out	0x20, r24	; 32
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
     42c:	88 e1       	ldi	r24, 0x18	; 24
     42e:	8a b9       	out	0x0a, r24	; 10
}
     430:	08 95       	ret

00000432 <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     432:	5d 9b       	sbis	0x0b, 5	; 11
     434:	fe cf       	rjmp	.-4      	; 0x432 <uart_send_byte>
   UDR = c;
     436:	8c b9       	out	0x0c, r24	; 12
}
     438:	08 95       	ret

0000043a <uart_send_long>:

void uart_send_long(long data) {
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	5b 01       	movw	r10, r22
     44c:	6c 01       	movw	r12, r24
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	e8 2e       	mov	r14, r24
     452:	f1 2c       	mov	r15, r1
     454:	01 2d       	mov	r16, r1
     456:	11 2d       	mov	r17, r1
	divider = 1; 
	while((divider*10) < data){
     458:	c8 01       	movw	r24, r16
     45a:	b7 01       	movw	r22, r14
     45c:	2a e0       	ldi	r18, 0x0A	; 10
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	84 d7       	rcall	.+3848   	; 0x136e <__mulsi3>
     466:	6a 15       	cp	r22, r10
     468:	7b 05       	cpc	r23, r11
     46a:	8c 05       	cpc	r24, r12
     46c:	9d 05       	cpc	r25, r13
     46e:	f4 f4       	brge	.+60     	; 0x4ac <uart_send_long+0x72>
     470:	7b 01       	movw	r14, r22
     472:	8c 01       	movw	r16, r24
     474:	f1 cf       	rjmp	.-30     	; 0x458 <uart_send_long+0x1e>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     476:	5d 9b       	sbis	0x0b, 5	; 11
     478:	fe cf       	rjmp	.-4      	; 0x476 <uart_send_long+0x3c>
	divider = 1; 
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
     47a:	c6 01       	movw	r24, r12
     47c:	b5 01       	movw	r22, r10
     47e:	a8 01       	movw	r20, r16
     480:	97 01       	movw	r18, r14
     482:	a7 d7       	rcall	.+3918   	; 0x13d2 <__divmodsi4>
     484:	ca 01       	movw	r24, r20
     486:	b9 01       	movw	r22, r18
     488:	2a e0       	ldi	r18, 0x0A	; 10
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	a0 d7       	rcall	.+3904   	; 0x13d2 <__divmodsi4>
     492:	60 5d       	subi	r22, 0xD0	; 208
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     494:	6c b9       	out	0x0c, r22	; 12
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;	
     496:	c8 01       	movw	r24, r16
     498:	b7 01       	movw	r22, r14
     49a:	2a e0       	ldi	r18, 0x0A	; 10
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	97 d7       	rcall	.+3886   	; 0x13d2 <__divmodsi4>
     4a4:	c9 01       	movw	r24, r18
     4a6:	da 01       	movw	r26, r20
     4a8:	7c 01       	movw	r14, r24
     4aa:	8d 01       	movw	r16, r26
void uart_send_long(long data) {
	divider = 1; 
	while((divider*10) < data){
		divider *= 10;
	}
	while(divider > 0){
     4ac:	1e 14       	cp	r1, r14
     4ae:	1f 04       	cpc	r1, r15
     4b0:	10 06       	cpc	r1, r16
     4b2:	11 06       	cpc	r1, r17
     4b4:	04 f3       	brlt	.-64     	; 0x476 <uart_send_long+0x3c>
     4b6:	e0 92 a3 01 	sts	0x01A3, r14
     4ba:	f0 92 a4 01 	sts	0x01A4, r15
     4be:	00 93 a5 01 	sts	0x01A5, r16
     4c2:	10 93 a6 01 	sts	0x01A6, r17
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     4c6:	5d 9b       	sbis	0x0b, 5	; 11
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <uart_send_long+0x8c>
   UDR = c;
     4ca:	80 e2       	ldi	r24, 0x20	; 32
     4cc:	8c b9       	out	0x0c, r24	; 12
	while(divider > 0){
		uart_send_byte(((data / divider) % 10) + '0');
		divider /= 10;	
	}
	uart_send_byte(' ');
}
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	08 95       	ret

000004e0 <uart_send_data>:

void uart_send_data(long* res_array, char range, long average) {
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ec 01       	movw	r28, r24
     4f4:	d6 2e       	mov	r13, r22
     4f6:	79 01       	movw	r14, r18
     4f8:	8a 01       	movw	r16, r20
	for(i=0; i<range; i++){
     4fa:	10 92 85 01 	sts	0x0185, r1
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     4fe:	3a e3       	ldi	r19, 0x3A	; 58
     500:	b3 2e       	mov	r11, r19
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	c2 2e       	mov	r12, r18
     506:	1c c0       	rjmp	.+56     	; 0x540 <uart_send_data+0x60>
     508:	5d 9b       	sbis	0x0b, 5	; 11
     50a:	fe cf       	rjmp	.-4      	; 0x508 <uart_send_data+0x28>
	uart_send_byte(' ');
}

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
     50c:	ef 5c       	subi	r30, 0xCF	; 207
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
   UDR = c;
     50e:	ec b9       	out	0x0c, r30	; 12
     510:	e1 53       	subi	r30, 0x31	; 49
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     512:	5d 9b       	sbis	0x0b, 5	; 11
     514:	fe cf       	rjmp	.-4      	; 0x512 <uart_send_data+0x32>
   UDR = c;
     516:	bc b8       	out	0x0c, r11	; 12

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
		uart_send_byte(i+1+'0');
		uart_send_byte(':');
		uart_send_long(res_array[(int) i]);
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	ec 0f       	add	r30, r28
     524:	fd 1f       	adc	r31, r29
     526:	60 81       	ld	r22, Z
     528:	71 81       	ldd	r23, Z+1	; 0x01
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	85 df       	rcall	.-246    	; 0x43a <uart_send_long>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     530:	5d 9b       	sbis	0x0b, 5	; 11
     532:	fe cf       	rjmp	.-4      	; 0x530 <uart_send_data+0x50>
   UDR = c;
     534:	cc b8       	out	0x0c, r12	; 12
	}
	uart_send_byte(' ');
}

void uart_send_data(long* res_array, char range, long average) {
	for(i=0; i<range; i++){
     536:	80 91 85 01 	lds	r24, 0x0185
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 85 01 	sts	0x0185, r24
     540:	e0 91 85 01 	lds	r30, 0x0185
     544:	ed 15       	cp	r30, r13
     546:	00 f3       	brcs	.-64     	; 0x508 <uart_send_data+0x28>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     548:	5d 9b       	sbis	0x0b, 5	; 11
     54a:	fe cf       	rjmp	.-4      	; 0x548 <uart_send_data+0x68>
   UDR = c;
     54c:	81 e4       	ldi	r24, 0x41	; 65
     54e:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     550:	5d 9b       	sbis	0x0b, 5	; 11
     552:	fe cf       	rjmp	.-4      	; 0x550 <uart_send_data+0x70>
   UDR = c;
     554:	86 e5       	ldi	r24, 0x56	; 86
     556:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     558:	5d 9b       	sbis	0x0b, 5	; 11
     55a:	fe cf       	rjmp	.-4      	; 0x558 <uart_send_data+0x78>
   UDR = c;
     55c:	87 e4       	ldi	r24, 0x47	; 71
     55e:	8c b9       	out	0x0c, r24	; 12
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     560:	5d 9b       	sbis	0x0b, 5	; 11
     562:	fe cf       	rjmp	.-4      	; 0x560 <uart_send_data+0x80>
   UDR = c;
     564:	8a e3       	ldi	r24, 0x3A	; 58
     566:	8c b9       	out	0x0c, r24	; 12
	}
	uart_send_byte('A');
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_long(average);
     568:	c8 01       	movw	r24, r16
     56a:	b7 01       	movw	r22, r14
     56c:	66 df       	rcall	.-308    	; 0x43a <uart_send_long>
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data 
    UCSRB = (1 << RXEN) | (1 << TXEN);   // Enable RX and TX 
}

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); // Wait until data register empty. */
     56e:	5d 9b       	sbis	0x0b, 5	; 11
     570:	fe cf       	rjmp	.-4      	; 0x56e <uart_send_data+0x8e>
   UDR = c;
     572:	8a e0       	ldi	r24, 0x0A	; 10
     574:	8c b9       	out	0x0c, r24	; 12
	uart_send_byte('V');
	uart_send_byte('G');
	uart_send_byte(':');
	uart_send_long(average);
	uart_send_byte('\n');
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	df 90       	pop	r13
     584:	cf 90       	pop	r12
     586:	bf 90       	pop	r11
     588:	08 95       	ret

0000058a <display_set_bytes>:
char d1, d2, d3, d4;
char display_pos = 0;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c[0] = ~0x1F | (0x0F & t1);
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	80 6e       	ori	r24, 0xE0	; 224
     58e:	80 93 a8 01 	sts	0x01A8, r24
	c[1] = ~0x2F | (0x0F & t2);
     592:	6f 70       	andi	r22, 0x0F	; 15
     594:	60 6d       	ori	r22, 0xD0	; 208
     596:	60 93 a9 01 	sts	0x01A9, r22
	c[2] = ~0x4F | (0x0F & t3);
     59a:	4f 70       	andi	r20, 0x0F	; 15
     59c:	40 6b       	ori	r20, 0xB0	; 176
     59e:	40 93 aa 01 	sts	0x01AA, r20
	c[3] = ~0x8F | (0x0F & t4);
     5a2:	2f 70       	andi	r18, 0x0F	; 15
     5a4:	20 67       	ori	r18, 0x70	; 112
     5a6:	20 93 ab 01 	sts	0x01AB, r18
}
     5aa:	08 95       	ret

000005ac <display_set_long>:

void display_set_long(long target){
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	5b 01       	movw	r10, r22
     5bc:	6c 01       	movw	r12, r24
	if(target < 10000){
     5be:	80 e1       	ldi	r24, 0x10	; 16
     5c0:	a8 16       	cp	r10, r24
     5c2:	87 e2       	ldi	r24, 0x27	; 39
     5c4:	b8 06       	cpc	r11, r24
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	c8 06       	cpc	r12, r24
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	d8 06       	cpc	r13, r24
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <display_set_long+0x26>
     5d0:	41 c0       	rjmp	.+130    	; 0x654 <display_set_long+0xa8>
		d4 = target % 10;
     5d2:	c6 01       	movw	r24, r12
     5d4:	b5 01       	movw	r22, r10
     5d6:	2a e0       	ldi	r18, 0x0A	; 10
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	f9 d6       	rcall	.+3570   	; 0x13d2 <__divmodsi4>
     5e0:	f6 2e       	mov	r15, r22
     5e2:	60 93 ad 01 	sts	0x01AD, r22
		d3 = (target / 10) % 10;
     5e6:	c6 01       	movw	r24, r12
     5e8:	b5 01       	movw	r22, r10
     5ea:	2a e0       	ldi	r18, 0x0A	; 10
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	ef d6       	rcall	.+3550   	; 0x13d2 <__divmodsi4>
     5f4:	ca 01       	movw	r24, r20
     5f6:	b9 01       	movw	r22, r18
     5f8:	2a e0       	ldi	r18, 0x0A	; 10
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	e8 d6       	rcall	.+3536   	; 0x13d2 <__divmodsi4>
     602:	06 2f       	mov	r16, r22
     604:	60 93 ae 01 	sts	0x01AE, r22
		d2 = (target / 100) % 10;
     608:	c6 01       	movw	r24, r12
     60a:	b5 01       	movw	r22, r10
     60c:	24 e6       	ldi	r18, 0x64	; 100
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	de d6       	rcall	.+3516   	; 0x13d2 <__divmodsi4>
     616:	ca 01       	movw	r24, r20
     618:	b9 01       	movw	r22, r18
     61a:	2a e0       	ldi	r18, 0x0A	; 10
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	d7 d6       	rcall	.+3502   	; 0x13d2 <__divmodsi4>
     624:	16 2f       	mov	r17, r22
     626:	60 93 ac 01 	sts	0x01AC, r22
		d1 = (target / 1000) % 10;
     62a:	c6 01       	movw	r24, r12
     62c:	b5 01       	movw	r22, r10
     62e:	28 ee       	ldi	r18, 0xE8	; 232
     630:	33 e0       	ldi	r19, 0x03	; 3
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	cd d6       	rcall	.+3482   	; 0x13d2 <__divmodsi4>
     638:	ca 01       	movw	r24, r20
     63a:	b9 01       	movw	r22, r18
     63c:	2a e0       	ldi	r18, 0x0A	; 10
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	c6 d6       	rcall	.+3468   	; 0x13d2 <__divmodsi4>
     646:	86 2f       	mov	r24, r22
     648:	60 93 a7 01 	sts	0x01A7, r22
		display_set_bytes(d1, d2, d3, d4);
     64c:	61 2f       	mov	r22, r17
     64e:	40 2f       	mov	r20, r16
     650:	2f 2d       	mov	r18, r15
     652:	04 c0       	rjmp	.+8      	; 0x65c <display_set_long+0xb0>
	} else {
		display_set_bytes(0x0E, 0x0E, 0x0E, 0x0E);
     654:	8e e0       	ldi	r24, 0x0E	; 14
     656:	6e e0       	ldi	r22, 0x0E	; 14
     658:	4e e0       	ldi	r20, 0x0E	; 14
     65a:	2e e0       	ldi	r18, 0x0E	; 14
     65c:	96 df       	rcall	.-212    	; 0x58a <display_set_bytes>
	}
}
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	08 95       	ret

0000066e <display_off>:

void display_off(){
	PORTB |= 0xFF;
     66e:	88 b3       	in	r24, 0x18	; 24
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	88 bb       	out	0x18, r24	; 24
}
     674:	08 95       	ret

00000676 <display_flash_once>:

void display_flash_once(){
	display_pos++;
     676:	80 91 87 01 	lds	r24, 0x0187
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	80 93 87 01 	sts	0x0187, r24
	if(display_pos > 3){
     680:	84 30       	cpi	r24, 0x04	; 4
     682:	18 f0       	brcs	.+6      	; 0x68a <display_flash_once+0x14>
		display_pos = display_pos % 4;
     684:	83 70       	andi	r24, 0x03	; 3
     686:	80 93 87 01 	sts	0x0187, r24
	}
	PORTB = c[(int) display_pos];
     68a:	e0 91 87 01 	lds	r30, 0x0187
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	e8 55       	subi	r30, 0x58	; 88
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	80 81       	ld	r24, Z
     696:	88 bb       	out	0x18, r24	; 24
}
     698:	08 95       	ret

0000069a <leds_update>:
	line = rand() % 8;
	return line;
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
     69a:	90 91 88 01 	lds	r25, 0x0188
     69e:	90 68       	ori	r25, 0x80	; 128
     6a0:	80 91 89 01 	lds	r24, 0x0189
     6a4:	88 0f       	add	r24, r24
     6a6:	88 0f       	add	r24, r24
     6a8:	88 0f       	add	r24, r24
     6aa:	89 2b       	or	r24, r25
     6ac:	85 bb       	out	0x15, r24	; 21
}
     6ae:	08 95       	ret

000006b0 <leds_move_column>:

void leds_move_column(){
	if(direction == 1){
     6b0:	80 91 6a 00 	lds	r24, 0x006A
     6b4:	90 91 89 01 	lds	r25, 0x0189
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	39 f4       	brne	.+14     	; 0x6ca <leds_move_column+0x1a>
		if(column < 3){
     6bc:	93 30       	cpi	r25, 0x03	; 3
     6be:	10 f4       	brcc	.+4      	; 0x6c4 <leds_move_column+0x14>
			column++;
     6c0:	9f 5f       	subi	r25, 0xFF	; 255
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <leds_move_column+0x20>
		} else {
			direction = 0;
     6c4:	10 92 6a 00 	sts	0x006A, r1
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
     6ca:	99 23       	and	r25, r25
     6cc:	21 f0       	breq	.+8      	; 0x6d6 <leds_move_column+0x26>
			column--;
     6ce:	91 50       	subi	r25, 0x01	; 1
     6d0:	90 93 89 01 	sts	0x0189, r25
     6d4:	08 95       	ret
		} else {
			direction = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 6a 00 	sts	0x006A, r24
			column++;
     6dc:	80 93 89 01 	sts	0x0189, r24
     6e0:	08 95       	ret

000006e2 <leds_off>:
		}
	}
}

void leds_off(){
	PORTC &= 0x7F;
     6e2:	af 98       	cbi	0x15, 7	; 21
}
     6e4:	08 95       	ret

000006e6 <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 8;
     6e6:	47 d7       	rcall	.+3726   	; 0x1576 <rand>
     6e8:	68 e0       	ldi	r22, 0x08	; 8
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	5f d6       	rcall	.+3262   	; 0x13ac <__divmodhi4>
     6ee:	80 93 88 01 	sts	0x0188, r24
	return line;
}
     6f2:	08 95       	ret

000006f4 <buzzer_beep>:
#include <avr/io.h>
#include <util/delay.h>

void buzzer_beep(int time_amount_ms){
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
	PORTD |= 0x80;
     704:	97 9a       	sbi	0x12, 7	; 18
	_delay_ms(time_amount_ms);
     706:	aa 27       	eor	r26, r26
     708:	97 fd       	sbrc	r25, 7
     70a:	a0 95       	com	r26
     70c:	ba 2f       	mov	r27, r26
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	8d d3       	rcall	.+1818   	; 0xe2e <__floatsisf>
     714:	5b 01       	movw	r10, r22
     716:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	4a e7       	ldi	r20, 0x7A	; 122
     71e:	54 e4       	ldi	r21, 0x44	; 68
     720:	10 d2       	rcall	.+1056   	; 0xb42 <__mulsf3>
     722:	7b 01       	movw	r14, r22
     724:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e8       	ldi	r20, 0x80	; 128
     72c:	5f e3       	ldi	r21, 0x3F	; 63
     72e:	54 d3       	rcall	.+1704   	; 0xdd8 <__ltsf2>
     730:	88 23       	and	r24, r24
     732:	1c f4       	brge	.+6      	; 0x73a <buzzer_beep+0x46>
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	20 c0       	rjmp	.+64     	; 0x77a <buzzer_beep+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     73a:	c8 01       	movw	r24, r16
     73c:	b7 01       	movw	r22, r14
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	3f ef       	ldi	r19, 0xFF	; 255
     742:	4f e7       	ldi	r20, 0x7F	; 127
     744:	57 e4       	ldi	r21, 0x47	; 71
     746:	f2 d2       	rcall	.+1508   	; 0xd2c <__gtsf2>
     748:	18 16       	cp	r1, r24
     74a:	a4 f4       	brge	.+40     	; 0x774 <buzzer_beep+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     74c:	c6 01       	movw	r24, r12
     74e:	b5 01       	movw	r22, r10
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e2       	ldi	r20, 0x20	; 32
     756:	51 e4       	ldi	r21, 0x41	; 65
     758:	f4 d1       	rcall	.+1000   	; 0xb42 <__mulsf3>
     75a:	2f d0       	rcall	.+94     	; 0x7ba <__fixunssfsi>
     75c:	84 e6       	ldi	r24, 0x64	; 100
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	05 c0       	rjmp	.+10     	; 0x76c <buzzer_beep+0x78>
     762:	fc 01       	movw	r30, r24
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <buzzer_beep+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	c1 f7       	brne	.-16     	; 0x762 <buzzer_beep+0x6e>
     772:	06 c0       	rjmp	.+12     	; 0x780 <buzzer_beep+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	20 d0       	rcall	.+64     	; 0x7ba <__fixunssfsi>
     77a:	cb 01       	movw	r24, r22
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <buzzer_beep+0x88>
	PORTD &= 0x7F;
     780:	97 98       	cbi	0x12, 7	; 18
}
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	08 95       	ret

00000794 <timer0_init>:
#include <avr/io.h>

void timer0_init(){
	//TCCR0 = (1<<CS01) | (1 << CS00); // K = 64
	TCCR0 = (1<<CS01); // K = 8
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // allow interrupt
     798:	89 b7       	in	r24, 0x39	; 57
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	89 bf       	out	0x39, r24	; 57
}
     79e:	08 95       	ret

000007a0 <timer1_init>:

void timer1_init(){
	TCNT1=0x00; // ticks
     7a0:	1d bc       	out	0x2d, r1	; 45
     7a2:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS10); // K = 1
     7a4:	8e b5       	in	r24, 0x2e	; 46
     7a6:	81 60       	ori	r24, 0x01	; 1
     7a8:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (unsigned int) (F_CPU / 1000); // compare num
     7aa:	80 ea       	ldi	r24, 0xA0	; 160
     7ac:	9f e0       	ldi	r25, 0x0F	; 15
     7ae:	9b bd       	out	0x2b, r25	; 43
     7b0:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A); // launch timer	
     7b2:	89 b7       	in	r24, 0x39	; 57
     7b4:	80 61       	ori	r24, 0x10	; 16
     7b6:	89 bf       	out	0x39, r24	; 57
}
     7b8:	08 95       	ret

000007ba <__fixunssfsi>:
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	7b 01       	movw	r14, r22
     7c4:	8c 01       	movw	r16, r24
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	5f e4       	ldi	r21, 0x4F	; 79
     7ce:	d9 d2       	rcall	.+1458   	; 0xd82 <__gesf2>
     7d0:	88 23       	and	r24, r24
     7d2:	7c f0       	brlt	.+30     	; 0x7f2 <__fixunssfsi+0x38>
     7d4:	c8 01       	movw	r24, r16
     7d6:	b7 01       	movw	r22, r14
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	5f e4       	ldi	r21, 0x4F	; 79
     7e0:	5e d1       	rcall	.+700    	; 0xa9e <__subsf3>
     7e2:	7f d3       	rcall	.+1790   	; 0xee2 <__fixsfsi>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	20 50       	subi	r18, 0x00	; 0
     7ea:	30 40       	sbci	r19, 0x00	; 0
     7ec:	40 40       	sbci	r20, 0x00	; 0
     7ee:	50 48       	sbci	r21, 0x80	; 128
     7f0:	05 c0       	rjmp	.+10     	; 0x7fc <__fixunssfsi+0x42>
     7f2:	c8 01       	movw	r24, r16
     7f4:	b7 01       	movw	r22, r14
     7f6:	75 d3       	rcall	.+1770   	; 0xee2 <__fixsfsi>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	b9 01       	movw	r22, r18
     7fe:	ca 01       	movw	r24, r20
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	08 95       	ret

0000080a <_fpadd_parts>:
     80a:	a0 e0       	ldi	r26, 0x00	; 0
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	ea e0       	ldi	r30, 0x0A	; 10
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	30 c6       	rjmp	.+3168   	; 0x1474 <__prologue_saves__>
     814:	dc 01       	movw	r26, r24
     816:	2b 01       	movw	r4, r22
     818:	fa 01       	movw	r30, r20
     81a:	9c 91       	ld	r25, X
     81c:	92 30       	cpi	r25, 0x02	; 2
     81e:	08 f4       	brcc	.+2      	; 0x822 <_fpadd_parts+0x18>
     820:	39 c1       	rjmp	.+626    	; 0xa94 <_fpadd_parts+0x28a>
     822:	eb 01       	movw	r28, r22
     824:	88 81       	ld	r24, Y
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	08 f4       	brcc	.+2      	; 0x82c <_fpadd_parts+0x22>
     82a:	33 c1       	rjmp	.+614    	; 0xa92 <_fpadd_parts+0x288>
     82c:	94 30       	cpi	r25, 0x04	; 4
     82e:	69 f4       	brne	.+26     	; 0x84a <_fpadd_parts+0x40>
     830:	84 30       	cpi	r24, 0x04	; 4
     832:	09 f0       	breq	.+2      	; 0x836 <_fpadd_parts+0x2c>
     834:	2f c1       	rjmp	.+606    	; 0xa94 <_fpadd_parts+0x28a>
     836:	11 96       	adiw	r26, 0x01	; 1
     838:	9c 91       	ld	r25, X
     83a:	11 97       	sbiw	r26, 0x01	; 1
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	98 17       	cp	r25, r24
     840:	09 f4       	brne	.+2      	; 0x844 <_fpadd_parts+0x3a>
     842:	28 c1       	rjmp	.+592    	; 0xa94 <_fpadd_parts+0x28a>
     844:	ab e6       	ldi	r26, 0x6B	; 107
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	25 c1       	rjmp	.+586    	; 0xa94 <_fpadd_parts+0x28a>
     84a:	84 30       	cpi	r24, 0x04	; 4
     84c:	09 f4       	brne	.+2      	; 0x850 <_fpadd_parts+0x46>
     84e:	21 c1       	rjmp	.+578    	; 0xa92 <_fpadd_parts+0x288>
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	a9 f4       	brne	.+42     	; 0x87e <_fpadd_parts+0x74>
     854:	92 30       	cpi	r25, 0x02	; 2
     856:	09 f0       	breq	.+2      	; 0x85a <_fpadd_parts+0x50>
     858:	1d c1       	rjmp	.+570    	; 0xa94 <_fpadd_parts+0x28a>
     85a:	9a 01       	movw	r18, r20
     85c:	ad 01       	movw	r20, r26
     85e:	88 e0       	ldi	r24, 0x08	; 8
     860:	ea 01       	movw	r28, r20
     862:	09 90       	ld	r0, Y+
     864:	ae 01       	movw	r20, r28
     866:	e9 01       	movw	r28, r18
     868:	09 92       	st	Y+, r0
     86a:	9e 01       	movw	r18, r28
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	c1 f7       	brne	.-16     	; 0x860 <_fpadd_parts+0x56>
     870:	e2 01       	movw	r28, r4
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	11 96       	adiw	r26, 0x01	; 1
     876:	9c 91       	ld	r25, X
     878:	89 23       	and	r24, r25
     87a:	81 83       	std	Z+1, r24	; 0x01
     87c:	08 c1       	rjmp	.+528    	; 0xa8e <_fpadd_parts+0x284>
     87e:	92 30       	cpi	r25, 0x02	; 2
     880:	09 f4       	brne	.+2      	; 0x884 <_fpadd_parts+0x7a>
     882:	07 c1       	rjmp	.+526    	; 0xa92 <_fpadd_parts+0x288>
     884:	12 96       	adiw	r26, 0x02	; 2
     886:	2d 90       	ld	r2, X+
     888:	3c 90       	ld	r3, X
     88a:	13 97       	sbiw	r26, 0x03	; 3
     88c:	eb 01       	movw	r28, r22
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	9b 81       	ldd	r25, Y+3	; 0x03
     892:	14 96       	adiw	r26, 0x04	; 4
     894:	ad 90       	ld	r10, X+
     896:	bd 90       	ld	r11, X+
     898:	cd 90       	ld	r12, X+
     89a:	dc 90       	ld	r13, X
     89c:	17 97       	sbiw	r26, 0x07	; 7
     89e:	ec 80       	ldd	r14, Y+4	; 0x04
     8a0:	fd 80       	ldd	r15, Y+5	; 0x05
     8a2:	0e 81       	ldd	r16, Y+6	; 0x06
     8a4:	1f 81       	ldd	r17, Y+7	; 0x07
     8a6:	91 01       	movw	r18, r2
     8a8:	28 1b       	sub	r18, r24
     8aa:	39 0b       	sbc	r19, r25
     8ac:	b9 01       	movw	r22, r18
     8ae:	37 ff       	sbrs	r19, 7
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <_fpadd_parts+0xb0>
     8b2:	66 27       	eor	r22, r22
     8b4:	77 27       	eor	r23, r23
     8b6:	62 1b       	sub	r22, r18
     8b8:	73 0b       	sbc	r23, r19
     8ba:	60 32       	cpi	r22, 0x20	; 32
     8bc:	71 05       	cpc	r23, r1
     8be:	0c f0       	brlt	.+2      	; 0x8c2 <_fpadd_parts+0xb8>
     8c0:	61 c0       	rjmp	.+194    	; 0x984 <_fpadd_parts+0x17a>
     8c2:	12 16       	cp	r1, r18
     8c4:	13 06       	cpc	r1, r19
     8c6:	6c f5       	brge	.+90     	; 0x922 <_fpadd_parts+0x118>
     8c8:	37 01       	movw	r6, r14
     8ca:	48 01       	movw	r8, r16
     8cc:	06 2e       	mov	r0, r22
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <_fpadd_parts+0xce>
     8d0:	96 94       	lsr	r9
     8d2:	87 94       	ror	r8
     8d4:	77 94       	ror	r7
     8d6:	67 94       	ror	r6
     8d8:	0a 94       	dec	r0
     8da:	d2 f7       	brpl	.-12     	; 0x8d0 <_fpadd_parts+0xc6>
     8dc:	21 e0       	ldi	r18, 0x01	; 1
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <_fpadd_parts+0xe4>
     8e6:	22 0f       	add	r18, r18
     8e8:	33 1f       	adc	r19, r19
     8ea:	44 1f       	adc	r20, r20
     8ec:	55 1f       	adc	r21, r21
     8ee:	6a 95       	dec	r22
     8f0:	d2 f7       	brpl	.-12     	; 0x8e6 <_fpadd_parts+0xdc>
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	30 40       	sbci	r19, 0x00	; 0
     8f6:	40 40       	sbci	r20, 0x00	; 0
     8f8:	50 40       	sbci	r21, 0x00	; 0
     8fa:	2e 21       	and	r18, r14
     8fc:	3f 21       	and	r19, r15
     8fe:	40 23       	and	r20, r16
     900:	51 23       	and	r21, r17
     902:	21 15       	cp	r18, r1
     904:	31 05       	cpc	r19, r1
     906:	41 05       	cpc	r20, r1
     908:	51 05       	cpc	r21, r1
     90a:	21 f0       	breq	.+8      	; 0x914 <_fpadd_parts+0x10a>
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	79 01       	movw	r14, r18
     916:	8a 01       	movw	r16, r20
     918:	e6 28       	or	r14, r6
     91a:	f7 28       	or	r15, r7
     91c:	08 29       	or	r16, r8
     91e:	19 29       	or	r17, r9
     920:	3c c0       	rjmp	.+120    	; 0x99a <_fpadd_parts+0x190>
     922:	23 2b       	or	r18, r19
     924:	d1 f1       	breq	.+116    	; 0x99a <_fpadd_parts+0x190>
     926:	26 0e       	add	r2, r22
     928:	37 1e       	adc	r3, r23
     92a:	35 01       	movw	r6, r10
     92c:	46 01       	movw	r8, r12
     92e:	06 2e       	mov	r0, r22
     930:	04 c0       	rjmp	.+8      	; 0x93a <_fpadd_parts+0x130>
     932:	96 94       	lsr	r9
     934:	87 94       	ror	r8
     936:	77 94       	ror	r7
     938:	67 94       	ror	r6
     93a:	0a 94       	dec	r0
     93c:	d2 f7       	brpl	.-12     	; 0x932 <_fpadd_parts+0x128>
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <_fpadd_parts+0x146>
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	44 1f       	adc	r20, r20
     94e:	55 1f       	adc	r21, r21
     950:	6a 95       	dec	r22
     952:	d2 f7       	brpl	.-12     	; 0x948 <_fpadd_parts+0x13e>
     954:	21 50       	subi	r18, 0x01	; 1
     956:	30 40       	sbci	r19, 0x00	; 0
     958:	40 40       	sbci	r20, 0x00	; 0
     95a:	50 40       	sbci	r21, 0x00	; 0
     95c:	2a 21       	and	r18, r10
     95e:	3b 21       	and	r19, r11
     960:	4c 21       	and	r20, r12
     962:	5d 21       	and	r21, r13
     964:	21 15       	cp	r18, r1
     966:	31 05       	cpc	r19, r1
     968:	41 05       	cpc	r20, r1
     96a:	51 05       	cpc	r21, r1
     96c:	21 f0       	breq	.+8      	; 0x976 <_fpadd_parts+0x16c>
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	59 01       	movw	r10, r18
     978:	6a 01       	movw	r12, r20
     97a:	a6 28       	or	r10, r6
     97c:	b7 28       	or	r11, r7
     97e:	c8 28       	or	r12, r8
     980:	d9 28       	or	r13, r9
     982:	0b c0       	rjmp	.+22     	; 0x99a <_fpadd_parts+0x190>
     984:	82 15       	cp	r24, r2
     986:	93 05       	cpc	r25, r3
     988:	2c f0       	brlt	.+10     	; 0x994 <_fpadd_parts+0x18a>
     98a:	1c 01       	movw	r2, r24
     98c:	aa 24       	eor	r10, r10
     98e:	bb 24       	eor	r11, r11
     990:	65 01       	movw	r12, r10
     992:	03 c0       	rjmp	.+6      	; 0x99a <_fpadd_parts+0x190>
     994:	ee 24       	eor	r14, r14
     996:	ff 24       	eor	r15, r15
     998:	87 01       	movw	r16, r14
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	9c 91       	ld	r25, X
     99e:	d2 01       	movw	r26, r4
     9a0:	11 96       	adiw	r26, 0x01	; 1
     9a2:	8c 91       	ld	r24, X
     9a4:	98 17       	cp	r25, r24
     9a6:	09 f4       	brne	.+2      	; 0x9aa <_fpadd_parts+0x1a0>
     9a8:	45 c0       	rjmp	.+138    	; 0xa34 <_fpadd_parts+0x22a>
     9aa:	99 23       	and	r25, r25
     9ac:	39 f0       	breq	.+14     	; 0x9bc <_fpadd_parts+0x1b2>
     9ae:	a8 01       	movw	r20, r16
     9b0:	97 01       	movw	r18, r14
     9b2:	2a 19       	sub	r18, r10
     9b4:	3b 09       	sbc	r19, r11
     9b6:	4c 09       	sbc	r20, r12
     9b8:	5d 09       	sbc	r21, r13
     9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <_fpadd_parts+0x1be>
     9bc:	a6 01       	movw	r20, r12
     9be:	95 01       	movw	r18, r10
     9c0:	2e 19       	sub	r18, r14
     9c2:	3f 09       	sbc	r19, r15
     9c4:	40 0b       	sbc	r20, r16
     9c6:	51 0b       	sbc	r21, r17
     9c8:	57 fd       	sbrc	r21, 7
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <_fpadd_parts+0x1d2>
     9cc:	11 82       	std	Z+1, r1	; 0x01
     9ce:	33 82       	std	Z+3, r3	; 0x03
     9d0:	22 82       	std	Z+2, r2	; 0x02
     9d2:	24 83       	std	Z+4, r18	; 0x04
     9d4:	35 83       	std	Z+5, r19	; 0x05
     9d6:	46 83       	std	Z+6, r20	; 0x06
     9d8:	57 83       	std	Z+7, r21	; 0x07
     9da:	1d c0       	rjmp	.+58     	; 0xa16 <_fpadd_parts+0x20c>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	81 83       	std	Z+1, r24	; 0x01
     9e0:	33 82       	std	Z+3, r3	; 0x03
     9e2:	22 82       	std	Z+2, r2	; 0x02
     9e4:	88 27       	eor	r24, r24
     9e6:	99 27       	eor	r25, r25
     9e8:	dc 01       	movw	r26, r24
     9ea:	82 1b       	sub	r24, r18
     9ec:	93 0b       	sbc	r25, r19
     9ee:	a4 0b       	sbc	r26, r20
     9f0:	b5 0b       	sbc	r27, r21
     9f2:	84 83       	std	Z+4, r24	; 0x04
     9f4:	95 83       	std	Z+5, r25	; 0x05
     9f6:	a6 83       	std	Z+6, r26	; 0x06
     9f8:	b7 83       	std	Z+7, r27	; 0x07
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <_fpadd_parts+0x20c>
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	24 83       	std	Z+4, r18	; 0x04
     a06:	35 83       	std	Z+5, r19	; 0x05
     a08:	46 83       	std	Z+6, r20	; 0x06
     a0a:	57 83       	std	Z+7, r21	; 0x07
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	93 81       	ldd	r25, Z+3	; 0x03
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	93 83       	std	Z+3, r25	; 0x03
     a14:	82 83       	std	Z+2, r24	; 0x02
     a16:	24 81       	ldd	r18, Z+4	; 0x04
     a18:	35 81       	ldd	r19, Z+5	; 0x05
     a1a:	46 81       	ldd	r20, Z+6	; 0x06
     a1c:	57 81       	ldd	r21, Z+7	; 0x07
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	a1 09       	sbc	r26, r1
     a26:	b1 09       	sbc	r27, r1
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	af 4f       	sbci	r26, 0xFF	; 255
     a2e:	bf 43       	sbci	r27, 0x3F	; 63
     a30:	28 f3       	brcs	.-54     	; 0x9fc <_fpadd_parts+0x1f2>
     a32:	0b c0       	rjmp	.+22     	; 0xa4a <_fpadd_parts+0x240>
     a34:	91 83       	std	Z+1, r25	; 0x01
     a36:	33 82       	std	Z+3, r3	; 0x03
     a38:	22 82       	std	Z+2, r2	; 0x02
     a3a:	ea 0c       	add	r14, r10
     a3c:	fb 1c       	adc	r15, r11
     a3e:	0c 1d       	adc	r16, r12
     a40:	1d 1d       	adc	r17, r13
     a42:	e4 82       	std	Z+4, r14	; 0x04
     a44:	f5 82       	std	Z+5, r15	; 0x05
     a46:	06 83       	std	Z+6, r16	; 0x06
     a48:	17 83       	std	Z+7, r17	; 0x07
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	80 83       	st	Z, r24
     a4e:	24 81       	ldd	r18, Z+4	; 0x04
     a50:	35 81       	ldd	r19, Z+5	; 0x05
     a52:	46 81       	ldd	r20, Z+6	; 0x06
     a54:	57 81       	ldd	r21, Z+7	; 0x07
     a56:	57 ff       	sbrs	r21, 7
     a58:	1a c0       	rjmp	.+52     	; 0xa8e <_fpadd_parts+0x284>
     a5a:	c9 01       	movw	r24, r18
     a5c:	aa 27       	eor	r26, r26
     a5e:	97 fd       	sbrc	r25, 7
     a60:	a0 95       	com	r26
     a62:	ba 2f       	mov	r27, r26
     a64:	81 70       	andi	r24, 0x01	; 1
     a66:	90 70       	andi	r25, 0x00	; 0
     a68:	a0 70       	andi	r26, 0x00	; 0
     a6a:	b0 70       	andi	r27, 0x00	; 0
     a6c:	56 95       	lsr	r21
     a6e:	47 95       	ror	r20
     a70:	37 95       	ror	r19
     a72:	27 95       	ror	r18
     a74:	82 2b       	or	r24, r18
     a76:	93 2b       	or	r25, r19
     a78:	a4 2b       	or	r26, r20
     a7a:	b5 2b       	or	r27, r21
     a7c:	84 83       	std	Z+4, r24	; 0x04
     a7e:	95 83       	std	Z+5, r25	; 0x05
     a80:	a6 83       	std	Z+6, r26	; 0x06
     a82:	b7 83       	std	Z+7, r27	; 0x07
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	93 83       	std	Z+3, r25	; 0x03
     a8c:	82 83       	std	Z+2, r24	; 0x02
     a8e:	df 01       	movw	r26, r30
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <_fpadd_parts+0x28a>
     a92:	d2 01       	movw	r26, r4
     a94:	cd 01       	movw	r24, r26
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	e2 e1       	ldi	r30, 0x12	; 18
     a9c:	07 c5       	rjmp	.+2574   	; 0x14ac <__epilogue_restores__>

00000a9e <__subsf3>:
     a9e:	a0 e2       	ldi	r26, 0x20	; 32
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e4 e5       	ldi	r30, 0x54	; 84
     aa4:	f5 e0       	ldi	r31, 0x05	; 5
     aa6:	f2 c4       	rjmp	.+2532   	; 0x148c <__prologue_saves__+0x18>
     aa8:	69 83       	std	Y+1, r22	; 0x01
     aaa:	7a 83       	std	Y+2, r23	; 0x02
     aac:	8b 83       	std	Y+3, r24	; 0x03
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	2d 83       	std	Y+5, r18	; 0x05
     ab2:	3e 83       	std	Y+6, r19	; 0x06
     ab4:	4f 83       	std	Y+7, r20	; 0x07
     ab6:	58 87       	std	Y+8, r21	; 0x08
     ab8:	e9 e0       	ldi	r30, 0x09	; 9
     aba:	ee 2e       	mov	r14, r30
     abc:	f1 2c       	mov	r15, r1
     abe:	ec 0e       	add	r14, r28
     ac0:	fd 1e       	adc	r15, r29
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	b7 01       	movw	r22, r14
     ac8:	81 d3       	rcall	.+1794   	; 0x11cc <__unpack_f>
     aca:	8e 01       	movw	r16, r28
     acc:	0f 5e       	subi	r16, 0xEF	; 239
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	ce 01       	movw	r24, r28
     ad2:	05 96       	adiw	r24, 0x05	; 5
     ad4:	b8 01       	movw	r22, r16
     ad6:	7a d3       	rcall	.+1780   	; 0x11cc <__unpack_f>
     ad8:	8a 89       	ldd	r24, Y+18	; 0x12
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	89 27       	eor	r24, r25
     ade:	8a 8b       	std	Y+18, r24	; 0x12
     ae0:	c7 01       	movw	r24, r14
     ae2:	b8 01       	movw	r22, r16
     ae4:	ae 01       	movw	r20, r28
     ae6:	47 5e       	subi	r20, 0xE7	; 231
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	8f de       	rcall	.-738    	; 0x80a <_fpadd_parts>
     aec:	9a d2       	rcall	.+1332   	; 0x1022 <__pack_f>
     aee:	a0 96       	adiw	r28, 0x20	; 32
     af0:	e6 e0       	ldi	r30, 0x06	; 6
     af2:	e8 c4       	rjmp	.+2512   	; 0x14c4 <__epilogue_restores__+0x18>

00000af4 <__addsf3>:
     af4:	a0 e2       	ldi	r26, 0x20	; 32
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	ef e7       	ldi	r30, 0x7F	; 127
     afa:	f5 e0       	ldi	r31, 0x05	; 5
     afc:	c7 c4       	rjmp	.+2446   	; 0x148c <__prologue_saves__+0x18>
     afe:	69 83       	std	Y+1, r22	; 0x01
     b00:	7a 83       	std	Y+2, r23	; 0x02
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	2d 83       	std	Y+5, r18	; 0x05
     b08:	3e 83       	std	Y+6, r19	; 0x06
     b0a:	4f 83       	std	Y+7, r20	; 0x07
     b0c:	58 87       	std	Y+8, r21	; 0x08
     b0e:	f9 e0       	ldi	r31, 0x09	; 9
     b10:	ef 2e       	mov	r14, r31
     b12:	f1 2c       	mov	r15, r1
     b14:	ec 0e       	add	r14, r28
     b16:	fd 1e       	adc	r15, r29
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	b7 01       	movw	r22, r14
     b1e:	56 d3       	rcall	.+1708   	; 0x11cc <__unpack_f>
     b20:	8e 01       	movw	r16, r28
     b22:	0f 5e       	subi	r16, 0xEF	; 239
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	ce 01       	movw	r24, r28
     b28:	05 96       	adiw	r24, 0x05	; 5
     b2a:	b8 01       	movw	r22, r16
     b2c:	4f d3       	rcall	.+1694   	; 0x11cc <__unpack_f>
     b2e:	c7 01       	movw	r24, r14
     b30:	b8 01       	movw	r22, r16
     b32:	ae 01       	movw	r20, r28
     b34:	47 5e       	subi	r20, 0xE7	; 231
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	68 de       	rcall	.-816    	; 0x80a <_fpadd_parts>
     b3a:	73 d2       	rcall	.+1254   	; 0x1022 <__pack_f>
     b3c:	a0 96       	adiw	r28, 0x20	; 32
     b3e:	e6 e0       	ldi	r30, 0x06	; 6
     b40:	c1 c4       	rjmp	.+2434   	; 0x14c4 <__epilogue_restores__+0x18>

00000b42 <__mulsf3>:
     b42:	a0 e2       	ldi	r26, 0x20	; 32
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e6 ea       	ldi	r30, 0xA6	; 166
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	94 c4       	rjmp	.+2344   	; 0x1474 <__prologue_saves__>
     b4c:	69 83       	std	Y+1, r22	; 0x01
     b4e:	7a 83       	std	Y+2, r23	; 0x02
     b50:	8b 83       	std	Y+3, r24	; 0x03
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	2d 83       	std	Y+5, r18	; 0x05
     b56:	3e 83       	std	Y+6, r19	; 0x06
     b58:	4f 83       	std	Y+7, r20	; 0x07
     b5a:	58 87       	std	Y+8, r21	; 0x08
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	be 01       	movw	r22, r28
     b62:	67 5f       	subi	r22, 0xF7	; 247
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	32 d3       	rcall	.+1636   	; 0x11cc <__unpack_f>
     b68:	ce 01       	movw	r24, r28
     b6a:	05 96       	adiw	r24, 0x05	; 5
     b6c:	be 01       	movw	r22, r28
     b6e:	6f 5e       	subi	r22, 0xEF	; 239
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	2c d3       	rcall	.+1624   	; 0x11cc <__unpack_f>
     b74:	99 85       	ldd	r25, Y+9	; 0x09
     b76:	92 30       	cpi	r25, 0x02	; 2
     b78:	88 f0       	brcs	.+34     	; 0xb9c <__mulsf3+0x5a>
     b7a:	89 89       	ldd	r24, Y+17	; 0x11
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	c8 f0       	brcs	.+50     	; 0xbb2 <__mulsf3+0x70>
     b80:	94 30       	cpi	r25, 0x04	; 4
     b82:	19 f4       	brne	.+6      	; 0xb8a <__mulsf3+0x48>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	51 f4       	brne	.+20     	; 0xb9c <__mulsf3+0x5a>
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__mulsf3+0x50>
     b8a:	84 30       	cpi	r24, 0x04	; 4
     b8c:	29 f4       	brne	.+10     	; 0xb98 <__mulsf3+0x56>
     b8e:	92 30       	cpi	r25, 0x02	; 2
     b90:	81 f4       	brne	.+32     	; 0xbb2 <__mulsf3+0x70>
     b92:	8b e6       	ldi	r24, 0x6B	; 107
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	c6 c0       	rjmp	.+396    	; 0xd24 <__mulsf3+0x1e2>
     b98:	92 30       	cpi	r25, 0x02	; 2
     b9a:	49 f4       	brne	.+18     	; 0xbae <__mulsf3+0x6c>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba0:	8a 89       	ldd	r24, Y+18	; 0x12
     ba2:	98 13       	cpse	r25, r24
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	2a 87       	std	Y+10, r18	; 0x0a
     ba8:	ce 01       	movw	r24, r28
     baa:	09 96       	adiw	r24, 0x09	; 9
     bac:	bb c0       	rjmp	.+374    	; 0xd24 <__mulsf3+0x1e2>
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	49 f4       	brne	.+18     	; 0xbc4 <__mulsf3+0x82>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	8a 89       	ldd	r24, Y+18	; 0x12
     bb8:	98 13       	cpse	r25, r24
     bba:	21 e0       	ldi	r18, 0x01	; 1
     bbc:	2a 8b       	std	Y+18, r18	; 0x12
     bbe:	ce 01       	movw	r24, r28
     bc0:	41 96       	adiw	r24, 0x11	; 17
     bc2:	b0 c0       	rjmp	.+352    	; 0xd24 <__mulsf3+0x1e2>
     bc4:	2d 84       	ldd	r2, Y+13	; 0x0d
     bc6:	3e 84       	ldd	r3, Y+14	; 0x0e
     bc8:	4f 84       	ldd	r4, Y+15	; 0x0f
     bca:	58 88       	ldd	r5, Y+16	; 0x10
     bcc:	6d 88       	ldd	r6, Y+21	; 0x15
     bce:	7e 88       	ldd	r7, Y+22	; 0x16
     bd0:	8f 88       	ldd	r8, Y+23	; 0x17
     bd2:	98 8c       	ldd	r9, Y+24	; 0x18
     bd4:	ee 24       	eor	r14, r14
     bd6:	ff 24       	eor	r15, r15
     bd8:	87 01       	movw	r16, r14
     bda:	aa 24       	eor	r10, r10
     bdc:	bb 24       	eor	r11, r11
     bde:	65 01       	movw	r12, r10
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	c1 01       	movw	r24, r2
     bee:	81 70       	andi	r24, 0x01	; 1
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	89 2b       	or	r24, r25
     bf4:	e9 f0       	breq	.+58     	; 0xc30 <__mulsf3+0xee>
     bf6:	e6 0c       	add	r14, r6
     bf8:	f7 1c       	adc	r15, r7
     bfa:	08 1d       	adc	r16, r8
     bfc:	19 1d       	adc	r17, r9
     bfe:	9a 01       	movw	r18, r20
     c00:	ab 01       	movw	r20, r22
     c02:	2a 0d       	add	r18, r10
     c04:	3b 1d       	adc	r19, r11
     c06:	4c 1d       	adc	r20, r12
     c08:	5d 1d       	adc	r21, r13
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e6 14       	cp	r14, r6
     c14:	f7 04       	cpc	r15, r7
     c16:	08 05       	cpc	r16, r8
     c18:	19 05       	cpc	r17, r9
     c1a:	20 f4       	brcc	.+8      	; 0xc24 <__mulsf3+0xe2>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ba 01       	movw	r22, r20
     c26:	a9 01       	movw	r20, r18
     c28:	48 0f       	add	r20, r24
     c2a:	59 1f       	adc	r21, r25
     c2c:	6a 1f       	adc	r22, r26
     c2e:	7b 1f       	adc	r23, r27
     c30:	aa 0c       	add	r10, r10
     c32:	bb 1c       	adc	r11, r11
     c34:	cc 1c       	adc	r12, r12
     c36:	dd 1c       	adc	r13, r13
     c38:	97 fe       	sbrs	r9, 7
     c3a:	08 c0       	rjmp	.+16     	; 0xc4c <__mulsf3+0x10a>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	a0 e0       	ldi	r26, 0x00	; 0
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	a8 2a       	or	r10, r24
     c46:	b9 2a       	or	r11, r25
     c48:	ca 2a       	or	r12, r26
     c4a:	db 2a       	or	r13, r27
     c4c:	31 96       	adiw	r30, 0x01	; 1
     c4e:	e0 32       	cpi	r30, 0x20	; 32
     c50:	f1 05       	cpc	r31, r1
     c52:	49 f0       	breq	.+18     	; 0xc66 <__mulsf3+0x124>
     c54:	66 0c       	add	r6, r6
     c56:	77 1c       	adc	r7, r7
     c58:	88 1c       	adc	r8, r8
     c5a:	99 1c       	adc	r9, r9
     c5c:	56 94       	lsr	r5
     c5e:	47 94       	ror	r4
     c60:	37 94       	ror	r3
     c62:	27 94       	ror	r2
     c64:	c3 cf       	rjmp	.-122    	; 0xbec <__mulsf3+0xaa>
     c66:	fa 85       	ldd	r31, Y+10	; 0x0a
     c68:	ea 89       	ldd	r30, Y+18	; 0x12
     c6a:	2b 89       	ldd	r18, Y+19	; 0x13
     c6c:	3c 89       	ldd	r19, Y+20	; 0x14
     c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c70:	9c 85       	ldd	r25, Y+12	; 0x0c
     c72:	28 0f       	add	r18, r24
     c74:	39 1f       	adc	r19, r25
     c76:	2e 5f       	subi	r18, 0xFE	; 254
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	17 c0       	rjmp	.+46     	; 0xcaa <__mulsf3+0x168>
     c7c:	ca 01       	movw	r24, r20
     c7e:	81 70       	andi	r24, 0x01	; 1
     c80:	90 70       	andi	r25, 0x00	; 0
     c82:	89 2b       	or	r24, r25
     c84:	61 f0       	breq	.+24     	; 0xc9e <__mulsf3+0x15c>
     c86:	16 95       	lsr	r17
     c88:	07 95       	ror	r16
     c8a:	f7 94       	ror	r15
     c8c:	e7 94       	ror	r14
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	b0 e8       	ldi	r27, 0x80	; 128
     c96:	e8 2a       	or	r14, r24
     c98:	f9 2a       	or	r15, r25
     c9a:	0a 2b       	or	r16, r26
     c9c:	1b 2b       	or	r17, r27
     c9e:	76 95       	lsr	r23
     ca0:	67 95       	ror	r22
     ca2:	57 95       	ror	r21
     ca4:	47 95       	ror	r20
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	77 fd       	sbrc	r23, 7
     cac:	e7 cf       	rjmp	.-50     	; 0xc7c <__mulsf3+0x13a>
     cae:	0c c0       	rjmp	.+24     	; 0xcc8 <__mulsf3+0x186>
     cb0:	44 0f       	add	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	66 1f       	adc	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	17 fd       	sbrc	r17, 7
     cba:	41 60       	ori	r20, 0x01	; 1
     cbc:	ee 0c       	add	r14, r14
     cbe:	ff 1c       	adc	r15, r15
     cc0:	00 1f       	adc	r16, r16
     cc2:	11 1f       	adc	r17, r17
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	30 40       	sbci	r19, 0x00	; 0
     cc8:	40 30       	cpi	r20, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	59 07       	cpc	r21, r25
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	69 07       	cpc	r22, r25
     cd2:	90 e4       	ldi	r25, 0x40	; 64
     cd4:	79 07       	cpc	r23, r25
     cd6:	60 f3       	brcs	.-40     	; 0xcb0 <__mulsf3+0x16e>
     cd8:	2b 8f       	std	Y+27, r18	; 0x1b
     cda:	3c 8f       	std	Y+28, r19	; 0x1c
     cdc:	db 01       	movw	r26, r22
     cde:	ca 01       	movw	r24, r20
     ce0:	8f 77       	andi	r24, 0x7F	; 127
     ce2:	90 70       	andi	r25, 0x00	; 0
     ce4:	a0 70       	andi	r26, 0x00	; 0
     ce6:	b0 70       	andi	r27, 0x00	; 0
     ce8:	80 34       	cpi	r24, 0x40	; 64
     cea:	91 05       	cpc	r25, r1
     cec:	a1 05       	cpc	r26, r1
     cee:	b1 05       	cpc	r27, r1
     cf0:	61 f4       	brne	.+24     	; 0xd0a <__mulsf3+0x1c8>
     cf2:	47 fd       	sbrc	r20, 7
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <__mulsf3+0x1c8>
     cf6:	e1 14       	cp	r14, r1
     cf8:	f1 04       	cpc	r15, r1
     cfa:	01 05       	cpc	r16, r1
     cfc:	11 05       	cpc	r17, r1
     cfe:	29 f0       	breq	.+10     	; 0xd0a <__mulsf3+0x1c8>
     d00:	40 5c       	subi	r20, 0xC0	; 192
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	6f 4f       	sbci	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	40 78       	andi	r20, 0x80	; 128
     d0a:	1a 8e       	std	Y+26, r1	; 0x1a
     d0c:	fe 17       	cp	r31, r30
     d0e:	11 f0       	breq	.+4      	; 0xd14 <__mulsf3+0x1d2>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	8a 8f       	std	Y+26, r24	; 0x1a
     d14:	4d 8f       	std	Y+29, r20	; 0x1d
     d16:	5e 8f       	std	Y+30, r21	; 0x1e
     d18:	6f 8f       	std	Y+31, r22	; 0x1f
     d1a:	78 a3       	std	Y+32, r23	; 0x20
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	89 8f       	std	Y+25, r24	; 0x19
     d20:	ce 01       	movw	r24, r28
     d22:	49 96       	adiw	r24, 0x19	; 25
     d24:	7e d1       	rcall	.+764    	; 0x1022 <__pack_f>
     d26:	a0 96       	adiw	r28, 0x20	; 32
     d28:	e2 e1       	ldi	r30, 0x12	; 18
     d2a:	c0 c3       	rjmp	.+1920   	; 0x14ac <__epilogue_restores__>

00000d2c <__gtsf2>:
     d2c:	a8 e1       	ldi	r26, 0x18	; 24
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	eb e9       	ldi	r30, 0x9B	; 155
     d32:	f6 e0       	ldi	r31, 0x06	; 6
     d34:	ab c3       	rjmp	.+1878   	; 0x148c <__prologue_saves__+0x18>
     d36:	69 83       	std	Y+1, r22	; 0x01
     d38:	7a 83       	std	Y+2, r23	; 0x02
     d3a:	8b 83       	std	Y+3, r24	; 0x03
     d3c:	9c 83       	std	Y+4, r25	; 0x04
     d3e:	2d 83       	std	Y+5, r18	; 0x05
     d40:	3e 83       	std	Y+6, r19	; 0x06
     d42:	4f 83       	std	Y+7, r20	; 0x07
     d44:	58 87       	std	Y+8, r21	; 0x08
     d46:	89 e0       	ldi	r24, 0x09	; 9
     d48:	e8 2e       	mov	r14, r24
     d4a:	f1 2c       	mov	r15, r1
     d4c:	ec 0e       	add	r14, r28
     d4e:	fd 1e       	adc	r15, r29
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	b7 01       	movw	r22, r14
     d56:	3a d2       	rcall	.+1140   	; 0x11cc <__unpack_f>
     d58:	8e 01       	movw	r16, r28
     d5a:	0f 5e       	subi	r16, 0xEF	; 239
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	ce 01       	movw	r24, r28
     d60:	05 96       	adiw	r24, 0x05	; 5
     d62:	b8 01       	movw	r22, r16
     d64:	33 d2       	rcall	.+1126   	; 0x11cc <__unpack_f>
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	38 f0       	brcs	.+14     	; 0xd7a <__gtsf2+0x4e>
     d6c:	89 89       	ldd	r24, Y+17	; 0x11
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	20 f0       	brcs	.+8      	; 0xd7a <__gtsf2+0x4e>
     d72:	c7 01       	movw	r24, r14
     d74:	b8 01       	movw	r22, r16
     d76:	a2 d2       	rcall	.+1348   	; 0x12bc <__fpcmp_parts_f>
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <__gtsf2+0x50>
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	68 96       	adiw	r28, 0x18	; 24
     d7e:	e6 e0       	ldi	r30, 0x06	; 6
     d80:	a1 c3       	rjmp	.+1858   	; 0x14c4 <__epilogue_restores__+0x18>

00000d82 <__gesf2>:
     d82:	a8 e1       	ldi	r26, 0x18	; 24
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 ec       	ldi	r30, 0xC6	; 198
     d88:	f6 e0       	ldi	r31, 0x06	; 6
     d8a:	80 c3       	rjmp	.+1792   	; 0x148c <__prologue_saves__+0x18>
     d8c:	69 83       	std	Y+1, r22	; 0x01
     d8e:	7a 83       	std	Y+2, r23	; 0x02
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	2d 83       	std	Y+5, r18	; 0x05
     d96:	3e 83       	std	Y+6, r19	; 0x06
     d98:	4f 83       	std	Y+7, r20	; 0x07
     d9a:	58 87       	std	Y+8, r21	; 0x08
     d9c:	89 e0       	ldi	r24, 0x09	; 9
     d9e:	e8 2e       	mov	r14, r24
     da0:	f1 2c       	mov	r15, r1
     da2:	ec 0e       	add	r14, r28
     da4:	fd 1e       	adc	r15, r29
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	b7 01       	movw	r22, r14
     dac:	0f d2       	rcall	.+1054   	; 0x11cc <__unpack_f>
     dae:	8e 01       	movw	r16, r28
     db0:	0f 5e       	subi	r16, 0xEF	; 239
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	ce 01       	movw	r24, r28
     db6:	05 96       	adiw	r24, 0x05	; 5
     db8:	b8 01       	movw	r22, r16
     dba:	08 d2       	rcall	.+1040   	; 0x11cc <__unpack_f>
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	38 f0       	brcs	.+14     	; 0xdd0 <__gesf2+0x4e>
     dc2:	89 89       	ldd	r24, Y+17	; 0x11
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__gesf2+0x4e>
     dc8:	c7 01       	movw	r24, r14
     dca:	b8 01       	movw	r22, r16
     dcc:	77 d2       	rcall	.+1262   	; 0x12bc <__fpcmp_parts_f>
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <__gesf2+0x50>
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	68 96       	adiw	r28, 0x18	; 24
     dd4:	e6 e0       	ldi	r30, 0x06	; 6
     dd6:	76 c3       	rjmp	.+1772   	; 0x14c4 <__epilogue_restores__+0x18>

00000dd8 <__ltsf2>:
     dd8:	a8 e1       	ldi	r26, 0x18	; 24
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e1 ef       	ldi	r30, 0xF1	; 241
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	55 c3       	rjmp	.+1706   	; 0x148c <__prologue_saves__+0x18>
     de2:	69 83       	std	Y+1, r22	; 0x01
     de4:	7a 83       	std	Y+2, r23	; 0x02
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	2d 83       	std	Y+5, r18	; 0x05
     dec:	3e 83       	std	Y+6, r19	; 0x06
     dee:	4f 83       	std	Y+7, r20	; 0x07
     df0:	58 87       	std	Y+8, r21	; 0x08
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	e8 2e       	mov	r14, r24
     df6:	f1 2c       	mov	r15, r1
     df8:	ec 0e       	add	r14, r28
     dfa:	fd 1e       	adc	r15, r29
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	b7 01       	movw	r22, r14
     e02:	e4 d1       	rcall	.+968    	; 0x11cc <__unpack_f>
     e04:	8e 01       	movw	r16, r28
     e06:	0f 5e       	subi	r16, 0xEF	; 239
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	ce 01       	movw	r24, r28
     e0c:	05 96       	adiw	r24, 0x05	; 5
     e0e:	b8 01       	movw	r22, r16
     e10:	dd d1       	rcall	.+954    	; 0x11cc <__unpack_f>
     e12:	89 85       	ldd	r24, Y+9	; 0x09
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	38 f0       	brcs	.+14     	; 0xe26 <__ltsf2+0x4e>
     e18:	89 89       	ldd	r24, Y+17	; 0x11
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	20 f0       	brcs	.+8      	; 0xe26 <__ltsf2+0x4e>
     e1e:	c7 01       	movw	r24, r14
     e20:	b8 01       	movw	r22, r16
     e22:	4c d2       	rcall	.+1176   	; 0x12bc <__fpcmp_parts_f>
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <__ltsf2+0x50>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	68 96       	adiw	r28, 0x18	; 24
     e2a:	e6 e0       	ldi	r30, 0x06	; 6
     e2c:	4b c3       	rjmp	.+1686   	; 0x14c4 <__epilogue_restores__+0x18>

00000e2e <__floatsisf>:
     e2e:	a8 e0       	ldi	r26, 0x08	; 8
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ec e1       	ldi	r30, 0x1C	; 28
     e34:	f7 e0       	ldi	r31, 0x07	; 7
     e36:	27 c3       	rjmp	.+1614   	; 0x1486 <__prologue_saves__+0x12>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	da 01       	movw	r26, r20
     e42:	c9 01       	movw	r24, r18
     e44:	88 27       	eor	r24, r24
     e46:	b7 fd       	sbrc	r27, 7
     e48:	83 95       	inc	r24
     e4a:	99 27       	eor	r25, r25
     e4c:	aa 27       	eor	r26, r26
     e4e:	bb 27       	eor	r27, r27
     e50:	b8 2e       	mov	r11, r24
     e52:	21 15       	cp	r18, r1
     e54:	31 05       	cpc	r19, r1
     e56:	41 05       	cpc	r20, r1
     e58:	51 05       	cpc	r21, r1
     e5a:	19 f4       	brne	.+6      	; 0xe62 <__floatsisf+0x34>
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	39 c0       	rjmp	.+114    	; 0xed4 <__floatsisf+0xa6>
     e62:	88 23       	and	r24, r24
     e64:	a9 f0       	breq	.+42     	; 0xe90 <__floatsisf+0x62>
     e66:	20 30       	cpi	r18, 0x00	; 0
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	38 07       	cpc	r19, r24
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	48 07       	cpc	r20, r24
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	58 07       	cpc	r21, r24
     e74:	29 f4       	brne	.+10     	; 0xe80 <__floatsisf+0x52>
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	9f ec       	ldi	r25, 0xCF	; 207
     e7e:	2e c0       	rjmp	.+92     	; 0xedc <__floatsisf+0xae>
     e80:	ee 24       	eor	r14, r14
     e82:	ff 24       	eor	r15, r15
     e84:	87 01       	movw	r16, r14
     e86:	e2 1a       	sub	r14, r18
     e88:	f3 0a       	sbc	r15, r19
     e8a:	04 0b       	sbc	r16, r20
     e8c:	15 0b       	sbc	r17, r21
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <__floatsisf+0x66>
     e90:	79 01       	movw	r14, r18
     e92:	8a 01       	movw	r16, r20
     e94:	8e e1       	ldi	r24, 0x1E	; 30
     e96:	c8 2e       	mov	r12, r24
     e98:	d1 2c       	mov	r13, r1
     e9a:	dc 82       	std	Y+4, r13	; 0x04
     e9c:	cb 82       	std	Y+3, r12	; 0x03
     e9e:	ed 82       	std	Y+5, r14	; 0x05
     ea0:	fe 82       	std	Y+6, r15	; 0x06
     ea2:	0f 83       	std	Y+7, r16	; 0x07
     ea4:	18 87       	std	Y+8, r17	; 0x08
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	6c d0       	rcall	.+216    	; 0xf84 <__clzsi2>
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	18 16       	cp	r1, r24
     eb0:	19 06       	cpc	r1, r25
     eb2:	84 f4       	brge	.+32     	; 0xed4 <__floatsisf+0xa6>
     eb4:	08 2e       	mov	r0, r24
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <__floatsisf+0x92>
     eb8:	ee 0c       	add	r14, r14
     eba:	ff 1c       	adc	r15, r15
     ebc:	00 1f       	adc	r16, r16
     ebe:	11 1f       	adc	r17, r17
     ec0:	0a 94       	dec	r0
     ec2:	d2 f7       	brpl	.-12     	; 0xeb8 <__floatsisf+0x8a>
     ec4:	ed 82       	std	Y+5, r14	; 0x05
     ec6:	fe 82       	std	Y+6, r15	; 0x06
     ec8:	0f 83       	std	Y+7, r16	; 0x07
     eca:	18 87       	std	Y+8, r17	; 0x08
     ecc:	c8 1a       	sub	r12, r24
     ece:	d9 0a       	sbc	r13, r25
     ed0:	dc 82       	std	Y+4, r13	; 0x04
     ed2:	cb 82       	std	Y+3, r12	; 0x03
     ed4:	ba 82       	std	Y+2, r11	; 0x02
     ed6:	ce 01       	movw	r24, r28
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	a3 d0       	rcall	.+326    	; 0x1022 <__pack_f>
     edc:	28 96       	adiw	r28, 0x08	; 8
     ede:	e9 e0       	ldi	r30, 0x09	; 9
     ee0:	ee c2       	rjmp	.+1500   	; 0x14be <__epilogue_restores__+0x12>

00000ee2 <__fixsfsi>:
     ee2:	ac e0       	ldi	r26, 0x0C	; 12
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e6 e7       	ldi	r30, 0x76	; 118
     ee8:	f7 e0       	ldi	r31, 0x07	; 7
     eea:	d4 c2       	rjmp	.+1448   	; 0x1494 <__prologue_saves__+0x20>
     eec:	69 83       	std	Y+1, r22	; 0x01
     eee:	7a 83       	std	Y+2, r23	; 0x02
     ef0:	8b 83       	std	Y+3, r24	; 0x03
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	be 01       	movw	r22, r28
     efa:	6b 5f       	subi	r22, 0xFB	; 251
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	66 d1       	rcall	.+716    	; 0x11cc <__unpack_f>
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	61 f1       	breq	.+88     	; 0xf5e <__fixsfsi+0x7c>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	50 f1       	brcs	.+84     	; 0xf5e <__fixsfsi+0x7c>
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__fixsfsi+0x34>
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	88 23       	and	r24, r24
     f12:	51 f1       	breq	.+84     	; 0xf68 <__fixsfsi+0x86>
     f14:	2e c0       	rjmp	.+92     	; 0xf72 <__fixsfsi+0x90>
     f16:	2f 81       	ldd	r18, Y+7	; 0x07
     f18:	38 85       	ldd	r19, Y+8	; 0x08
     f1a:	37 fd       	sbrc	r19, 7
     f1c:	20 c0       	rjmp	.+64     	; 0xf5e <__fixsfsi+0x7c>
     f1e:	6e 81       	ldd	r22, Y+6	; 0x06
     f20:	2f 31       	cpi	r18, 0x1F	; 31
     f22:	31 05       	cpc	r19, r1
     f24:	1c f0       	brlt	.+6      	; 0xf2c <__fixsfsi+0x4a>
     f26:	66 23       	and	r22, r22
     f28:	f9 f0       	breq	.+62     	; 0xf68 <__fixsfsi+0x86>
     f2a:	23 c0       	rjmp	.+70     	; 0xf72 <__fixsfsi+0x90>
     f2c:	8e e1       	ldi	r24, 0x1E	; 30
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	82 1b       	sub	r24, r18
     f32:	93 0b       	sbc	r25, r19
     f34:	29 85       	ldd	r18, Y+9	; 0x09
     f36:	3a 85       	ldd	r19, Y+10	; 0x0a
     f38:	4b 85       	ldd	r20, Y+11	; 0x0b
     f3a:	5c 85       	ldd	r21, Y+12	; 0x0c
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__fixsfsi+0x64>
     f3e:	56 95       	lsr	r21
     f40:	47 95       	ror	r20
     f42:	37 95       	ror	r19
     f44:	27 95       	ror	r18
     f46:	8a 95       	dec	r24
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__fixsfsi+0x5c>
     f4a:	66 23       	and	r22, r22
     f4c:	b1 f0       	breq	.+44     	; 0xf7a <__fixsfsi+0x98>
     f4e:	50 95       	com	r21
     f50:	40 95       	com	r20
     f52:	30 95       	com	r19
     f54:	21 95       	neg	r18
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	4f 4f       	sbci	r20, 0xFF	; 255
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <__fixsfsi+0x98>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <__fixsfsi+0x98>
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	4f ef       	ldi	r20, 0xFF	; 255
     f6e:	5f e7       	ldi	r21, 0x7F	; 127
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <__fixsfsi+0x98>
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e8       	ldi	r21, 0x80	; 128
     f7a:	b9 01       	movw	r22, r18
     f7c:	ca 01       	movw	r24, r20
     f7e:	2c 96       	adiw	r28, 0x0c	; 12
     f80:	e2 e0       	ldi	r30, 0x02	; 2
     f82:	a4 c2       	rjmp	.+1352   	; 0x14cc <__epilogue_restores__+0x20>

00000f84 <__clzsi2>:
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	7b 01       	movw	r14, r22
     f8e:	8c 01       	movw	r16, r24
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	e8 16       	cp	r14, r24
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	f8 06       	cpc	r15, r24
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	08 07       	cpc	r16, r24
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	18 07       	cpc	r17, r24
     fa0:	88 f4       	brcc	.+34     	; 0xfc4 <__clzsi2+0x40>
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	e8 16       	cp	r14, r24
     fa6:	f1 04       	cpc	r15, r1
     fa8:	01 05       	cpc	r16, r1
     faa:	11 05       	cpc	r17, r1
     fac:	31 f0       	breq	.+12     	; 0xfba <__clzsi2+0x36>
     fae:	28 f0       	brcs	.+10     	; 0xfba <__clzsi2+0x36>
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	17 c0       	rjmp	.+46     	; 0xfe8 <__clzsi2+0x64>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	12 c0       	rjmp	.+36     	; 0xfe8 <__clzsi2+0x64>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	e8 16       	cp	r14, r24
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	f8 06       	cpc	r15, r24
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	08 07       	cpc	r16, r24
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	18 07       	cpc	r17, r24
     fd4:	28 f0       	brcs	.+10     	; 0xfe0 <__clzsi2+0x5c>
     fd6:	88 e1       	ldi	r24, 0x18	; 24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__clzsi2+0x64>
     fe0:	80 e1       	ldi	r24, 0x10	; 16
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	20 e2       	ldi	r18, 0x20	; 32
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	28 1b       	sub	r18, r24
     ff2:	39 0b       	sbc	r19, r25
     ff4:	4a 0b       	sbc	r20, r26
     ff6:	5b 0b       	sbc	r21, r27
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <__clzsi2+0x7e>
     ffa:	16 95       	lsr	r17
     ffc:	07 95       	ror	r16
     ffe:	f7 94       	ror	r15
    1000:	e7 94       	ror	r14
    1002:	8a 95       	dec	r24
    1004:	d2 f7       	brpl	.-12     	; 0xffa <__clzsi2+0x76>
    1006:	f7 01       	movw	r30, r14
    1008:	ed 58       	subi	r30, 0x8D	; 141
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	28 1b       	sub	r18, r24
    1010:	31 09       	sbc	r19, r1
    1012:	41 09       	sbc	r20, r1
    1014:	51 09       	sbc	r21, r1
    1016:	c9 01       	movw	r24, r18
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	08 95       	ret

00001022 <__pack_f>:
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	fc 01       	movw	r30, r24
    102e:	e4 80       	ldd	r14, Z+4	; 0x04
    1030:	f5 80       	ldd	r15, Z+5	; 0x05
    1032:	06 81       	ldd	r16, Z+6	; 0x06
    1034:	17 81       	ldd	r17, Z+7	; 0x07
    1036:	d1 80       	ldd	r13, Z+1	; 0x01
    1038:	80 81       	ld	r24, Z
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	48 f4       	brcc	.+18     	; 0x1050 <__pack_f+0x2e>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e1       	ldi	r26, 0x10	; 16
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e8 2a       	or	r14, r24
    1048:	f9 2a       	or	r15, r25
    104a:	0a 2b       	or	r16, r26
    104c:	1b 2b       	or	r17, r27
    104e:	a5 c0       	rjmp	.+330    	; 0x119a <__pack_f+0x178>
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	09 f4       	brne	.+2      	; 0x1056 <__pack_f+0x34>
    1054:	9f c0       	rjmp	.+318    	; 0x1194 <__pack_f+0x172>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	21 f4       	brne	.+8      	; 0x1062 <__pack_f+0x40>
    105a:	ee 24       	eor	r14, r14
    105c:	ff 24       	eor	r15, r15
    105e:	87 01       	movw	r16, r14
    1060:	05 c0       	rjmp	.+10     	; 0x106c <__pack_f+0x4a>
    1062:	e1 14       	cp	r14, r1
    1064:	f1 04       	cpc	r15, r1
    1066:	01 05       	cpc	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	19 f4       	brne	.+6      	; 0x1072 <__pack_f+0x50>
    106c:	e0 e0       	ldi	r30, 0x00	; 0
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	96 c0       	rjmp	.+300    	; 0x119e <__pack_f+0x17c>
    1072:	62 81       	ldd	r22, Z+2	; 0x02
    1074:	73 81       	ldd	r23, Z+3	; 0x03
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	62 38       	cpi	r22, 0x82	; 130
    107a:	79 07       	cpc	r23, r25
    107c:	0c f0       	brlt	.+2      	; 0x1080 <__pack_f+0x5e>
    107e:	5b c0       	rjmp	.+182    	; 0x1136 <__pack_f+0x114>
    1080:	22 e8       	ldi	r18, 0x82	; 130
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	26 1b       	sub	r18, r22
    1086:	37 0b       	sbc	r19, r23
    1088:	2a 31       	cpi	r18, 0x1A	; 26
    108a:	31 05       	cpc	r19, r1
    108c:	2c f0       	brlt	.+10     	; 0x1098 <__pack_f+0x76>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	2a c0       	rjmp	.+84     	; 0x10ec <__pack_f+0xca>
    1098:	b8 01       	movw	r22, r16
    109a:	a7 01       	movw	r20, r14
    109c:	02 2e       	mov	r0, r18
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__pack_f+0x86>
    10a0:	76 95       	lsr	r23
    10a2:	67 95       	ror	r22
    10a4:	57 95       	ror	r21
    10a6:	47 95       	ror	r20
    10a8:	0a 94       	dec	r0
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__pack_f+0x7e>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <__pack_f+0x9c>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	2a 95       	dec	r18
    10c0:	d2 f7       	brpl	.-12     	; 0x10b6 <__pack_f+0x94>
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	a1 09       	sbc	r26, r1
    10c6:	b1 09       	sbc	r27, r1
    10c8:	8e 21       	and	r24, r14
    10ca:	9f 21       	and	r25, r15
    10cc:	a0 23       	and	r26, r16
    10ce:	b1 23       	and	r27, r17
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	a1 05       	cpc	r26, r1
    10d4:	b1 05       	cpc	r27, r1
    10d6:	21 f0       	breq	.+8      	; 0x10e0 <__pack_f+0xbe>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a0 e0       	ldi	r26, 0x00	; 0
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	9a 01       	movw	r18, r20
    10e2:	ab 01       	movw	r20, r22
    10e4:	28 2b       	or	r18, r24
    10e6:	39 2b       	or	r19, r25
    10e8:	4a 2b       	or	r20, r26
    10ea:	5b 2b       	or	r21, r27
    10ec:	da 01       	movw	r26, r20
    10ee:	c9 01       	movw	r24, r18
    10f0:	8f 77       	andi	r24, 0x7F	; 127
    10f2:	90 70       	andi	r25, 0x00	; 0
    10f4:	a0 70       	andi	r26, 0x00	; 0
    10f6:	b0 70       	andi	r27, 0x00	; 0
    10f8:	80 34       	cpi	r24, 0x40	; 64
    10fa:	91 05       	cpc	r25, r1
    10fc:	a1 05       	cpc	r26, r1
    10fe:	b1 05       	cpc	r27, r1
    1100:	39 f4       	brne	.+14     	; 0x1110 <__pack_f+0xee>
    1102:	27 ff       	sbrs	r18, 7
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <__pack_f+0xf6>
    1106:	20 5c       	subi	r18, 0xC0	; 192
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	4f 4f       	sbci	r20, 0xFF	; 255
    110c:	5f 4f       	sbci	r21, 0xFF	; 255
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <__pack_f+0xf6>
    1110:	21 5c       	subi	r18, 0xC1	; 193
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	4f 4f       	sbci	r20, 0xFF	; 255
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	e0 e0       	ldi	r30, 0x00	; 0
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	20 30       	cpi	r18, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	3a 07       	cpc	r19, r26
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	4a 07       	cpc	r20, r26
    1126:	a0 e4       	ldi	r26, 0x40	; 64
    1128:	5a 07       	cpc	r21, r26
    112a:	10 f0       	brcs	.+4      	; 0x1130 <__pack_f+0x10e>
    112c:	e1 e0       	ldi	r30, 0x01	; 1
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	79 01       	movw	r14, r18
    1132:	8a 01       	movw	r16, r20
    1134:	27 c0       	rjmp	.+78     	; 0x1184 <__pack_f+0x162>
    1136:	60 38       	cpi	r22, 0x80	; 128
    1138:	71 05       	cpc	r23, r1
    113a:	64 f5       	brge	.+88     	; 0x1194 <__pack_f+0x172>
    113c:	fb 01       	movw	r30, r22
    113e:	e1 58       	subi	r30, 0x81	; 129
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	d8 01       	movw	r26, r16
    1144:	c7 01       	movw	r24, r14
    1146:	8f 77       	andi	r24, 0x7F	; 127
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	a0 70       	andi	r26, 0x00	; 0
    114c:	b0 70       	andi	r27, 0x00	; 0
    114e:	80 34       	cpi	r24, 0x40	; 64
    1150:	91 05       	cpc	r25, r1
    1152:	a1 05       	cpc	r26, r1
    1154:	b1 05       	cpc	r27, r1
    1156:	39 f4       	brne	.+14     	; 0x1166 <__pack_f+0x144>
    1158:	e7 fe       	sbrs	r14, 7
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <__pack_f+0x154>
    115c:	80 e4       	ldi	r24, 0x40	; 64
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 e0       	ldi	r26, 0x00	; 0
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__pack_f+0x14c>
    1166:	8f e3       	ldi	r24, 0x3F	; 63
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a0 e0       	ldi	r26, 0x00	; 0
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 0e       	add	r14, r24
    1170:	f9 1e       	adc	r15, r25
    1172:	0a 1f       	adc	r16, r26
    1174:	1b 1f       	adc	r17, r27
    1176:	17 ff       	sbrs	r17, 7
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <__pack_f+0x162>
    117a:	16 95       	lsr	r17
    117c:	07 95       	ror	r16
    117e:	f7 94       	ror	r15
    1180:	e7 94       	ror	r14
    1182:	31 96       	adiw	r30, 0x01	; 1
    1184:	87 e0       	ldi	r24, 0x07	; 7
    1186:	16 95       	lsr	r17
    1188:	07 95       	ror	r16
    118a:	f7 94       	ror	r15
    118c:	e7 94       	ror	r14
    118e:	8a 95       	dec	r24
    1190:	d1 f7       	brne	.-12     	; 0x1186 <__pack_f+0x164>
    1192:	05 c0       	rjmp	.+10     	; 0x119e <__pack_f+0x17c>
    1194:	ee 24       	eor	r14, r14
    1196:	ff 24       	eor	r15, r15
    1198:	87 01       	movw	r16, r14
    119a:	ef ef       	ldi	r30, 0xFF	; 255
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	6e 2f       	mov	r22, r30
    11a0:	67 95       	ror	r22
    11a2:	66 27       	eor	r22, r22
    11a4:	67 95       	ror	r22
    11a6:	90 2f       	mov	r25, r16
    11a8:	9f 77       	andi	r25, 0x7F	; 127
    11aa:	d7 94       	ror	r13
    11ac:	dd 24       	eor	r13, r13
    11ae:	d7 94       	ror	r13
    11b0:	8e 2f       	mov	r24, r30
    11b2:	86 95       	lsr	r24
    11b4:	49 2f       	mov	r20, r25
    11b6:	46 2b       	or	r20, r22
    11b8:	58 2f       	mov	r21, r24
    11ba:	5d 29       	or	r21, r13
    11bc:	b7 01       	movw	r22, r14
    11be:	ca 01       	movw	r24, r20
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	08 95       	ret

000011cc <__unpack_f>:
    11cc:	fc 01       	movw	r30, r24
    11ce:	db 01       	movw	r26, r22
    11d0:	40 81       	ld	r20, Z
    11d2:	51 81       	ldd	r21, Z+1	; 0x01
    11d4:	22 81       	ldd	r18, Z+2	; 0x02
    11d6:	62 2f       	mov	r22, r18
    11d8:	6f 77       	andi	r22, 0x7F	; 127
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	22 1f       	adc	r18, r18
    11de:	22 27       	eor	r18, r18
    11e0:	22 1f       	adc	r18, r18
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	89 2f       	mov	r24, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	82 2b       	or	r24, r18
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	99 1f       	adc	r25, r25
    11f0:	99 27       	eor	r25, r25
    11f2:	99 1f       	adc	r25, r25
    11f4:	11 96       	adiw	r26, 0x01	; 1
    11f6:	9c 93       	st	X, r25
    11f8:	11 97       	sbiw	r26, 0x01	; 1
    11fa:	21 15       	cp	r18, r1
    11fc:	31 05       	cpc	r19, r1
    11fe:	a9 f5       	brne	.+106    	; 0x126a <__unpack_f+0x9e>
    1200:	41 15       	cp	r20, r1
    1202:	51 05       	cpc	r21, r1
    1204:	61 05       	cpc	r22, r1
    1206:	71 05       	cpc	r23, r1
    1208:	11 f4       	brne	.+4      	; 0x120e <__unpack_f+0x42>
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	37 c0       	rjmp	.+110    	; 0x127c <__unpack_f+0xb0>
    120e:	82 e8       	ldi	r24, 0x82	; 130
    1210:	9f ef       	ldi	r25, 0xFF	; 255
    1212:	13 96       	adiw	r26, 0x03	; 3
    1214:	9c 93       	st	X, r25
    1216:	8e 93       	st	-X, r24
    1218:	12 97       	sbiw	r26, 0x02	; 2
    121a:	9a 01       	movw	r18, r20
    121c:	ab 01       	movw	r20, r22
    121e:	67 e0       	ldi	r22, 0x07	; 7
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	44 1f       	adc	r20, r20
    1226:	55 1f       	adc	r21, r21
    1228:	6a 95       	dec	r22
    122a:	d1 f7       	brne	.-12     	; 0x1220 <__unpack_f+0x54>
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	8c 93       	st	X, r24
    1230:	0d c0       	rjmp	.+26     	; 0x124c <__unpack_f+0x80>
    1232:	22 0f       	add	r18, r18
    1234:	33 1f       	adc	r19, r19
    1236:	44 1f       	adc	r20, r20
    1238:	55 1f       	adc	r21, r21
    123a:	12 96       	adiw	r26, 0x02	; 2
    123c:	8d 91       	ld	r24, X+
    123e:	9c 91       	ld	r25, X
    1240:	13 97       	sbiw	r26, 0x03	; 3
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	13 96       	adiw	r26, 0x03	; 3
    1246:	9c 93       	st	X, r25
    1248:	8e 93       	st	-X, r24
    124a:	12 97       	sbiw	r26, 0x02	; 2
    124c:	20 30       	cpi	r18, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	38 07       	cpc	r19, r24
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	48 07       	cpc	r20, r24
    1256:	80 e4       	ldi	r24, 0x40	; 64
    1258:	58 07       	cpc	r21, r24
    125a:	58 f3       	brcs	.-42     	; 0x1232 <__unpack_f+0x66>
    125c:	14 96       	adiw	r26, 0x04	; 4
    125e:	2d 93       	st	X+, r18
    1260:	3d 93       	st	X+, r19
    1262:	4d 93       	st	X+, r20
    1264:	5c 93       	st	X, r21
    1266:	17 97       	sbiw	r26, 0x07	; 7
    1268:	08 95       	ret
    126a:	2f 3f       	cpi	r18, 0xFF	; 255
    126c:	31 05       	cpc	r19, r1
    126e:	79 f4       	brne	.+30     	; 0x128e <__unpack_f+0xc2>
    1270:	41 15       	cp	r20, r1
    1272:	51 05       	cpc	r21, r1
    1274:	61 05       	cpc	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	19 f4       	brne	.+6      	; 0x1280 <__unpack_f+0xb4>
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	8c 93       	st	X, r24
    127e:	08 95       	ret
    1280:	64 ff       	sbrs	r22, 4
    1282:	03 c0       	rjmp	.+6      	; 0x128a <__unpack_f+0xbe>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8c 93       	st	X, r24
    1288:	12 c0       	rjmp	.+36     	; 0x12ae <__unpack_f+0xe2>
    128a:	1c 92       	st	X, r1
    128c:	10 c0       	rjmp	.+32     	; 0x12ae <__unpack_f+0xe2>
    128e:	2f 57       	subi	r18, 0x7F	; 127
    1290:	30 40       	sbci	r19, 0x00	; 0
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	3c 93       	st	X, r19
    1296:	2e 93       	st	-X, r18
    1298:	12 97       	sbiw	r26, 0x02	; 2
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	8c 93       	st	X, r24
    129e:	87 e0       	ldi	r24, 0x07	; 7
    12a0:	44 0f       	add	r20, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	8a 95       	dec	r24
    12aa:	d1 f7       	brne	.-12     	; 0x12a0 <__unpack_f+0xd4>
    12ac:	70 64       	ori	r23, 0x40	; 64
    12ae:	14 96       	adiw	r26, 0x04	; 4
    12b0:	4d 93       	st	X+, r20
    12b2:	5d 93       	st	X+, r21
    12b4:	6d 93       	st	X+, r22
    12b6:	7c 93       	st	X, r23
    12b8:	17 97       	sbiw	r26, 0x07	; 7
    12ba:	08 95       	ret

000012bc <__fpcmp_parts_f>:
    12bc:	1f 93       	push	r17
    12be:	dc 01       	movw	r26, r24
    12c0:	fb 01       	movw	r30, r22
    12c2:	9c 91       	ld	r25, X
    12c4:	92 30       	cpi	r25, 0x02	; 2
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <__fpcmp_parts_f+0xe>
    12c8:	47 c0       	rjmp	.+142    	; 0x1358 <__fpcmp_parts_f+0x9c>
    12ca:	80 81       	ld	r24, Z
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	08 f4       	brcc	.+2      	; 0x12d2 <__fpcmp_parts_f+0x16>
    12d0:	43 c0       	rjmp	.+134    	; 0x1358 <__fpcmp_parts_f+0x9c>
    12d2:	94 30       	cpi	r25, 0x04	; 4
    12d4:	51 f4       	brne	.+20     	; 0x12ea <__fpcmp_parts_f+0x2e>
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	1c 91       	ld	r17, X
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	99 f5       	brne	.+102    	; 0x1344 <__fpcmp_parts_f+0x88>
    12de:	81 81       	ldd	r24, Z+1	; 0x01
    12e0:	68 2f       	mov	r22, r24
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	61 1b       	sub	r22, r17
    12e6:	71 09       	sbc	r23, r1
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <__fpcmp_parts_f+0xac>
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <__fpcmp_parts_f+0x3a>
    12ee:	92 30       	cpi	r25, 0x02	; 2
    12f0:	31 f4       	brne	.+12     	; 0x12fe <__fpcmp_parts_f+0x42>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	b9 f1       	breq	.+110    	; 0x1364 <__fpcmp_parts_f+0xa8>
    12f6:	81 81       	ldd	r24, Z+1	; 0x01
    12f8:	88 23       	and	r24, r24
    12fa:	89 f1       	breq	.+98     	; 0x135e <__fpcmp_parts_f+0xa2>
    12fc:	2d c0       	rjmp	.+90     	; 0x1358 <__fpcmp_parts_f+0x9c>
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	1c 91       	ld	r17, X
    1302:	11 97       	sbiw	r26, 0x01	; 1
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	f1 f0       	breq	.+60     	; 0x1344 <__fpcmp_parts_f+0x88>
    1308:	81 81       	ldd	r24, Z+1	; 0x01
    130a:	18 17       	cp	r17, r24
    130c:	d9 f4       	brne	.+54     	; 0x1344 <__fpcmp_parts_f+0x88>
    130e:	12 96       	adiw	r26, 0x02	; 2
    1310:	2d 91       	ld	r18, X+
    1312:	3c 91       	ld	r19, X
    1314:	13 97       	sbiw	r26, 0x03	; 3
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	82 17       	cp	r24, r18
    131c:	93 07       	cpc	r25, r19
    131e:	94 f0       	brlt	.+36     	; 0x1344 <__fpcmp_parts_f+0x88>
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	bc f0       	brlt	.+46     	; 0x1354 <__fpcmp_parts_f+0x98>
    1326:	14 96       	adiw	r26, 0x04	; 4
    1328:	8d 91       	ld	r24, X+
    132a:	9d 91       	ld	r25, X+
    132c:	0d 90       	ld	r0, X+
    132e:	bc 91       	ld	r27, X
    1330:	a0 2d       	mov	r26, r0
    1332:	24 81       	ldd	r18, Z+4	; 0x04
    1334:	35 81       	ldd	r19, Z+5	; 0x05
    1336:	46 81       	ldd	r20, Z+6	; 0x06
    1338:	57 81       	ldd	r21, Z+7	; 0x07
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	4a 07       	cpc	r20, r26
    1340:	5b 07       	cpc	r21, r27
    1342:	18 f4       	brcc	.+6      	; 0x134a <__fpcmp_parts_f+0x8e>
    1344:	11 23       	and	r17, r17
    1346:	41 f0       	breq	.+16     	; 0x1358 <__fpcmp_parts_f+0x9c>
    1348:	0a c0       	rjmp	.+20     	; 0x135e <__fpcmp_parts_f+0xa2>
    134a:	82 17       	cp	r24, r18
    134c:	93 07       	cpc	r25, r19
    134e:	a4 07       	cpc	r26, r20
    1350:	b5 07       	cpc	r27, r21
    1352:	40 f4       	brcc	.+16     	; 0x1364 <__fpcmp_parts_f+0xa8>
    1354:	11 23       	and	r17, r17
    1356:	19 f0       	breq	.+6      	; 0x135e <__fpcmp_parts_f+0xa2>
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <__fpcmp_parts_f+0xac>
    135e:	6f ef       	ldi	r22, 0xFF	; 255
    1360:	7f ef       	ldi	r23, 0xFF	; 255
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <__fpcmp_parts_f+0xac>
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	cb 01       	movw	r24, r22
    136a:	1f 91       	pop	r17
    136c:	08 95       	ret

0000136e <__mulsi3>:
    136e:	62 9f       	mul	r22, r18
    1370:	d0 01       	movw	r26, r0
    1372:	73 9f       	mul	r23, r19
    1374:	f0 01       	movw	r30, r0
    1376:	82 9f       	mul	r24, r18
    1378:	e0 0d       	add	r30, r0
    137a:	f1 1d       	adc	r31, r1
    137c:	64 9f       	mul	r22, r20
    137e:	e0 0d       	add	r30, r0
    1380:	f1 1d       	adc	r31, r1
    1382:	92 9f       	mul	r25, r18
    1384:	f0 0d       	add	r31, r0
    1386:	83 9f       	mul	r24, r19
    1388:	f0 0d       	add	r31, r0
    138a:	74 9f       	mul	r23, r20
    138c:	f0 0d       	add	r31, r0
    138e:	65 9f       	mul	r22, r21
    1390:	f0 0d       	add	r31, r0
    1392:	99 27       	eor	r25, r25
    1394:	72 9f       	mul	r23, r18
    1396:	b0 0d       	add	r27, r0
    1398:	e1 1d       	adc	r30, r1
    139a:	f9 1f       	adc	r31, r25
    139c:	63 9f       	mul	r22, r19
    139e:	b0 0d       	add	r27, r0
    13a0:	e1 1d       	adc	r30, r1
    13a2:	f9 1f       	adc	r31, r25
    13a4:	bd 01       	movw	r22, r26
    13a6:	cf 01       	movw	r24, r30
    13a8:	11 24       	eor	r1, r1
    13aa:	08 95       	ret

000013ac <__divmodhi4>:
    13ac:	97 fb       	bst	r25, 7
    13ae:	09 2e       	mov	r0, r25
    13b0:	07 26       	eor	r0, r23
    13b2:	0a d0       	rcall	.+20     	; 0x13c8 <__divmodhi4_neg1>
    13b4:	77 fd       	sbrc	r23, 7
    13b6:	04 d0       	rcall	.+8      	; 0x13c0 <__divmodhi4_neg2>
    13b8:	27 d0       	rcall	.+78     	; 0x1408 <__udivmodhi4>
    13ba:	06 d0       	rcall	.+12     	; 0x13c8 <__divmodhi4_neg1>
    13bc:	00 20       	and	r0, r0
    13be:	1a f4       	brpl	.+6      	; 0x13c6 <__divmodhi4_exit>

000013c0 <__divmodhi4_neg2>:
    13c0:	70 95       	com	r23
    13c2:	61 95       	neg	r22
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255

000013c6 <__divmodhi4_exit>:
    13c6:	08 95       	ret

000013c8 <__divmodhi4_neg1>:
    13c8:	f6 f7       	brtc	.-4      	; 0x13c6 <__divmodhi4_exit>
    13ca:	90 95       	com	r25
    13cc:	81 95       	neg	r24
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__divmodsi4>:
    13d2:	97 fb       	bst	r25, 7
    13d4:	09 2e       	mov	r0, r25
    13d6:	05 26       	eor	r0, r21
    13d8:	0e d0       	rcall	.+28     	; 0x13f6 <__divmodsi4_neg1>
    13da:	57 fd       	sbrc	r21, 7
    13dc:	04 d0       	rcall	.+8      	; 0x13e6 <__divmodsi4_neg2>
    13de:	28 d0       	rcall	.+80     	; 0x1430 <__udivmodsi4>
    13e0:	0a d0       	rcall	.+20     	; 0x13f6 <__divmodsi4_neg1>
    13e2:	00 1c       	adc	r0, r0
    13e4:	38 f4       	brcc	.+14     	; 0x13f4 <__divmodsi4_exit>

000013e6 <__divmodsi4_neg2>:
    13e6:	50 95       	com	r21
    13e8:	40 95       	com	r20
    13ea:	30 95       	com	r19
    13ec:	21 95       	neg	r18
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	4f 4f       	sbci	r20, 0xFF	; 255
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255

000013f4 <__divmodsi4_exit>:
    13f4:	08 95       	ret

000013f6 <__divmodsi4_neg1>:
    13f6:	f6 f7       	brtc	.-4      	; 0x13f4 <__divmodsi4_exit>
    13f8:	90 95       	com	r25
    13fa:	80 95       	com	r24
    13fc:	70 95       	com	r23
    13fe:	61 95       	neg	r22
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	08 95       	ret

00001408 <__udivmodhi4>:
    1408:	aa 1b       	sub	r26, r26
    140a:	bb 1b       	sub	r27, r27
    140c:	51 e1       	ldi	r21, 0x11	; 17
    140e:	07 c0       	rjmp	.+14     	; 0x141e <__udivmodhi4_ep>

00001410 <__udivmodhi4_loop>:
    1410:	aa 1f       	adc	r26, r26
    1412:	bb 1f       	adc	r27, r27
    1414:	a6 17       	cp	r26, r22
    1416:	b7 07       	cpc	r27, r23
    1418:	10 f0       	brcs	.+4      	; 0x141e <__udivmodhi4_ep>
    141a:	a6 1b       	sub	r26, r22
    141c:	b7 0b       	sbc	r27, r23

0000141e <__udivmodhi4_ep>:
    141e:	88 1f       	adc	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	5a 95       	dec	r21
    1424:	a9 f7       	brne	.-22     	; 0x1410 <__udivmodhi4_loop>
    1426:	80 95       	com	r24
    1428:	90 95       	com	r25
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	08 95       	ret

00001430 <__udivmodsi4>:
    1430:	a1 e2       	ldi	r26, 0x21	; 33
    1432:	1a 2e       	mov	r1, r26
    1434:	aa 1b       	sub	r26, r26
    1436:	bb 1b       	sub	r27, r27
    1438:	fd 01       	movw	r30, r26
    143a:	0d c0       	rjmp	.+26     	; 0x1456 <__udivmodsi4_ep>

0000143c <__udivmodsi4_loop>:
    143c:	aa 1f       	adc	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	ee 1f       	adc	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	a2 17       	cp	r26, r18
    1446:	b3 07       	cpc	r27, r19
    1448:	e4 07       	cpc	r30, r20
    144a:	f5 07       	cpc	r31, r21
    144c:	20 f0       	brcs	.+8      	; 0x1456 <__udivmodsi4_ep>
    144e:	a2 1b       	sub	r26, r18
    1450:	b3 0b       	sbc	r27, r19
    1452:	e4 0b       	sbc	r30, r20
    1454:	f5 0b       	sbc	r31, r21

00001456 <__udivmodsi4_ep>:
    1456:	66 1f       	adc	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	1a 94       	dec	r1
    1460:	69 f7       	brne	.-38     	; 0x143c <__udivmodsi4_loop>
    1462:	60 95       	com	r22
    1464:	70 95       	com	r23
    1466:	80 95       	com	r24
    1468:	90 95       	com	r25
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	bd 01       	movw	r22, r26
    1470:	cf 01       	movw	r24, r30
    1472:	08 95       	ret

00001474 <__prologue_saves__>:
    1474:	2f 92       	push	r2
    1476:	3f 92       	push	r3
    1478:	4f 92       	push	r4
    147a:	5f 92       	push	r5
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	8f 92       	push	r8
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	ca 1b       	sub	r28, r26
    149e:	db 0b       	sbc	r29, r27
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	09 94       	ijmp

000014ac <__epilogue_restores__>:
    14ac:	2a 88       	ldd	r2, Y+18	; 0x12
    14ae:	39 88       	ldd	r3, Y+17	; 0x11
    14b0:	48 88       	ldd	r4, Y+16	; 0x10
    14b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    14bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14be:	b9 84       	ldd	r11, Y+9	; 0x09
    14c0:	c8 84       	ldd	r12, Y+8	; 0x08
    14c2:	df 80       	ldd	r13, Y+7	; 0x07
    14c4:	ee 80       	ldd	r14, Y+6	; 0x06
    14c6:	fd 80       	ldd	r15, Y+5	; 0x05
    14c8:	0c 81       	ldd	r16, Y+4	; 0x04
    14ca:	1b 81       	ldd	r17, Y+3	; 0x03
    14cc:	aa 81       	ldd	r26, Y+2	; 0x02
    14ce:	b9 81       	ldd	r27, Y+1	; 0x01
    14d0:	ce 0f       	add	r28, r30
    14d2:	d1 1d       	adc	r29, r1
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	ed 01       	movw	r28, r26
    14e0:	08 95       	ret

000014e2 <do_rand>:
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e6 e7       	ldi	r30, 0x76	; 118
    14e8:	fa e0       	ldi	r31, 0x0A	; 10
    14ea:	cc cf       	rjmp	.-104    	; 0x1484 <__prologue_saves__+0x10>
    14ec:	ec 01       	movw	r28, r24
    14ee:	a8 80       	ld	r10, Y
    14f0:	b9 80       	ldd	r11, Y+1	; 0x01
    14f2:	ca 80       	ldd	r12, Y+2	; 0x02
    14f4:	db 80       	ldd	r13, Y+3	; 0x03
    14f6:	a1 14       	cp	r10, r1
    14f8:	b1 04       	cpc	r11, r1
    14fa:	c1 04       	cpc	r12, r1
    14fc:	d1 04       	cpc	r13, r1
    14fe:	41 f4       	brne	.+16     	; 0x1510 <do_rand+0x2e>
    1500:	84 e2       	ldi	r24, 0x24	; 36
    1502:	a8 2e       	mov	r10, r24
    1504:	89 ed       	ldi	r24, 0xD9	; 217
    1506:	b8 2e       	mov	r11, r24
    1508:	8b e5       	ldi	r24, 0x5B	; 91
    150a:	c8 2e       	mov	r12, r24
    150c:	87 e0       	ldi	r24, 0x07	; 7
    150e:	d8 2e       	mov	r13, r24
    1510:	c6 01       	movw	r24, r12
    1512:	b5 01       	movw	r22, r10
    1514:	2d e1       	ldi	r18, 0x1D	; 29
    1516:	33 ef       	ldi	r19, 0xF3	; 243
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	5a df       	rcall	.-332    	; 0x13d2 <__divmodsi4>
    151e:	27 ea       	ldi	r18, 0xA7	; 167
    1520:	31 e4       	ldi	r19, 0x41	; 65
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	23 df       	rcall	.-442    	; 0x136e <__mulsi3>
    1528:	7b 01       	movw	r14, r22
    152a:	8c 01       	movw	r16, r24
    152c:	c6 01       	movw	r24, r12
    152e:	b5 01       	movw	r22, r10
    1530:	2d e1       	ldi	r18, 0x1D	; 29
    1532:	33 ef       	ldi	r19, 0xF3	; 243
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	4c df       	rcall	.-360    	; 0x13d2 <__divmodsi4>
    153a:	ca 01       	movw	r24, r20
    153c:	b9 01       	movw	r22, r18
    153e:	2c ee       	ldi	r18, 0xEC	; 236
    1540:	34 ef       	ldi	r19, 0xF4	; 244
    1542:	4f ef       	ldi	r20, 0xFF	; 255
    1544:	5f ef       	ldi	r21, 0xFF	; 255
    1546:	13 df       	rcall	.-474    	; 0x136e <__mulsi3>
    1548:	6e 0d       	add	r22, r14
    154a:	7f 1d       	adc	r23, r15
    154c:	80 1f       	adc	r24, r16
    154e:	91 1f       	adc	r25, r17
    1550:	97 ff       	sbrs	r25, 7
    1552:	04 c0       	rjmp	.+8      	; 0x155c <do_rand+0x7a>
    1554:	61 50       	subi	r22, 0x01	; 1
    1556:	70 40       	sbci	r23, 0x00	; 0
    1558:	80 40       	sbci	r24, 0x00	; 0
    155a:	90 48       	sbci	r25, 0x80	; 128
    155c:	68 83       	st	Y, r22
    155e:	79 83       	std	Y+1, r23	; 0x01
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	9b 83       	std	Y+3, r25	; 0x03
    1564:	9b 01       	movw	r18, r22
    1566:	3f 77       	andi	r19, 0x7F	; 127
    1568:	c9 01       	movw	r24, r18
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	ea e0       	ldi	r30, 0x0A	; 10
    1570:	a5 cf       	rjmp	.-182    	; 0x14bc <__epilogue_restores__+0x10>

00001572 <rand_r>:
    1572:	b7 df       	rcall	.-146    	; 0x14e2 <do_rand>
    1574:	08 95       	ret

00001576 <rand>:
    1576:	83 e7       	ldi	r24, 0x73	; 115
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	b3 df       	rcall	.-154    	; 0x14e2 <do_rand>
    157c:	08 95       	ret

0000157e <srand>:
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	80 93 73 01 	sts	0x0173, r24
    1586:	90 93 74 01 	sts	0x0174, r25
    158a:	a0 93 75 01 	sts	0x0175, r26
    158e:	b0 93 76 01 	sts	0x0176, r27
    1592:	08 95       	ret

00001594 <_exit>:
    1594:	f8 94       	cli

00001596 <__stop_program>:
    1596:	ff cf       	rjmp	.-2      	; 0x1596 <__stop_program>
