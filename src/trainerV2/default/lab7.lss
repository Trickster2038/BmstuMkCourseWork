
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  0000020a  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000154  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c9  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022e  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000158  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee e6       	ldi	r30, 0x6E	; 110
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a8 36       	cpi	r26, 0x68	; 104
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a8 e6       	ldi	r26, 0x68	; 104
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 36       	cpi	r26, 0x6F	; 111
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0e d0       	rcall	.+28     	; 0x72 <main>
  56:	89 c0       	rjmp	.+274    	; 0x16a <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <test>:
#include "keyboard.h"
#include "uart.h"
#include "display.h"

int test(void){
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  5a:	17 ba       	out	0x17, r1	; 23
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
  5c:	85 e9       	ldi	r24, 0x95	; 149
  5e:	88 bb       	out	0x18, r24	; 24
}
  60:	08 95       	ret

00000062 <init_main>:

void init_main(void){
	DDRA=0xF0;
  62:	80 ef       	ldi	r24, 0xF0	; 240
  64:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  66:	8f e0       	ldi	r24, 0x0F	; 15
  68:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  6e:	87 bb       	out	0x17, r24	; 23
	//PORTB=0xF3;
}
  70:	08 95       	ret

00000072 <main>:
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
}

void init_main(void){
	DDRA=0xF0;
  72:	80 ef       	ldi	r24, 0xF0	; 240
  74:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  76:	8f e0       	ldi	r24, 0x0F	; 15
  78:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  7e:	87 bb       	out	0x17, r24	; 23
	//test1_func();
	//PORTC=0b10011001;
	//uart_init();
	//uart_send_byte('h');
	//uart_send_byte('3');
	display_set_bytes(1,2,3,4);
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	43 e0       	ldi	r20, 0x03	; 3
  86:	24 e0       	ldi	r18, 0x04	; 4
  88:	4c d0       	rcall	.+152    	; 0x122 <display_set_bytes>

	while(1) {
		display_flash_once();
  8a:	54 d0       	rcall	.+168    	; 0x134 <display_flash_once>
		
		//uart_send_byte1('e');
		PORTB=keyboard_get_state();
  8c:	0c d0       	rcall	.+24     	; 0xa6 <keyboard_get_state>
  8e:	88 bb       	out	0x18, r24	; 24
		PORTC=keyboard_get_state();
  90:	0a d0       	rcall	.+20     	; 0xa6 <keyboard_get_state>
  92:	85 bb       	out	0x15, r24	; 21
		PORTC |= 0b10000000;
  94:	af 9a       	sbi	0x15, 7	; 21
		
		PORTB |= 1<<PB7;
  96:	c7 9a       	sbi	0x18, 7	; 24
		PORTB &= 0x7F;
  98:	c7 98       	cbi	0x18, 7	; 24
  9a:	f7 cf       	rjmp	.-18     	; 0x8a <main+0x18>

0000009c <test1_func>:
#include <avr/io.h>

int test1_func(void){
	DDRA=0xFF; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b10010100; // ????????? LED7, PB0-????????????? ???????? ??????
  a0:	84 e9       	ldi	r24, 0x94	; 148
  a2:	8b bb       	out	0x1b, r24	; 27
}
  a4:	08 95       	ret

000000a6 <keyboard_get_state>:
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
  a6:	10 92 68 00 	sts	0x0068, r1
  aa:	40 91 69 00 	lds	r20, 0x0069
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <keyboard_get_state+0x52>
    { 
       PORTA=portState[i];
  b2:	e5 2f       	mov	r30, r21
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 81       	ld	r24, Z
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	18 c0       	rjmp	.+48     	; 0xf2 <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[j])==0))
  c2:	89 b3       	in	r24, 0x19	; 25
  c4:	24 2f       	mov	r18, r20
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	64 2f       	mov	r22, r20
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	f9 01       	movw	r30, r18
  ce:	ec 59       	subi	r30, 0x9C	; 156
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	90 81       	ld	r25, Z
  d4:	89 23       	and	r24, r25
  d6:	61 f4       	brne	.+24     	; 0xf0 <keyboard_get_state+0x4a>
  d8:	40 93 69 00 	sts	0x0069, r20
  dc:	50 93 68 00 	sts	0x0068, r21
          {
		  	return (j<<4) | i;
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <keyboard_get_state+0x3c>
  ea:	85 2f       	mov	r24, r21
  ec:	82 2b       	or	r24, r18
  ee:	08 95       	ret
  f0:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[i];
       for(j=0; j<4; j++)
  f2:	44 30       	cpi	r20, 0x04	; 4
  f4:	31 f7       	brne	.-52     	; 0xc2 <keyboard_get_state+0x1c>
  f6:	5f 5f       	subi	r21, 0xFF	; 255
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
  f8:	54 30       	cpi	r21, 0x04	; 4
  fa:	d8 f2       	brcs	.-74     	; 0xb2 <keyboard_get_state+0xc>
  fc:	40 93 69 00 	sts	0x0069, r20
 100:	50 93 68 00 	sts	0x0068, r21
 104:	8f ef       	ldi	r24, 0xFF	; 255
		  	return (j<<4) | i;
          }
       }                          
    }
	return 0xFF;  
}
 106:	08 95       	ret

00000108 <uart_init>:
#define F_CPU 1000000UL
#define BAUD 9600
#include <util/setbaud.h>

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
 108:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
 10e:	59 9a       	sbi	0x0b, 1	; 11
#else
    UCSRA &= ~(_BV(U2X));
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	8a b9       	out	0x0a, r24	; 10
}
 118:	08 95       	ret

0000011a <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); /* Wait until data register empty. */
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <uart_send_byte>
   UDR = c;
 11e:	8c b9       	out	0x0c, r24	; 12
}
 120:	08 95       	ret

00000122 <display_set_bytes>:
char c1, c2, c3, c4;
char display_temp;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c1 = t1;
 122:	80 93 6d 00 	sts	0x006D, r24
	c2 = t2;
 126:	60 93 6b 00 	sts	0x006B, r22
	c3 = t3;
 12a:	40 93 6e 00 	sts	0x006E, r20
	c4 = t4;
 12e:	20 93 6a 00 	sts	0x006A, r18
}
 132:	08 95       	ret

00000134 <display_flash_once>:

void display_flash_once(){
	display_temp = 0x0F & c1;
	PORTB = 0x10 | display_temp;
 134:	80 91 6d 00 	lds	r24, 0x006D
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	88 bb       	out	0x18, r24	; 24
	display_temp = 0x0F & c2;
	PORTB = 0x20 | display_temp;
 13e:	80 91 6b 00 	lds	r24, 0x006B
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	80 62       	ori	r24, 0x20	; 32
 146:	88 bb       	out	0x18, r24	; 24
	display_temp = 0x0F & c3;
	PORTB = 0x40 | display_temp;
 148:	80 91 6e 00 	lds	r24, 0x006E
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	88 bb       	out	0x18, r24	; 24
	display_temp = 0x0F & c4;
 152:	80 91 6a 00 	lds	r24, 0x006A
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	80 93 6c 00 	sts	0x006C, r24
	PORTB = 0x80 | display_temp;
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	88 bb       	out	0x18, r24	; 24
}
 160:	08 95       	ret

00000162 <display_off>:

void display_off(){
	PORTB &= 0x0F;
 162:	88 b3       	in	r24, 0x18	; 24
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	88 bb       	out	0x18, r24	; 24
}
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
