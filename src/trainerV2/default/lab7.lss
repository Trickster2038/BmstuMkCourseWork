
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000496  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006e  0080006e  00000538  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f3  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d1  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000614  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ff  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	5a c0       	rjmp	.+180    	; 0xc2 <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e6 e9       	ldi	r30, 0x96	; 150
  3e:	f4 e0       	ldi	r31, 0x04	; 4
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	ae 36       	cpi	r26, 0x6E	; 110
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	ae e6       	ldi	r26, 0x6E	; 110
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a8 37       	cpi	r26, 0x78	; 120
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	0a d0       	rcall	.+20     	; 0x72 <main>
  5e:	19 c2       	rjmp	.+1074   	; 0x492 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <init_main>:
  display_flash_once();
  TCNT1=0; //clear ticks
}

void init_main(void){
	DDRA=0xF0;
  62:	80 ef       	ldi	r24, 0xF0	; 240
  64:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F; // resistors on buttons
  66:	8f e0       	ldi	r24, 0x0F	; 15
  68:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF; // PORTC - OUTPUT
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF; // PORTB - OUTPUT
  6e:	87 bb       	out	0x17, r24	; 23
}
  70:	08 95       	ret

00000072 <main>:

int main(void){
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  display_flash_once();
  TCNT1=0; //clear ticks
}

void init_main(void){
	DDRA=0xF0;
  76:	80 ef       	ldi	r24, 0xF0	; 240
  78:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F; // resistors on buttons
  7a:	8f e0       	ldi	r24, 0x0F	; 15
  7c:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF; // PORTC - OUTPUT
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF; // PORTB - OUTPUT
  82:	87 bb       	out	0x17, r24	; 23
int main(void){
	init_main();
	//uart_init();
	//uart_send_byte('h');
	//uart_send_byte('3');
	display_set_bytes(1,2,3,4);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	62 e0       	ldi	r22, 0x02	; 2
  88:	43 e0       	ldi	r20, 0x03	; 3
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	82 d0       	rcall	.+260    	; 0x192 <display_set_bytes>
	leds_random_line();
  8e:	e7 d0       	rcall	.+462    	; 0x25e <leds_random_line>
	display_init_timer();
  90:	b3 d0       	rcall	.+358    	; 0x1f8 <display_init_timer>
	sei();
  92:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	c4 e6       	ldi	r28, 0x64	; 100
  96:	d0 e0       	ldi	r29, 0x00	; 0

	while(1) {
		leds_move_column();
  98:	bc d0       	rcall	.+376    	; 0x212 <leds_move_column>
		leds_update();
  9a:	d4 d0       	rcall	.+424    	; 0x244 <leds_update>
  9c:	88 ee       	ldi	r24, 0xE8	; 232
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	fe 01       	movw	r30, r28
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x2e>
		_delay_ms(100);

		hh++;
  aa:	80 91 6e 00 	lds	r24, 0x006E
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 6e 00 	sts	0x006E, r24
		if(hh % 4 == 0){
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	83 70       	andi	r24, 0x03	; 3
  b8:	90 70       	andi	r25, 0x00	; 0
  ba:	89 2b       	or	r24, r25
  bc:	69 f7       	brne	.-38     	; 0x98 <main+0x26>
			leds_random_line();
  be:	cf d0       	rcall	.+414    	; 0x25e <leds_random_line>
  c0:	eb cf       	rjmp	.-42     	; 0x98 <main+0x26>

000000c2 <__vector_6>:
#define F_CPU 1000000UL

char hh = 0;

ISR (TIMER1_COMPA_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  display_flash_once();
  e4:	67 d0       	rcall	.+206    	; 0x1b4 <display_flash_once>
  TCNT1=0; //clear ticks
  e6:	1d bc       	out	0x2d, r1	; 45
  e8:	1c bc       	out	0x2c, r1	; 44
}
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <test1_func>:
#include <avr/io.h>

int test1_func(void){
	DDRA=0xFF; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b10010100; // ????????? LED7, PB0-????????????? ???????? ??????
 110:	84 e9       	ldi	r24, 0x94	; 148
 112:	8b bb       	out	0x1b, r24	; 27
}
 114:	08 95       	ret

00000116 <keyboard_get_state>:
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
 116:	10 92 6f 00 	sts	0x006F, r1
 11a:	40 91 70 00 	lds	r20, 0x0070
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	23 c0       	rjmp	.+70     	; 0x168 <keyboard_get_state+0x52>
    { 
       PORTA=portState[i];
 122:	e5 2f       	mov	r30, r21
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e0 5a       	subi	r30, 0xA0	; 160
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	18 c0       	rjmp	.+48     	; 0x162 <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[j])==0))
 132:	89 b3       	in	r24, 0x19	; 25
 134:	24 2f       	mov	r18, r20
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	64 2f       	mov	r22, r20
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	f9 01       	movw	r30, r18
 13e:	ec 59       	subi	r30, 0x9C	; 156
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	90 81       	ld	r25, Z
 144:	89 23       	and	r24, r25
 146:	61 f4       	brne	.+24     	; 0x160 <keyboard_get_state+0x4a>
 148:	40 93 70 00 	sts	0x0070, r20
 14c:	50 93 6f 00 	sts	0x006F, r21
          {
		  	return (j<<4) | i;
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	8a 95       	dec	r24
 158:	e1 f7       	brne	.-8      	; 0x152 <keyboard_get_state+0x3c>
 15a:	85 2f       	mov	r24, r21
 15c:	82 2b       	or	r24, r18
 15e:	08 95       	ret
 160:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[i];
       for(j=0; j<4; j++)
 162:	44 30       	cpi	r20, 0x04	; 4
 164:	31 f7       	brne	.-52     	; 0x132 <keyboard_get_state+0x1c>
 166:	5f 5f       	subi	r21, 0xFF	; 255
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
 168:	54 30       	cpi	r21, 0x04	; 4
 16a:	d8 f2       	brcs	.-74     	; 0x122 <keyboard_get_state+0xc>
 16c:	40 93 70 00 	sts	0x0070, r20
 170:	50 93 6f 00 	sts	0x006F, r21
 174:	8f ef       	ldi	r24, 0xFF	; 255
		  	return (j<<4) | i;
          }
       }                          
    }
	return 0xFF;  
}
 176:	08 95       	ret

00000178 <uart_init>:
#include <avr/io.h>
#define BAUD 9600
#include <util/setbaud.h>

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
 178:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
 17a:	89 e1       	ldi	r24, 0x19	; 25
 17c:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
#else
    UCSRA &= ~(_BV(U2X));
 17e:	59 98       	cbi	0x0b, 1	; 11
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
 184:	88 e1       	ldi	r24, 0x18	; 24
 186:	8a b9       	out	0x0a, r24	; 10
}
 188:	08 95       	ret

0000018a <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); /* Wait until data register empty. */
 18a:	5d 9b       	sbis	0x0b, 5	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <uart_send_byte>
   UDR = c;
 18e:	8c b9       	out	0x0c, r24	; 12
}
 190:	08 95       	ret

00000192 <display_set_bytes>:
char c1, c2, c3, c4;
char display_temp;

void display_set_bytes(char t1, char t2,
	char t3, char t4){
	c1 = 0x10 | (0x0F & t1);
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 61       	ori	r24, 0x10	; 16
 196:	80 93 76 00 	sts	0x0076, r24
	c2 = 0x20 | (0x0F & t2);
 19a:	6f 70       	andi	r22, 0x0F	; 15
 19c:	60 62       	ori	r22, 0x20	; 32
 19e:	60 93 74 00 	sts	0x0074, r22
	c3 = 0x40 | (0x0F & t3);
 1a2:	4f 70       	andi	r20, 0x0F	; 15
 1a4:	40 64       	ori	r20, 0x40	; 64
 1a6:	40 93 77 00 	sts	0x0077, r20
	c4 = 0x80 | (0x0F & t4);
 1aa:	2f 70       	andi	r18, 0x0F	; 15
 1ac:	20 68       	ori	r18, 0x80	; 128
 1ae:	20 93 73 00 	sts	0x0073, r18
}
 1b2:	08 95       	ret

000001b4 <display_flash_once>:

void display_flash_once(){
	PORTB = c1;
 1b4:	80 91 76 00 	lds	r24, 0x0076
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	28 ee       	ldi	r18, 0xE8	; 232
 1bc:	33 e0       	ldi	r19, 0x03	; 3
 1be:	c9 01       	movw	r24, r18
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <display_flash_once+0xc>
	_delay_ms(1); // minimal delay just to init port
	PORTB = c2;
 1c4:	80 91 74 00 	lds	r24, 0x0074
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	c9 01       	movw	r24, r18
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <display_flash_once+0x18>
	_delay_ms(1);
	PORTB = c3;
 1d0:	80 91 77 00 	lds	r24, 0x0077
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	c9 01       	movw	r24, r18
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <display_flash_once+0x24>
	_delay_ms(1);
	PORTB = c4;
 1dc:	80 91 73 00 	lds	r24, 0x0073
 1e0:	88 bb       	out	0x18, r24	; 24
 1e2:	c9 01       	movw	r24, r18
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <display_flash_once+0x30>
	_delay_ms(1);
	display_off();
}

void display_off(){
	PORTB &= 0x0F;
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	8f 70       	andi	r24, 0x0F	; 15
 1ec:	88 bb       	out	0x18, r24	; 24
	PORTB = c3;
	_delay_ms(1);
	PORTB = c4;
	_delay_ms(1);
	display_off();
}
 1ee:	08 95       	ret

000001f0 <display_off>:

void display_off(){
	PORTB &= 0x0F;
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	88 bb       	out	0x18, r24	; 24
}
 1f6:	08 95       	ret

000001f8 <display_init_timer>:

void display_init_timer(){
	TCNT1=0x00; // ticks
 1f8:	1d bc       	out	0x2d, r1	; 45
 1fa:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS10); // K = 0
 1fc:	8e b5       	in	r24, 0x2e	; 46
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 16666; // compare num = (1_Mhz / 60_hz)
 202:	8a e1       	ldi	r24, 0x1A	; 26
 204:	91 e4       	ldi	r25, 0x41	; 65
 206:	9b bd       	out	0x2b, r25	; 43
 208:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A); // launch timer	
 20a:	89 b7       	in	r24, 0x39	; 57
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	89 bf       	out	0x39, r24	; 57
}
 210:	08 95       	ret

00000212 <leds_move_column>:
	line = rand() % 4;
	return line;
}

void leds_move_column(){
	if(direction == 1){
 212:	80 91 68 00 	lds	r24, 0x0068
 216:	90 91 72 00 	lds	r25, 0x0072
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	39 f4       	brne	.+14     	; 0x22c <leds_move_column+0x1a>
		if(column < 3){
 21e:	93 30       	cpi	r25, 0x03	; 3
 220:	10 f4       	brcc	.+4      	; 0x226 <leds_move_column+0x14>
			column++;
 222:	9f 5f       	subi	r25, 0xFF	; 255
 224:	06 c0       	rjmp	.+12     	; 0x232 <leds_move_column+0x20>
		} else {
			direction = 0;
 226:	10 92 68 00 	sts	0x0068, r1
 22a:	02 c0       	rjmp	.+4      	; 0x230 <leds_move_column+0x1e>
			column--;
		}
	} else {
		if(column > 0){
 22c:	99 23       	and	r25, r25
 22e:	21 f0       	breq	.+8      	; 0x238 <leds_move_column+0x26>
			column--;
 230:	91 50       	subi	r25, 0x01	; 1
 232:	90 93 72 00 	sts	0x0072, r25
 236:	08 95       	ret
		} else {
			direction = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 68 00 	sts	0x0068, r24
			column++;
 23e:	80 93 72 00 	sts	0x0072, r24
 242:	08 95       	ret

00000244 <leds_update>:
		}
	}
}

void leds_update(){
	PORTC = 0x80 | (column << 3) | line;
 244:	90 91 71 00 	lds	r25, 0x0071
 248:	90 68       	ori	r25, 0x80	; 128
 24a:	80 91 72 00 	lds	r24, 0x0072
 24e:	88 0f       	add	r24, r24
 250:	88 0f       	add	r24, r24
 252:	88 0f       	add	r24, r24
 254:	89 2b       	or	r24, r25
 256:	85 bb       	out	0x15, r24	; 21
}
 258:	08 95       	ret

0000025a <leds_off>:

void leds_off(){
	PORTC &= 0x7F;
 25a:	af 98       	cbi	0x15, 7	; 21
}
 25c:	08 95       	ret

0000025e <leds_random_line>:
char line = 0;
char column = 0;
char direction = 1; // forward

char leds_random_line(){
	line = rand() % 4;
 25e:	77 d0       	rcall	.+238    	; 0x34e <rand>
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	03 d0       	rcall	.+6      	; 0x26c <__divmodhi4>
 266:	80 93 71 00 	sts	0x0071, r24
	return line;
}
 26a:	08 95       	ret

0000026c <__divmodhi4>:
 26c:	97 fb       	bst	r25, 7
 26e:	09 2e       	mov	r0, r25
 270:	07 26       	eor	r0, r23
 272:	0a d0       	rcall	.+20     	; 0x288 <__divmodhi4_neg1>
 274:	77 fd       	sbrc	r23, 7
 276:	04 d0       	rcall	.+8      	; 0x280 <__divmodhi4_neg2>
 278:	0c d0       	rcall	.+24     	; 0x292 <__udivmodhi4>
 27a:	06 d0       	rcall	.+12     	; 0x288 <__divmodhi4_neg1>
 27c:	00 20       	and	r0, r0
 27e:	1a f4       	brpl	.+6      	; 0x286 <__divmodhi4_exit>

00000280 <__divmodhi4_neg2>:
 280:	70 95       	com	r23
 282:	61 95       	neg	r22
 284:	7f 4f       	sbci	r23, 0xFF	; 255

00000286 <__divmodhi4_exit>:
 286:	08 95       	ret

00000288 <__divmodhi4_neg1>:
 288:	f6 f7       	brtc	.-4      	; 0x286 <__divmodhi4_exit>
 28a:	90 95       	com	r25
 28c:	81 95       	neg	r24
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	08 95       	ret

00000292 <__udivmodhi4>:
 292:	aa 1b       	sub	r26, r26
 294:	bb 1b       	sub	r27, r27
 296:	51 e1       	ldi	r21, 0x11	; 17
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <__udivmodhi4_ep>

0000029a <__udivmodhi4_loop>:
 29a:	aa 1f       	adc	r26, r26
 29c:	bb 1f       	adc	r27, r27
 29e:	a6 17       	cp	r26, r22
 2a0:	b7 07       	cpc	r27, r23
 2a2:	10 f0       	brcs	.+4      	; 0x2a8 <__udivmodhi4_ep>
 2a4:	a6 1b       	sub	r26, r22
 2a6:	b7 0b       	sbc	r27, r23

000002a8 <__udivmodhi4_ep>:
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	5a 95       	dec	r21
 2ae:	a9 f7       	brne	.-22     	; 0x29a <__udivmodhi4_loop>
 2b0:	80 95       	com	r24
 2b2:	90 95       	com	r25
 2b4:	bc 01       	movw	r22, r24
 2b6:	cd 01       	movw	r24, r26
 2b8:	08 95       	ret

000002ba <do_rand>:
 2ba:	a0 e0       	ldi	r26, 0x00	; 0
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e2 e6       	ldi	r30, 0x62	; 98
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	96 c0       	rjmp	.+300    	; 0x3f0 <__prologue_saves__+0x10>
 2c4:	ec 01       	movw	r28, r24
 2c6:	a8 80       	ld	r10, Y
 2c8:	b9 80       	ldd	r11, Y+1	; 0x01
 2ca:	ca 80       	ldd	r12, Y+2	; 0x02
 2cc:	db 80       	ldd	r13, Y+3	; 0x03
 2ce:	a1 14       	cp	r10, r1
 2d0:	b1 04       	cpc	r11, r1
 2d2:	c1 04       	cpc	r12, r1
 2d4:	d1 04       	cpc	r13, r1
 2d6:	41 f4       	brne	.+16     	; 0x2e8 <do_rand+0x2e>
 2d8:	84 e2       	ldi	r24, 0x24	; 36
 2da:	a8 2e       	mov	r10, r24
 2dc:	89 ed       	ldi	r24, 0xD9	; 217
 2de:	b8 2e       	mov	r11, r24
 2e0:	8b e5       	ldi	r24, 0x5B	; 91
 2e2:	c8 2e       	mov	r12, r24
 2e4:	87 e0       	ldi	r24, 0x07	; 7
 2e6:	d8 2e       	mov	r13, r24
 2e8:	c6 01       	movw	r24, r12
 2ea:	b5 01       	movw	r22, r10
 2ec:	2d e1       	ldi	r18, 0x1D	; 29
 2ee:	33 ef       	ldi	r19, 0xF3	; 243
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	5a d0       	rcall	.+180    	; 0x3aa <__divmodsi4>
 2f6:	27 ea       	ldi	r18, 0xA7	; 167
 2f8:	31 e4       	ldi	r19, 0x41	; 65
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	36 d0       	rcall	.+108    	; 0x36c <__mulsi3>
 300:	7b 01       	movw	r14, r22
 302:	8c 01       	movw	r16, r24
 304:	c6 01       	movw	r24, r12
 306:	b5 01       	movw	r22, r10
 308:	2d e1       	ldi	r18, 0x1D	; 29
 30a:	33 ef       	ldi	r19, 0xF3	; 243
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	4c d0       	rcall	.+152    	; 0x3aa <__divmodsi4>
 312:	ca 01       	movw	r24, r20
 314:	b9 01       	movw	r22, r18
 316:	2c ee       	ldi	r18, 0xEC	; 236
 318:	34 ef       	ldi	r19, 0xF4	; 244
 31a:	4f ef       	ldi	r20, 0xFF	; 255
 31c:	5f ef       	ldi	r21, 0xFF	; 255
 31e:	26 d0       	rcall	.+76     	; 0x36c <__mulsi3>
 320:	6e 0d       	add	r22, r14
 322:	7f 1d       	adc	r23, r15
 324:	80 1f       	adc	r24, r16
 326:	91 1f       	adc	r25, r17
 328:	97 ff       	sbrs	r25, 7
 32a:	04 c0       	rjmp	.+8      	; 0x334 <do_rand+0x7a>
 32c:	61 50       	subi	r22, 0x01	; 1
 32e:	70 40       	sbci	r23, 0x00	; 0
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 48       	sbci	r25, 0x80	; 128
 334:	68 83       	st	Y, r22
 336:	79 83       	std	Y+1, r23	; 0x01
 338:	8a 83       	std	Y+2, r24	; 0x02
 33a:	9b 83       	std	Y+3, r25	; 0x03
 33c:	9b 01       	movw	r18, r22
 33e:	3f 77       	andi	r19, 0x7F	; 127
 340:	c9 01       	movw	r24, r18
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	ea e0       	ldi	r30, 0x0A	; 10
 348:	6f c0       	rjmp	.+222    	; 0x428 <__epilogue_restores__+0x10>

0000034a <rand_r>:
 34a:	b7 df       	rcall	.-146    	; 0x2ba <do_rand>
 34c:	08 95       	ret

0000034e <rand>:
 34e:	89 e6       	ldi	r24, 0x69	; 105
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	b3 df       	rcall	.-154    	; 0x2ba <do_rand>
 354:	08 95       	ret

00000356 <srand>:
 356:	a0 e0       	ldi	r26, 0x00	; 0
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	80 93 69 00 	sts	0x0069, r24
 35e:	90 93 6a 00 	sts	0x006A, r25
 362:	a0 93 6b 00 	sts	0x006B, r26
 366:	b0 93 6c 00 	sts	0x006C, r27
 36a:	08 95       	ret

0000036c <__mulsi3>:
 36c:	62 9f       	mul	r22, r18
 36e:	d0 01       	movw	r26, r0
 370:	73 9f       	mul	r23, r19
 372:	f0 01       	movw	r30, r0
 374:	82 9f       	mul	r24, r18
 376:	e0 0d       	add	r30, r0
 378:	f1 1d       	adc	r31, r1
 37a:	64 9f       	mul	r22, r20
 37c:	e0 0d       	add	r30, r0
 37e:	f1 1d       	adc	r31, r1
 380:	92 9f       	mul	r25, r18
 382:	f0 0d       	add	r31, r0
 384:	83 9f       	mul	r24, r19
 386:	f0 0d       	add	r31, r0
 388:	74 9f       	mul	r23, r20
 38a:	f0 0d       	add	r31, r0
 38c:	65 9f       	mul	r22, r21
 38e:	f0 0d       	add	r31, r0
 390:	99 27       	eor	r25, r25
 392:	72 9f       	mul	r23, r18
 394:	b0 0d       	add	r27, r0
 396:	e1 1d       	adc	r30, r1
 398:	f9 1f       	adc	r31, r25
 39a:	63 9f       	mul	r22, r19
 39c:	b0 0d       	add	r27, r0
 39e:	e1 1d       	adc	r30, r1
 3a0:	f9 1f       	adc	r31, r25
 3a2:	bd 01       	movw	r22, r26
 3a4:	cf 01       	movw	r24, r30
 3a6:	11 24       	eor	r1, r1
 3a8:	08 95       	ret

000003aa <__divmodsi4>:
 3aa:	97 fb       	bst	r25, 7
 3ac:	09 2e       	mov	r0, r25
 3ae:	05 26       	eor	r0, r21
 3b0:	0e d0       	rcall	.+28     	; 0x3ce <__divmodsi4_neg1>
 3b2:	57 fd       	sbrc	r21, 7
 3b4:	04 d0       	rcall	.+8      	; 0x3be <__divmodsi4_neg2>
 3b6:	4b d0       	rcall	.+150    	; 0x44e <__udivmodsi4>
 3b8:	0a d0       	rcall	.+20     	; 0x3ce <__divmodsi4_neg1>
 3ba:	00 1c       	adc	r0, r0
 3bc:	38 f4       	brcc	.+14     	; 0x3cc <__divmodsi4_exit>

000003be <__divmodsi4_neg2>:
 3be:	50 95       	com	r21
 3c0:	40 95       	com	r20
 3c2:	30 95       	com	r19
 3c4:	21 95       	neg	r18
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	4f 4f       	sbci	r20, 0xFF	; 255
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255

000003cc <__divmodsi4_exit>:
 3cc:	08 95       	ret

000003ce <__divmodsi4_neg1>:
 3ce:	f6 f7       	brtc	.-4      	; 0x3cc <__divmodsi4_exit>
 3d0:	90 95       	com	r25
 3d2:	80 95       	com	r24
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

000003e0 <__prologue_saves__>:
 3e0:	2f 92       	push	r2
 3e2:	3f 92       	push	r3
 3e4:	4f 92       	push	r4
 3e6:	5f 92       	push	r5
 3e8:	6f 92       	push	r6
 3ea:	7f 92       	push	r7
 3ec:	8f 92       	push	r8
 3ee:	9f 92       	push	r9
 3f0:	af 92       	push	r10
 3f2:	bf 92       	push	r11
 3f4:	cf 92       	push	r12
 3f6:	df 92       	push	r13
 3f8:	ef 92       	push	r14
 3fa:	ff 92       	push	r15
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	ca 1b       	sub	r28, r26
 40a:	db 0b       	sbc	r29, r27
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	09 94       	ijmp

00000418 <__epilogue_restores__>:
 418:	2a 88       	ldd	r2, Y+18	; 0x12
 41a:	39 88       	ldd	r3, Y+17	; 0x11
 41c:	48 88       	ldd	r4, Y+16	; 0x10
 41e:	5f 84       	ldd	r5, Y+15	; 0x0f
 420:	6e 84       	ldd	r6, Y+14	; 0x0e
 422:	7d 84       	ldd	r7, Y+13	; 0x0d
 424:	8c 84       	ldd	r8, Y+12	; 0x0c
 426:	9b 84       	ldd	r9, Y+11	; 0x0b
 428:	aa 84       	ldd	r10, Y+10	; 0x0a
 42a:	b9 84       	ldd	r11, Y+9	; 0x09
 42c:	c8 84       	ldd	r12, Y+8	; 0x08
 42e:	df 80       	ldd	r13, Y+7	; 0x07
 430:	ee 80       	ldd	r14, Y+6	; 0x06
 432:	fd 80       	ldd	r15, Y+5	; 0x05
 434:	0c 81       	ldd	r16, Y+4	; 0x04
 436:	1b 81       	ldd	r17, Y+3	; 0x03
 438:	aa 81       	ldd	r26, Y+2	; 0x02
 43a:	b9 81       	ldd	r27, Y+1	; 0x01
 43c:	ce 0f       	add	r28, r30
 43e:	d1 1d       	adc	r29, r1
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	ed 01       	movw	r28, r26
 44c:	08 95       	ret

0000044e <__udivmodsi4>:
 44e:	a1 e2       	ldi	r26, 0x21	; 33
 450:	1a 2e       	mov	r1, r26
 452:	aa 1b       	sub	r26, r26
 454:	bb 1b       	sub	r27, r27
 456:	fd 01       	movw	r30, r26
 458:	0d c0       	rjmp	.+26     	; 0x474 <__udivmodsi4_ep>

0000045a <__udivmodsi4_loop>:
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	ee 1f       	adc	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	a2 17       	cp	r26, r18
 464:	b3 07       	cpc	r27, r19
 466:	e4 07       	cpc	r30, r20
 468:	f5 07       	cpc	r31, r21
 46a:	20 f0       	brcs	.+8      	; 0x474 <__udivmodsi4_ep>
 46c:	a2 1b       	sub	r26, r18
 46e:	b3 0b       	sbc	r27, r19
 470:	e4 0b       	sbc	r30, r20
 472:	f5 0b       	sbc	r31, r21

00000474 <__udivmodsi4_ep>:
 474:	66 1f       	adc	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	1a 94       	dec	r1
 47e:	69 f7       	brne	.-38     	; 0x45a <__udivmodsi4_loop>
 480:	60 95       	com	r22
 482:	70 95       	com	r23
 484:	80 95       	com	r24
 486:	90 95       	com	r25
 488:	9b 01       	movw	r18, r22
 48a:	ac 01       	movw	r20, r24
 48c:	bd 01       	movw	r22, r26
 48e:	cf 01       	movw	r24, r30
 490:	08 95       	ret

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
