
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000058  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000000ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000045  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000011a  00000000  00000000  00000131  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b1  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000107  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000af  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	06 d0       	rcall	.+12     	; 0x3c <main>
  30:	11 c0       	rjmp	.+34     	; 0x54 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <test>:
#include <avr/io.h>
#include "test1.h"

int test(void){
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  34:	17 ba       	out	0x17, r1	; 23
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
  36:	85 e9       	ldi	r24, 0x95	; 149
  38:	88 bb       	out	0x18, r24	; 24
}
  3a:	08 95       	ret

0000003c <main>:
#include <avr/io.h>
#include "test1.h"

int test(void){
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  3c:	17 ba       	out	0x17, r1	; 23
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
  3e:	85 e9       	ldi	r24, 0x95	; 149
  40:	88 bb       	out	0x18, r24	; 24
}

int main(void){
	test();
	test1_func();
  42:	03 d0       	rcall	.+6      	; 0x4a <test1_func>
	for (;;) {
 		asm("sleep"); // ??????? ? ????? Idle
  44:	88 95       	sleep
 		asm("nop");
  46:	00 00       	nop
  48:	fd cf       	rjmp	.-6      	; 0x44 <__SREG__+0x5>

0000004a <test1_func>:
#include <avr/io.h>

int test1_func(void){
	DDRA=0xFF; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b10010100; // ????????? LED7, PB0-????????????? ???????? ??????
  4e:	84 e9       	ldi	r24, 0x94	; 148
  50:	8b bb       	out	0x1b, r24	; 27
}
  52:	08 95       	ret

00000054 <_exit>:
  54:	f8 94       	cli

00000056 <__stop_program>:
  56:	ff cf       	rjmp	.-2      	; 0x56 <__stop_program>
