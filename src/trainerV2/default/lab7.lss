
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000118  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  000001b4  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d8  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029f  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a9  00000000  00000000  000005ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010d  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 e1       	ldi	r30, 0x18	; 24
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a8 36       	cpi	r26, 0x68	; 104
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a8 e6       	ldi	r26, 0x68	; 104
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	aa 36       	cpi	r26, 0x6A	; 106
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0e d0       	rcall	.+28     	; 0x72 <main>
  56:	5e c0       	rjmp	.+188    	; 0x114 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <test>:
#include "test1.h"
#include "keyboard.h"
#include "uart.h"

int test(void){
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  5a:	17 ba       	out	0x17, r1	; 23
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
  5c:	85 e9       	ldi	r24, 0x95	; 149
  5e:	88 bb       	out	0x18, r24	; 24
}
  60:	08 95       	ret

00000062 <init_main>:

void init_main(void){
	DDRA=0xF0;
  62:	80 ef       	ldi	r24, 0xF0	; 240
  64:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  66:	8f e0       	ldi	r24, 0x0F	; 15
  68:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  6e:	87 bb       	out	0x17, r24	; 23
	//PORTB=0xF3;
}
  70:	08 95       	ret

00000072 <main>:
	DDRB=0x00; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
	PORTB=0b10010101; // ????????? LED7, PB0-????????????? ???????? ??????
}

void init_main(void){
	DDRA=0xF0;
  72:	80 ef       	ldi	r24, 0xF0	; 240
  74:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  76:	8f e0       	ldi	r24, 0x0F	; 15
  78:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
  7e:	87 bb       	out	0x17, r24	; 23
	//uart_send_byte('h');
	//uart_send_byte('3');

	while(1) {
		//uart_send_byte1('e');
		PORTB=keyboard_get_state();
  80:	0b d0       	rcall	.+22     	; 0x98 <keyboard_get_state>
  82:	88 bb       	out	0x18, r24	; 24
		PORTC=keyboard_get_state();
  84:	09 d0       	rcall	.+18     	; 0x98 <keyboard_get_state>
  86:	85 bb       	out	0x15, r24	; 21
		PORTC |= 0b10000000;
  88:	af 9a       	sbi	0x15, 7	; 21
		//PORTB |= 1<<PB7;
		//PORTB &= 0x7F;
 		//asm("sleep"); // ??????? ? ????? Idle
 		asm("nop");
  8a:	00 00       	nop
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <main+0xe>

0000008e <test1_func>:
#include <avr/io.h>

int test1_func(void){
	DDRA=0xFF; // PB7,PB6 ??? ?????? ?? LED7,LED6 PB0- ??? ?????
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b10010100; // ????????? LED7, PB0-????????????? ???????? ??????
  92:	84 e9       	ldi	r24, 0x94	; 148
  94:	8b bb       	out	0x1b, r24	; 27
}
  96:	08 95       	ret

00000098 <keyboard_get_state>:
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
  98:	10 92 68 00 	sts	0x0068, r1
  9c:	40 91 69 00 	lds	r20, 0x0069
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	23 c0       	rjmp	.+70     	; 0xea <keyboard_get_state+0x52>
    { 
       PORTA=portState[i];
  a4:	e5 2f       	mov	r30, r21
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 81       	ld	r24, Z
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	18 c0       	rjmp	.+48     	; 0xe4 <keyboard_get_state+0x4c>
       for(j=0; j<4; j++)
       { 
          if(((PINA&inputState[j])==0))
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	24 2f       	mov	r18, r20
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	64 2f       	mov	r22, r20
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	f9 01       	movw	r30, r18
  c0:	ec 59       	subi	r30, 0x9C	; 156
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	90 81       	ld	r25, Z
  c6:	89 23       	and	r24, r25
  c8:	61 f4       	brne	.+24     	; 0xe2 <keyboard_get_state+0x4a>
  ca:	40 93 69 00 	sts	0x0069, r20
  ce:	50 93 68 00 	sts	0x0068, r21
          {
		  	return (j<<4) | i;
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e1 f7       	brne	.-8      	; 0xd4 <keyboard_get_state+0x3c>
  dc:	85 2f       	mov	r24, r21
  de:	82 2b       	or	r24, r18
  e0:	08 95       	ret
  e2:	46 2f       	mov	r20, r22
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
    { 
       PORTA=portState[i];
       for(j=0; j<4; j++)
  e4:	44 30       	cpi	r20, 0x04	; 4
  e6:	31 f7       	brne	.-52     	; 0xb4 <keyboard_get_state+0x1c>
  e8:	5f 5f       	subi	r21, 0xFF	; 255
	returns (line<<4 | coluumn) 
	values in [0;3]
	no idea why they swap
*/
char keyboard_get_state(void){
 	for(i=0; i<4; i++)
  ea:	54 30       	cpi	r21, 0x04	; 4
  ec:	d8 f2       	brcs	.-74     	; 0xa4 <keyboard_get_state+0xc>
  ee:	40 93 69 00 	sts	0x0069, r20
  f2:	50 93 68 00 	sts	0x0068, r21
  f6:	8f ef       	ldi	r24, 0xFF	; 255
		  	return (j<<4) | i;
          }
       }                          
    }
	return 0xFF;  
}
  f8:	08 95       	ret

000000fa <uart_init>:
#define F_CPU 1000000UL
#define BAUD 9600
#include <util/setbaud.h>

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
  fa:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
 100:	59 9a       	sbi	0x0b, 1	; 11
#else
    UCSRA &= ~(_BV(U2X));
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	8a b9       	out	0x0a, r24	; 10
}
 10a:	08 95       	ret

0000010c <uart_send_byte>:

void uart_send_byte(char c) {
   loop_until_bit_is_set(UCSRA, UDRE); /* Wait until data register empty. */
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <uart_send_byte>
   UDR = c;
 110:	8c b9       	out	0x0c, r24	; 12
}
 112:	08 95       	ret

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
